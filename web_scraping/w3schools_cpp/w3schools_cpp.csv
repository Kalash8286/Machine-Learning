Heading,Link,Intro,Subheading,Definitions,Example,List_item,table_item,Image_url
cpp||Tutorial,https://www.w3schools.com/cpp/default.asp,,"['Examples in Each Chapter', 'Learn by Examples', 'C++ Quiz']","['Our ""Try it Yourself"" editor makes it easy to learn C++. You can edit C++ code and view the result in your browser.Click on the ""Run example"" button to see how it works.', 'Learn by examples! This tutorial supplements all explanations with clarifying examples.See All C++ Examples', 'Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++.Start C++ Quiz']","['\n  #include <iostream>using namespace std;int main() {\xa0 \n  cout << ""Hello World!"";\xa0 return 0;}', '', '']",[''],[],[]
cpp||Introduction,https://www.w3schools.com/cpp/cpp_intro.asp,,"['What is C++?', 'Why Use C++', 'Get Started']","['C++ is a cross-platform language that can be used to create high-performance applications.C++ was developed by Bjarne Stroustrup, as an extension to the C language.C++ gives programmers a high level of control over system resources and memory.The language was updated 3 major times in 2011, 2014, and 2017 to C++11, C++14, and  C++17.', ""C++ is one of the world's most popular programming languages.C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.C++ is portable and can be used to develop applications that can be adapted to multiple platforms.C++ is fun and easy to learn!As C++ is close to C# and Java, it makes it easy for programmers to switch to C++ or vice versa"", 'This tutorial will teach you the basics of C++.It is not necessary to have any prior programming experience.']","['', '', '']",[''],[],[]
cpp||Getting Started,https://www.w3schools.com/cpp/cpp_getstarted.asp,,"['C++ Get Started', 'C++ Install IDE', 'C++ Quickstart', 'Learning C++ At W3Schools']","['To start using C++, you need two things:There are many text editors and compilers to choose from. In this tutorial, we \nwill use an IDE (see below).', ""An IDE (Integrated Development Environment) is used to edit AND compile the code.Popular IDE's include Code::Blocks, Eclipse, and Visual Studio.  These are all \nfree, and they can be used to both edit and debug C++ code.Note: Web-based IDE's can work as well, but functionality is limited.We will use Code::Blocks in our tutorial, which we believe is a good place to start.You can find the latest version of Codeblocks at http://www.codeblocks.org/downloads/26. \nDownload the mingw-setup.exe file, which will install the text editor with \na compiler. "", ""Let's create our first C++ file.Open Codeblocks and go to File > New > Empty File.Write the following C++ code and save the file as myfirstprogram.cpp (File > Save File as):Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.In Codeblocks, it should look like this:Then, go to Build > Build and Run to run (execute) the program. The result will look something to this:Congratulations! You have now written and executed your first C++ program."", 'When learning C++ at W3Schools.com, you can use our ""Try it Yourself"" tool, which shows both the code and the result. This will make it easier for \nyou to understand every part as we move forward:']","['\n  #include <iostream>using namespace std;int main() {\xa0 \n  cout << ""Hello World!"";\xa0 return 0;}', '\n\n  Hello World!Process returned 0 (0x0) execution time : 0.011 sPress any \n  key to continue.\n', '', '']","['C++ Get Started###&&&|||A text editor, like Notepad, to write C++ code|||A compiler, like GCC, to translate the C++ code into a language that |||the computer will understand|||']",[],['codeblocks2.png']
cpp||Syntax,https://www.w3schools.com/cpp/cpp_syntax.asp,,"['C++ Syntax', 'Omitting Namespace']","['Let\'s break up the following code to understand it better:Line 1: #include <iostream> is a \nheader file library that lets us work with input and output objects, such as \ncout (used in line 5). Header files add functionality to C++ programs.Line 2: using namespace std \nmeans that we can use names for objects and variables from the \nstandard library.Line 3: A blank line. C++ ignores white space. But we use it \nto make the code more readable.Line 4: Another thing that always appear in a C++ program, is int main(). This is called a \nfunction. Any code inside its curly brackets {} will be executed.\nLine 5: cout (pronounced ""see-out"") is an \nobject used together with the insertion operator (<<) \nto output/print text. In our example it will output ""Hello World"".Note: Every C++ statement ends with a semicolon ;.Note: The body of int main() could also been written as:\nint main () { cout << ""Hello World! "";  return 0; \n}Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.Line 6: return 0 ends the main function.Line 7: Do not forget to add the closing curly bracket } to actually end the \nmain function.', 'You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, \nfollowed by the :: operator \nfor some objects:']","['\n  #include <iostream>using namespace std;int main() {\xa0 \n  cout << ""Hello World!"";\xa0 return 0;}', '']",[''],[],[]
cpp||Output (Print Text),https://www.w3schools.com/cpp/cpp_output.asp,,['C++ Output (Print Text)'],"['The cout object, together with the << \noperator, is used to output values/print text:You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:']",[''],[''],[],[]
cpp||Output (Print Text),https://www.w3schools.com/cpp/cpp_output.asp,,['C++ Output (Print Text)'],"['The cout object, together with the << \noperator, is used to output values/print text:You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:']",[''],[''],[],[]
cpp||New Lines,https://www.w3schools.com/cpp/cpp_new_lines.asp,,['New Lines'],"['To insert a new line, you can use the \\n character:Tip: Two \\n characters after each other will create a blank line:Another way to insert a new line, is with the endl manipulator:']",[''],[''],[],[]
cpp||Comments,https://www.w3schools.com/cpp/cpp_comments.asp,,"['C++ Comments', 'Single-line Comments', 'C++ Multi-line Comments']","['Comments can be used to explain C++ code, and to make it more readable. It can also be used to \nprevent execution when testing alternative code. Comments can be singled-lined or multi-lined.', 'Single-line comments start with two forward slashes (//).Any text between // and the end of the line \nis ignored by the compiler (will not be executed).This example uses a single-line comment before a line of code:This example uses a single-line comment at the end of a line of code:', 'Multi-line comments start with /* and ends with */.Any text between /* and */ will be ignored by \nthe compiler:']","['\n  // This is a commentcout << ""Hello World!""; &&&&&& \n  cout << ""Hello World!""; // This is a comment', '', '']",[''],[],[]
cpp||Variables,https://www.w3schools.com/cpp/cpp_variables.asp,,"['C++ Variables', 'Declaring (Creating) Variables', 'Other Types', 'Display Variables', 'Add Variables Together']","['Variables are containers for storing data values. In C++, there are different types of variables (defined with different keywords), for example:', 'To create a variable, specify the type and assign it a value:Where type is one of C++ types (such as int), and \nvariableName is the name of the variable (such as x or\nmyName). The equal sign is used to assign values to the variable.To create a variable that should store a number, look at the following example:You can also declare a variable without assigning the value, and assign the value later:Note that if you assign a new value to an existing variable, it will overwrite the previous value:', 'A demonstration of other data types:', 'The cout object is used together with the << \noperator to display variables.To combine both text and a variable, separate them with the << \noperator:', 'To add a variable to another variable, you can use the + \noperator:']","['\ntype variableName = value; &&&&&& \n  int myNum = 15;cout << myNum; &&&&&& \n  int myNum;myNum = 15;cout << myNum; &&&&&& \n  int myNum = 15;\xa0\xa0// myNum is 15myNum = 10;\xa0 // Now myNum is 10cout << myNum;\xa0 // Outputs 10', '\n  int myNum = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Integer (whole number without decimals)double myFloatNum = 5.99;\xa0\xa0\xa0 \n  // Floating point number (with decimals)char myLetter = \'D\';\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Characterstring myText = ""Hello"";\xa0\xa0\xa0\xa0 \n  // String (text)bool \n  myBoolean = true;\xa0\xa0\xa0\xa0\xa0\xa0 // Boolean (true or \n  false)', '\n  int myAge = 35;cout << ""I am "" << myAge << "" years old."";', '\n  int x = 5;int y = 6;int sum = x + y;cout << sum;', '']","['C++ Variables###&&&|||int - stores integers (whole numbers), without decimals, such as 123 or -123|||double - stores floating point numbers, with decimals, such as 19.99 or -19.99|||char - stores single characters, such as \'a\' or \'B\'. ||| Char values are surrounded by single quotes|||string - stores text, such as ""Hello World"". ||| String values are surrounded by double quotes|||bool - stores values with two states: ||| true or false|||']",[],[]
cpp||Variables,https://www.w3schools.com/cpp/cpp_variables.asp,,"['C++ Variables', 'Declaring (Creating) Variables', 'Other Types', 'Display Variables', 'Add Variables Together']","['Variables are containers for storing data values. In C++, there are different types of variables (defined with different keywords), for example:', 'To create a variable, specify the type and assign it a value:Where type is one of C++ types (such as int), and \nvariableName is the name of the variable (such as x or\nmyName). The equal sign is used to assign values to the variable.To create a variable that should store a number, look at the following example:You can also declare a variable without assigning the value, and assign the value later:Note that if you assign a new value to an existing variable, it will overwrite the previous value:', 'A demonstration of other data types:', 'The cout object is used together with the << \noperator to display variables.To combine both text and a variable, separate them with the << \noperator:', 'To add a variable to another variable, you can use the + \noperator:']","['\ntype variableName = value; &&&&&& \n  int myNum = 15;cout << myNum; &&&&&& \n  int myNum;myNum = 15;cout << myNum; &&&&&& \n  int myNum = 15;\xa0\xa0// myNum is 15myNum = 10;\xa0 // Now myNum is 10cout << myNum;\xa0 // Outputs 10', '\n  int myNum = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Integer (whole number without decimals)double myFloatNum = 5.99;\xa0\xa0\xa0 \n  // Floating point number (with decimals)char myLetter = \'D\';\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Characterstring myText = ""Hello"";\xa0\xa0\xa0\xa0 \n  // String (text)bool \n  myBoolean = true;\xa0\xa0\xa0\xa0\xa0\xa0 // Boolean (true or \n  false)', '\n  int myAge = 35;cout << ""I am "" << myAge << "" years old."";', '\n  int x = 5;int y = 6;int sum = x + y;cout << sum;', '']","['C++ Variables###&&&|||int - stores integers (whole numbers), without decimals, such as 123 or -123|||double - stores floating point numbers, with decimals, such as 19.99 or -19.99|||char - stores single characters, such as \'a\' or \'B\'. ||| Char values are surrounded by single quotes|||string - stores text, such as ""Hello World"". ||| String values are surrounded by double quotes|||bool - stores values with two states: ||| true or false|||']",[],[]
cpp||Declare Multiple Variables,https://www.w3schools.com/cpp/cpp_variables_multiple.asp,,['Declare Many Variables'],"['To declare more than one variable of the same type, \nuse a comma-separated list:']","['\n  int x = 5, y = 6, z = 50;cout << \n  x + y + z;']",[''],[],[]
cpp||Identifiers,https://www.w3schools.com/cpp/cpp_variables_identifiers.asp,,['C++ Identifiers'],"['All C++ variables must be\nidentified with unique names.These unique names are called identifiers.Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).Note: It is recommended to use descriptive names in order to \ncreate understandable and maintainable code:The general rules for naming variables are:']","['\n  // Goodint minutesPerHour = 60;// OK, but not so easy to \n  understand what m actually isint  \n  m = 60;']","['C++ Identifiers###&&&|||Names can contain letters, digits and underscores|||Names must begin with a letter or an underscore (_)|||Names are case sensitive (myVar and myvar are different variables)|||Names cannot contain whitespaces or special characters like !, #, %, etc.|||Reserved words (like C++ keywords, such as int) cannot be used as names|||']",[],[]
cpp||Constants,https://www.w3schools.com/cpp/cpp_variables_constants.asp,,['Constants'],"['When you do not want others (or yourself) to override existing variable values, use the const keyword (this will declare the \nvariable as ""constant"", which means unchangeable and read-only):You should always declare the variable as constant when you have values that are unlikely to change:']","[""\nconst int myNum = 15;\xa0 // myNum will always be 15myNum = 10;\xa0 // error: \n  assignment of read-only variable 'myNum' &&&&&& \nconst int minutesPerHour = 60;\nconst float PI = 3.14;""]",[''],[],[]
cpp||User Input,https://www.w3schools.com/cpp/cpp_user_input.asp,,"['C++ User Input', 'Creating a Simple Calculator']","['You have already learned that cout is used to output (print) values. Now we will use cin to get user input.cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).In the following example, the user can input a number, which is stored in the \nvariable x. Then we print the value of x:', 'In this example, the user must input two numbers. Then we print the \nsum by calculating (adding) the two numbers:There you go! You just built a basic calculator!']","['\n  int x;\xa0cout << ""Type a number: ""; // Type a number and \n  press entercin >> x; // Get user \n  input from the keyboardcout << ""Your number is: "" << x; \n  // Display the input value', '\n  int x, y;int sum;cout << ""Type a number: "";cin >> x;cout << ""Type another number: "";cin >> \n  y;sum = x + y;cout << ""Sum is: "" << sum;']",[''],[],[]
cpp||Data Types,https://www.w3schools.com/cpp/cpp_data_types.asp,,"['C++ Data Types', 'Basic Data Types']","['As explained in the Variables chapter, a variable in C++ must be a specified data type:', 'The data type specifies the size and type of information the variable will store:']","['\n  int myNum = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Integer (whole number)float myFloatNum = 5.99;\xa0\xa0\xa0\xa0 \n  // Floating point numberdouble myDoubleNum = 9.98;\xa0 \xa0// Floating point numberchar myLetter = \'D\';\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Characterbool \n  myBoolean = true;\xa0\xa0\xa0\xa0\xa0\xa0 // Booleanstring myText = ""Hello"";\xa0\xa0\xa0\xa0 \n  // String', '']",[''],"['Data Type|||Size|||Description|||&&&int|||4 bytes|||Stores whole numbers, without decimals|||&&&float|||4 bytes|||Stores fractional numbers, containing one or more decimals. Sufficient for \nstoring 7 decimal digits|||&&&double|||8 bytes|||Stores fractional numbers, containing one or more decimals. Sufficient for \nstoring 15 decimal digits|||&&&boolean|||1 byte|||Stores true or false values|||&&&char|||1 byte|||Stores a single character/letter/number, or ASCII values|||&&&']",[]
cpp||Data Types,https://www.w3schools.com/cpp/cpp_data_types.asp,,"['C++ Data Types', 'Basic Data Types']","['As explained in the Variables chapter, a variable in C++ must be a specified data type:', 'The data type specifies the size and type of information the variable will store:']","['\n  int myNum = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Integer (whole number)float myFloatNum = 5.99;\xa0\xa0\xa0\xa0 \n  // Floating point numberdouble myDoubleNum = 9.98;\xa0 \xa0// Floating point numberchar myLetter = \'D\';\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Characterbool \n  myBoolean = true;\xa0\xa0\xa0\xa0\xa0\xa0 // Booleanstring myText = ""Hello"";\xa0\xa0\xa0\xa0 \n  // String', '']",[''],"['Data Type|||Size|||Description|||&&&int|||4 bytes|||Stores whole numbers, without decimals|||&&&float|||4 bytes|||Stores fractional numbers, containing one or more decimals. Sufficient for \nstoring 7 decimal digits|||&&&double|||8 bytes|||Stores fractional numbers, containing one or more decimals. Sufficient for \nstoring 15 decimal digits|||&&&boolean|||1 byte|||Stores true or false values|||&&&char|||1 byte|||Stores a single character/letter/number, or ASCII values|||&&&']",[]
cpp||Numeric Data Types,https://www.w3schools.com/cpp/cpp_data_types_numeric.asp,,['Numeric Types'],"['Use int when you need to store a whole number without decimals, like 35 or 1000, and float or double when you need a \nfloating point number (with decimals), like 9.99 or 3.14515.A floating point number can also be a scientific number with an ""e"" to indicate the power of 10:']",[''],[''],[],[]
cpp||Boolean Data Types,https://www.w3schools.com/cpp/cpp_data_types_bool.asp,,['Boolean Types'],"['A boolean data type is declared with the bool keyword and can only take the values true or false. When the value is returned, true \n= 1 and false \n= 0.']",['\n  bool isCodingFun = true;bool isFishTasty = false;cout << isCodingFun;\xa0 \n  // Outputs 1 (true)cout << isFishTasty;\xa0 // Outputs 0 (false)'],[''],[],[]
cpp||Character Data Types,https://www.w3schools.com/cpp/cpp_data_types_char.asp,,['Character Types'],"[""The char data type is used to store a \nsingle character. The character must be \nsurrounded by single quotes, like 'A' or 'c':Alternatively, you can use ASCII values to display certain characters:Tip: A list of all ASCII values can be found in our ASCII Table Reference.""]","[""\n  char myGrade = 'B';\n  cout << myGrade; &&&&&& \n  char a = 65, b = 66, c = 67;cout << a;cout << b;cout << c;""]",[''],[],[]
cpp||String Data Types,https://www.w3schools.com/cpp/cpp_data_types_string.asp,,['String Types'],"['The string type is used to store a sequence of characters (text). \nThis is not a built-in type, but it behaves like one in its most basic usage. String values must be surrounded by double quotes:To use strings, you must include an additional header file in the source \ncode, the <string> library:']","['\n  string greeting = ""Hello"";cout << greeting; &&&&&& \n  // Include the string library#include <string>// Create a string variablestring greeting = ""Hello"";\n// Output string valuecout << greeting;']",[''],[],[]
cpp||Operators,https://www.w3schools.com/cpp/cpp_operators.asp,,"['C++ Operators', 'Arithmetic Operators']","['Operators are used to perform operations on variables and values.In the example below, we use the\n+ operator to add together two values:Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:C++ divides the operators into the following groups:', 'Arithmetic operators are used to perform common mathematical operations.']","['\n  int x = 100 + 50; &&&&&& \n  int sum1 = 100 + 50;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // 150 (100 + 50)\n  int sum2 = sum1 + 250;\xa0\xa0\xa0\xa0\xa0 // 400 (150 + 250)\n  int sum3 = sum2 + sum2;\xa0\xa0\xa0\xa0 // 800 (400 + 400)', '']",['C++ Operators###&&&|||Arithmetic operators|||Assignment operators|||Comparison operators|||Logical operators|||Bitwise operators|||'],['Operator|||Name|||Description|||Example|||Try it|||&&&+|||Addition|||Adds together two values|||x + y|||Try it »|||&&&-|||Subtraction|||Subtracts one value from another|||x - y|||Try it »|||&&&*|||Multiplication|||Multiplies two values|||x * y|||Try it »|||&&&/|||Division|||Divides one value by another|||x / y|||Try it »|||&&&%|||Modulus|||Returns the division remainder|||x % y|||Try it »|||&&&++|||Increment|||Increases the value of a variable by 1|||++x|||Try it »|||&&&--|||Decrement|||Decreases the value of a variable by 1|||--x|||Try it »|||&&&'],[]
cpp||Operators,https://www.w3schools.com/cpp/cpp_operators.asp,,"['C++ Operators', 'Arithmetic Operators']","['Operators are used to perform operations on variables and values.In the example below, we use the\n+ operator to add together two values:Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:C++ divides the operators into the following groups:', 'Arithmetic operators are used to perform common mathematical operations.']","['\n  int x = 100 + 50; &&&&&& \n  int sum1 = 100 + 50;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // 150 (100 + 50)\n  int sum2 = sum1 + 250;\xa0\xa0\xa0\xa0\xa0 // 400 (150 + 250)\n  int sum3 = sum2 + sum2;\xa0\xa0\xa0\xa0 // 800 (400 + 400)', '']",['C++ Operators###&&&|||Arithmetic operators|||Assignment operators|||Comparison operators|||Logical operators|||Bitwise operators|||'],['Operator|||Name|||Description|||Example|||Try it|||&&&+|||Addition|||Adds together two values|||x + y|||Try it »|||&&&-|||Subtraction|||Subtracts one value from another|||x - y|||Try it »|||&&&*|||Multiplication|||Multiplies two values|||x * y|||Try it »|||&&&/|||Division|||Divides one value by another|||x / y|||Try it »|||&&&%|||Modulus|||Returns the division remainder|||x % y|||Try it »|||&&&++|||Increment|||Increases the value of a variable by 1|||++x|||Try it »|||&&&--|||Decrement|||Decreases the value of a variable by 1|||--x|||Try it »|||&&&'],[]
cpp||Assignment Operators,https://www.w3schools.com/cpp/cpp_operators_assignment.asp,,['Assignment Operators'],"['Assignment operators are used to assign values to variables.In the example below, we use the assignment operator (=) \nto assign the value 10 to a variable called x:The addition assignment operator (+=) adds a value to a variable:A list of all assignment operators:']",[''],[''],['Operator|||Example|||Same As|||Try it|||&&&=|||x = 5|||x = 5|||Try it »|||&&&+=|||x += 3|||x = x + 3|||Try it »|||&&&-=|||x -= 3|||x = x - 3|||Try it »|||&&&*=|||x *= 3|||x = x * 3|||Try it »|||&&&/=|||x /= 3|||x = x / 3|||Try it »|||&&&%=|||x %= 3|||x = x % 3|||Try it »|||&&&&=|||x &= 3|||x = x & 3|||Try it »|||&&&|=|||x |= 3|||x = x | 3|||Try it »|||&&&^=|||x ^= 3|||x = x ^ 3|||Try it »|||&&&>>=|||x >>= 3|||x = x >> 3|||Try it »|||&&&<<=|||x <<= 3|||x = x << 3|||Try it »|||&&&'],[]
cpp||Comparison Operators,https://www.w3schools.com/cpp/cpp_operators_comparison.asp,,['Comparison Operators'],"['Comparison operators are used to compare two values.Note: The return value of a comparison is either true (1) or false (0).In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:A list of all comparison operators:']",[''],[''],['Operator|||Name|||Example|||Try it|||&&&==|||Equal to|||x == y|||Try it »|||&&&!=|||Not equal|||x != y|||Try it »|||&&&>|||Greater than|||x > y|||Try it »|||&&&<|||Less than|||x < y|||Try it »|||&&&>=|||Greater than or equal to|||x >= y|||Try it »|||&&&<=|||Less than or equal to|||x <= y|||Try it »|||&&&'],[]
cpp||Logical Operators,https://www.w3schools.com/cpp/cpp_operators_logical.asp,,['Logical Operators'],['Logical operators are used to determine the logic between variables or \nvalues:'],[''],[''],"['Operator|||Name|||Description|||Example|||Try it|||&&&&&\xa0|||Logical and|||Returns true if both statements are true|||x < 5 &&\xa0 x < 10|||Try it »|||&&&||\xa0|||Logical or|||Returns true if one of the statements is true|||x < 5 || x < 4|||Try it »|||&&&!|||Logical not|||Reverse the result, returns false if the result is true|||!(x < 5 && x < 10)|||Try it »|||&&&']",[]
cpp||Strings,https://www.w3schools.com/cpp/cpp_strings.asp,,['C++ Strings'],"['Strings are used for storing text.A string variable contains a collection of characters surrounded by double quotes:To use strings, you must include an additional header file in the source \ncode, the <string> library:']","['\n  string greeting = ""Hello""; &&&&&& \n  // Include the string library#include <string>// Create a string variablestring greeting = ""Hello"";']",[''],[],[]
cpp||Strings,https://www.w3schools.com/cpp/cpp_strings.asp,,['C++ Strings'],"['Strings are used for storing text.A string variable contains a collection of characters surrounded by double quotes:To use strings, you must include an additional header file in the source \ncode, the <string> library:']","['\n  string greeting = ""Hello""; &&&&&& \n  // Include the string library#include <string>// Create a string variablestring greeting = ""Hello"";']",[''],[],[]
cpp||String Concatenation,https://www.w3schools.com/cpp/cpp_strings_concat.asp,,"['String Concatenation', 'Append']","['The + operator can be used between strings to add them together to make a new \nstring. This is called concatenation:In the example above, we added a space after firstName to create a space \nbetween John and Doe on output. However, you could also add a space with quotes ("" "" or \' \'):', 'A string in C++ is actually an object, which contain functions that can perform certain operations on strings. For example, you can also concatenate strings with the append() function:']","['\n  string firstName = ""John "";string lastName = ""Doe"";string fullName = \n  firstName + lastName;cout << fullName; &&&&&& \n  string firstName = ""John"";string lastName = ""Doe"";string fullName = \n  firstName + "" "" + lastName;cout << fullName;', '']",[''],[],[]
cpp||Numbers and Strings,https://www.w3schools.com/cpp/cpp_strings_numbers.asp,,['Adding Numbers and Strings'],"['If you add two numbers, the result will be a number:If you add two strings, the result will be a string concatenation:If you try to add a number to a string, an error occurs:']","['\n  int x = 10;\n  int y = 20;\n  int z = x + y;\xa0\xa0\xa0\xa0\xa0\xa0// z will be 30 (an integer)\n &&&&&& \n  string x = ""10"";\n  string y = ""20"";\n  string z = x + y;\xa0\xa0 // z will be 1020 (a string)\n &&&&&& \n  string x = ""10"";\n  int y = 20;\n  string z = x + y;']",[''],[],[]
cpp||String Length,https://www.w3schools.com/cpp/cpp_strings_length.asp,,['String Length'],"['To get the length of a string, use the length() function:Tip: You might see some C++ programs that use the size() function to get the length of a string. This is \njust an alias of length(). It is completely up to you if you want to use length() or size():']",[''],[''],[],[]
cpp||Access Strings,https://www.w3schools.com/cpp/cpp_strings_access.asp,,"['Access Strings', 'Change String Characters']","['You can access the characters in a string by referring to its index number \ninside square brackets [].This example prints the first character in \nmyString:This example prints the second character in \nmyString:', 'To change the value of a specific character in a string, refer to the index \nnumber, and use single quotes:']","['\n  string \n  myString = ""Hello"";cout << myString[0];// Outputs H\n &&&&&& \n  string \n  myString = ""Hello"";cout << myString[1];// Outputs e\n', '\n  string \n  myString = ""Hello"";myString[0] = \'J\';cout << myString;// \n  Outputs Jello instead of Hello\n']",[''],[],[]
cpp||User Input Strings,https://www.w3schools.com/cpp/cpp_strings_input.asp,,['User Input Strings'],"['It is possible to use the extraction operator >> on cin to display a string entered by a user:However, cin considers a space (whitespace, tabs, etc) as a terminating \ncharacter, which means that it can only display a single word (even if you type \nmany words):From the example above, you would expect the program to print ""John Doe"", but it only prints ""John"". That\'s why, when working with strings, we often use the getline() \nfunction to read a line of text. It takes cin as the first parameter, and the string \nvariable as second:']",[''],[''],[],[]
cpp||String Namespace,https://www.w3schools.com/cpp/cpp_strings_namespace.asp,,['Omitting Namespace'],"['You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, \nfollowed by the :: operator \nfor string (and cout) objects:']","['\n  #include <iostream>#include <string>int main() {\xa0\n  std::string greeting = ""Hello"";\xa0 std::cout \n  << greeting;\xa0 return 0;}']",[''],[],[]
cpp||Math,https://www.w3schools.com/cpp/cpp_math.asp,,"['C++ Math', 'Max and min', 'C++  <cmath> Header', 'Other Math Functions']","['C++ has many functions that allows you to perform mathematical tasks on numbers.', 'The max(x,y) function can be used to find the highest value of x and\ny:And the min(x,y) function can be used to find the lowest value of \nx \nand y:', 'Other functions, such as sqrt (square root), round (rounds a number) and log \n(natural logarithm), can be found in the <cmath> header \nfile:', 'A list of other popular Math functions (from the <cmath> library) can be found in the table below:']","['\n  cout << max(5, 10);\n &&&&&& \n  cout << min(5, 10);\n', '\n  // Include the cmath library#include <cmath>cout << \n  sqrt(64);cout << round(2.6);cout << log(2);\n', '', '']",[''],"['Function|||Description|||&&&abs(x)|||Returns the absolute value of x|||&&&acos(x)|||Returns the arccosine of x|||&&&asin(x)|||Returns the arcsine of x|||&&&atan(x)|||Returns the arctangent of x|||&&&cbrt(x)|||Returns the cube root of x|||&&&ceil(x)|||Returns the value of x rounded up to its nearest integer|||&&&cos(x)|||Returns the cosine of x|||&&&cosh(x)|||Returns the hyperbolic cosine of x|||&&&exp(x)|||Returns the value of Ex|||&&&expm1(x)|||Returns ex -1|||&&&fabs(x)|||Returns the absolute value of a floating x|||&&&fdim(x, y)|||Returns the positive difference between x and y|||&&&floor(x)|||Returns the value of x rounded down to its nearest integer|||&&&hypot(x, y)|||Returns sqrt(x2 +y2) without intermediate overflow or underflow|||&&&fma(x, y, z)|||Returns x*y+z without losing precision|||&&&fmax(x, y)|||Returns the highest value of a floating x and y|||&&&fmin(x, y)|||Returns the lowest value of a floating x and y|||&&&fmod(x, y)|||Returns the floating point remainder of x/y|||&&&pow(x, y)|||Returns the value of x to the power of y|||&&&sin(x)|||Returns the sine of x (x is in radians)|||&&&sinh(x)|||Returns the hyperbolic sine of a double value|||&&&tan(x)|||Returns the tangent of an angle|||&&&tanh(x)|||Returns the hyperbolic tangent of a double value|||&&&']",[]
cpp||Booleans,https://www.w3schools.com/cpp/cpp_booleans.asp,,"['C++ Booleans', 'Boolean Values']","['Very often, in programming, you will need a data type that can only have one of two values, like:For this, C++ has a bool data type, which can take the values true \n(1) or false (0).', 'A boolean variable is declared with the bool keyword and can only take the values true or false:From the example above, you can read that a true value returns 1, and false returns 0.However, it is more common to return boolean values from boolean expressions\n(see next page).']","['\n  bool isCodingFun = true;bool isFishTasty = false;cout << isCodingFun;\xa0 \n  // Outputs 1 (true)cout << isFishTasty;\xa0 // Outputs 0 (false)', '']",['C++ Booleans###&&&|||YES / NO|||ON / OFF|||TRUE / FALSE|||'],[],[]
cpp||Booleans,https://www.w3schools.com/cpp/cpp_booleans.asp,,"['C++ Booleans', 'Boolean Values']","['Very often, in programming, you will need a data type that can only have one of two values, like:For this, C++ has a bool data type, which can take the values true \n(1) or false (0).', 'A boolean variable is declared with the bool keyword and can only take the values true or false:From the example above, you can read that a true value returns 1, and false returns 0.However, it is more common to return boolean values from boolean expressions\n(see next page).']","['\n  bool isCodingFun = true;bool isFishTasty = false;cout << isCodingFun;\xa0 \n  // Outputs 1 (true)cout << isFishTasty;\xa0 // Outputs 0 (false)', '']",['C++ Booleans###&&&|||YES / NO|||ON / OFF|||TRUE / FALSE|||'],[],[]
cpp||Boolean Expressions,https://www.w3schools.com/cpp/cpp_booleans_expressions.asp,,['Boolean Expression'],"['A Boolean expression is a C++ expression that returns a boolean value: 1 (true) or 0 (false).You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:Or even easier:In the examples below, we use the equal to (==) operator to evaluate an expression:']","['\n  int x = 10;int y = 9;cout << (x > y); // returns 1 (true), because 10 is higher than 9 &&&&&& \n  cout << (10 > 9); // returns 1 (true), because 10 is higher than 9 &&&&&& \n  int x = 10;cout << (x == 10);\xa0 // returns 1 (true), because the value \n  of x is equal to 10 &&&&&& \n  cout << (10 == 15);\xa0 // returns \n  0 (false), because 10 is not equal to 15']",[''],[],[]
cpp||If ... Else,https://www.w3schools.com/cpp/cpp_conditions.asp,,"['C++ Conditions and If Statements', 'The if Statement']","['C++ supports the usual logical conditions from mathematics:You can use these conditions to perform different actions for different decisions.C++ has the following conditional statements:', 'Use the if statement to specify a block of \nC++ code to be executed if a condition is true.In the example below, we test two values to find out if 20 is greater than \n18. If the condition is true, print some text:We can also test variables:In the example above we use two variables, x and y, \nto test whether x is greater than y \n(using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that ""x is greater than y"".']","['\n\n  if (condition) {\xa0 // block of code to be executed if the \n  condition is true}\n &&&&&& \n  if (20 > 18) {\xa0 cout << ""20 is greater than 18"";} &&&&&& \n  int x = 20;int y = 18;if (x > y) {\xa0 cout << ""x is greater than \n  y"";}', '']","['C++ Conditions and If Statements###C++ Conditions and If Statements###&&&|||Less than: a < b|||Less than or equal to: a <= b|||Greater than: a > b|||Greater than or equal to: a >= b|||Equal to a == b|||Not Equal to: a != b|||&&&|||Use if to specify a block of code to be executed, if a specified condition is true|||Use else to specify a block of code to be executed, if the same condition is false|||Use else if to specify a new condition to test, if the first condition is false|||Use switch to specify many alternative blocks of code to be executed|||']",[],[]
cpp||If ... Else,https://www.w3schools.com/cpp/cpp_conditions.asp,,"['C++ Conditions and If Statements', 'The if Statement']","['C++ supports the usual logical conditions from mathematics:You can use these conditions to perform different actions for different decisions.C++ has the following conditional statements:', 'Use the if statement to specify a block of \nC++ code to be executed if a condition is true.In the example below, we test two values to find out if 20 is greater than \n18. If the condition is true, print some text:We can also test variables:In the example above we use two variables, x and y, \nto test whether x is greater than y \n(using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that ""x is greater than y"".']","['\n\n  if (condition) {\xa0 // block of code to be executed if the \n  condition is true}\n &&&&&& \n  if (20 > 18) {\xa0 cout << ""20 is greater than 18"";} &&&&&& \n  int x = 20;int y = 18;if (x > y) {\xa0 cout << ""x is greater than \n  y"";}', '']","['C++ Conditions and If Statements###C++ Conditions and If Statements###&&&|||Less than: a < b|||Less than or equal to: a <= b|||Greater than: a > b|||Greater than or equal to: a >= b|||Equal to a == b|||Not Equal to: a != b|||&&&|||Use if to specify a block of code to be executed, if a specified condition is true|||Use else to specify a block of code to be executed, if the same condition is false|||Use else if to specify a new condition to test, if the first condition is false|||Use switch to specify many alternative blocks of code to be executed|||']",[],[]
cpp||Else,https://www.w3schools.com/cpp/cpp_conditions_else.asp,,['The else Statement'],"['Use the else statement to specify a block of code to be executed if the condition is false.In the example above, time (20) is greater than 18, so the condition is false. \nBecause of this, we move on to the else condition and print to the screen ""Good \nevening"". If the time was less than 18, the program would print ""Good day"".']","['\n\n  if (condition) {\xa0 // block of code to be executed if the \n  condition is true} else { \xa0 // block of code to be executed \n  if the condition is false}\n\n &&&&&& \n  int time = 20;if (time < 18) {\xa0 cout << ""Good \n  day."";} else {\xa0 cout << ""Good \n  evening."";}// Outputs ""Good evening.""']",[''],[],[]
cpp||Else If,https://www.w3schools.com/cpp/cpp_conditions_elseif.asp,,['The else if Statement'],"['Use the else if statement to specify a new condition if the first condition is false.In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the  \nelse if statement, is also false, so we move on to the else\ncondition since condition1 and condition2 is both false - and print to the screen ""Good \nevening"".However, if the time was 14, our program would print ""Good day.""']","['\n\n  if (condition1) {\xa0 // block of code to be executed if \n  condition1 is true} else if (condition2) {\xa0 // block of \n  code to be executed if the condition1 is false and condition2 is true\n  } else {\xa0 // block of code to be executed if the condition1 is false \n  and condition2 is false}\n &&&&&& \n  int time = 22;if (time < 10) {\xa0 cout << ""Good \n  morning."";} else if (time < 20) {\xa0 cout << ""Good \n  day."";} else {\xa0 cout << ""Good evening."";}\n  // Outputs ""Good evening.""']",[''],[],[]
cpp||Short Hand If Else,https://www.w3schools.com/cpp/cpp_conditions_shorthand.asp,,['Short Hand If...Else (Ternary Operator)'],"['There is also a short-hand if else, which is known as the ternary operator \nbecause it consists of three operands. It can be used to replace multiple lines \nof code with a single line. It is often used to replace simple if else \nstatements:Instead of writing:You can simply write:']","['\nvariable = (condition) ? expressionTrue : \n  expressionFalse;\n &&&&&& \n  int time = 20;if (time < 18) {\xa0 cout << ""Good \n  day."";} else {\xa0 cout << ""Good \n  evening."";} &&&&&& \n  int time = 20;string result = (time < 18) ? ""Good day."" : ""Good evening."";\n  cout << result;']",[''],[],[]
cpp||Switch,https://www.w3schools.com/cpp/cpp_switch.asp,,"['C++ Switch Statements', 'The break Keyword', 'The default Keyword']","['Use the switch statement to select one of many code blocks to be executed.This is how it works:The example below uses the weekday number to calculate the weekday name:', ""When C++ reaches a break \nkeyword, it breaks out of the switch block.This will stop the execution of more code and case testing inside \nthe block.When a match is found, and the job is done, it's time for a break. There is no need for more testing."", 'The default keyword specifies some code to run if there is no \ncase match:']","['\n\n  switch(expression) {\xa0 case x:\xa0\xa0\xa0 // code \n  block\xa0\xa0\xa0 break;\xa0 case y:\xa0\xa0\xa0\n  // code block\xa0\xa0\xa0 break;\xa0 default:\xa0\xa0\xa0\n  // code block\n  }\n  &&&&&& \n  int day = 4;switch (day) {\xa0 case 1:\xa0\xa0\xa0 \n  cout << ""Monday"";\xa0\xa0\xa0 break;\xa0 case 2:\n  \xa0\xa0\xa0 cout << ""Tuesday"";\xa0\xa0\xa0 break;\xa0 case 3:\n  \xa0\xa0\xa0 cout << ""Wednesday"";\xa0\xa0\xa0 break;\xa0 case \n  4:\xa0\xa0\xa0 cout << ""Thursday"";\xa0\xa0\xa0 \n  break;\xa0 case 5:\xa0\xa0\xa0 cout << ""Friday"";\xa0\xa0\xa0 \n  break;\xa0 case 6:\xa0\xa0\xa0 cout << ""Saturday"";\xa0\xa0\xa0 \n  break;\xa0 case 7:\xa0\xa0\xa0 cout << ""Sunday"";\xa0\xa0\xa0 \n  break;\n  }// Outputs ""Thursday"" (day 4)', '\n  int day = 4;switch (day) {\xa0 case 6:\xa0\xa0\xa0 cout << ""Today \n  is Saturday"";\xa0\xa0\xa0 \n  break;\xa0 case 7:\xa0\xa0\xa0 cout << ""Today \n  is Sunday"";\xa0\xa0\xa0 \n  break;\xa0 default:\xa0\xa0\xa0 cout << ""Looking \n  forward to the Weekend"";\n  }// Outputs ""Looking forward to the Weekend""', '']","['C++ Switch Statements###&&&|||The switch expression is evaluated once|||The value of the expression is compared with the values of each case|||If there is a match, the associated block of code is executed|||The break and default keywords are optional, and will be described later in this chapter|||']",[],[]
cpp||While Loop,https://www.w3schools.com/cpp/cpp_while_loop.asp,,"['C++ Loops', 'C++ While Loop']","['Loops can execute a block of code as long as a specified condition is reached.Loops are handy because they save time, reduce errors, and they make code more readable.', 'The while loop loops through a block of code as long as a specified condition is true:In the example below, the code in the loop will run, over and over again, as long as \na variable (i) is less than 5:']","['\n  while (condition) {\n\xa0 // code block to be executed\n }\n &&&&&& \n  int i = 0;while (i < 5) {\n  \xa0 cout << i << ""\\n"";\n\xa0\xa0i++;}\n', '']",[''],[],[]
cpp||While Loop,https://www.w3schools.com/cpp/cpp_while_loop.asp,,"['C++ Loops', 'C++ While Loop']","['Loops can execute a block of code as long as a specified condition is reached.Loops are handy because they save time, reduce errors, and they make code more readable.', 'The while loop loops through a block of code as long as a specified condition is true:In the example below, the code in the loop will run, over and over again, as long as \na variable (i) is less than 5:']","['\n  while (condition) {\n\xa0 // code block to be executed\n }\n &&&&&& \n  int i = 0;while (i < 5) {\n  \xa0 cout << i << ""\\n"";\n\xa0\xa0i++;}\n', '']",[''],[],[]
cpp||Do/While Loop,https://www.w3schools.com/cpp/cpp_do_while_loop.asp,,['The Do/While Loop'],"['The do/while loop is a variant of the while loop. This loop will \nexecute the code block once, before checking if the condition is true, then it will\nrepeat the loop as long as the condition is true.The example below uses a do/while loop. The loop will always be \nexecuted at least once, even if the condition is false, because the code block \nis executed before the condition is tested:']","['\n  do {\n\xa0 // code block to be executed\n}\nwhile (condition);\n &&&&&& \n  int i = 0;do {\n  \xa0\xa0cout << i << ""\\n"";\n\xa0\xa0i++;}while (i < 5);\n']",[''],[],[]
cpp||For Loop,https://www.w3schools.com/cpp/cpp_for_loop.asp,,"['C++ For Loop', 'Another Example']","['When you know exactly how many times you want to loop through a block of \ncode, use the for loop instead of a while loop:Statement 1 is executed (one time) before the execution of the code block.Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.The example below will print the numbers 0 to 4:Statement 1 sets a variable before the loop starts (int i = 0).Statement 2 defines the condition for the loop to run (i must be less than \n5). If the condition is true, the loop will start over again, if it is false, \nthe loop will end.Statement 3 increases a value (i++) each time the code block in the loop has \nbeen executed.', 'This example will only print even values between 0 and 10:']","['\n\nfor (statement 1; statement 2; statement 3) {\n    \xa0 // code block to be executed\n }\n &&&&&& \n  for (int i = 0; i < 5; i++) {\xa0 cout << i << ""\\n"";}\n', '\nfor (int i = 0; i <= 10; i = i + 2) {\n  \xa0\xa0cout << i << ""\\n"";\n}\n']",[''],[],[]
cpp||Break and Continue,https://www.w3schools.com/cpp/cpp_break.asp,,"['C++ Break', 'C++ Continue', 'Break and Continue in While Loop']","['You have already seen the break statement used in an earlier chapter of this tutorial. It was used to ""jump out"" of a switch statement.The break statement can also be used to jump out of a \nloop.This example jumps out of the loop when i is equal to 4:', 'The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.This example skips the value of 4:', 'You can also use break and continue in while loops:']","['\n  for (int i = 0; i < 10; i++) {\xa0 if (i == 4) {\xa0\xa0\xa0 \n  break;\xa0 }\xa0 cout << i << ""\\n"";} \n', '\n  for (int i = 0; i < 10; i++) {\xa0 if (i == 4) {\xa0\xa0\xa0 \n  continue;\xa0 }\xa0 cout << i << ""\\n"";} \n', '\n  int i = 0;while (i < 10) {\xa0\xa0cout << i << ""\\n"";\xa0\xa0i++;\n  \xa0\xa0if (i == 4) {\xa0\xa0\xa0\xa0break;\xa0 \n  }} \n', '\n  int i = 0;while (i < 10) {\xa0\xa0if (i == 4) {\xa0\xa0\xa0 i++;\xa0\xa0\xa0\xa0continue;\n  \xa0\xa0}\xa0\xa0cout << i << ""\\n"";\xa0\xa0i++;} \n']",[''],[],[]
cpp||Arrays,https://www.w3schools.com/cpp/cpp_arrays.asp,,"['C++ Arrays', 'Access the Elements of an Array', 'Change an Array Element']","['Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each \nvalue.To declare an array, define the variable type, specify the name \nof the array followed by square brackets \nand specify the number of elements it should store:We have now declared a variable that holds an array of four strings. To insert \nvalues to it, we can use an array literal - place the values in a \ncomma-separated list, inside curly braces:To create an array of three integers, you could write:', 'You access an array element by referring to the index number.This statement accesses the value of the first element in \ncars:', 'To change the value of a specific element, refer to the index number:']","['\n  string cars[4];\n', '\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};\n', '\n  int myNum[3] = {10, 20, 30};\n', '\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};\n  cout << cars[0];// Outputs Volvo\n', '\n  cars[0] = ""Opel"";\n &&&&&& \n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};cars[0] = ""Opel"";\n  cout << cars[0];\n  // Now outputs Opel instead of Volvo\n']",[''],[],[]
cpp||Arrays,https://www.w3schools.com/cpp/cpp_arrays.asp,,"['C++ Arrays', 'Access the Elements of an Array', 'Change an Array Element']","['Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each \nvalue.To declare an array, define the variable type, specify the name \nof the array followed by square brackets \nand specify the number of elements it should store:We have now declared a variable that holds an array of four strings. To insert \nvalues to it, we can use an array literal - place the values in a \ncomma-separated list, inside curly braces:To create an array of three integers, you could write:', 'You access an array element by referring to the index number.This statement accesses the value of the first element in \ncars:', 'To change the value of a specific element, refer to the index number:']","['\n  string cars[4];\n', '\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};\n', '\n  int myNum[3] = {10, 20, 30};\n', '\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};\n  cout << cars[0];// Outputs Volvo\n', '\n  cars[0] = ""Opel"";\n &&&&&& \n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};cars[0] = ""Opel"";\n  cout << cars[0];\n  // Now outputs Opel instead of Volvo\n']",[''],[],[]
cpp||Arrays and Loops,https://www.w3schools.com/cpp/cpp_arrays_loop.asp,,['Loop Through an Array'],['You can loop through the array elements with the for \nloop.The following example outputs all elements in the cars \narray:The following example outputs the index of each element together with its value:'],"['\n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};for(int i = 0; i < 4; \n  i++) {\xa0 cout << cars[i] << ""\\n"";}\n &&&&&& \n  string cars[4] = {""Volvo"", ""BMW"", ""Ford"", ""Mazda""};for(int i = 0; i < 4; \n  i++) {\xa0 cout << i << "": "" << cars[i] << ""\\n"";}\n']",[''],[],[]
cpp||Omit Array Size,https://www.w3schools.com/cpp/cpp_arrays_omit.asp,,"['Omit Array Size', 'Omit Elements on Declaration']","[""You don't have to specify the size of the array. But if you don't, it will \nonly be as big as the \nelements that are inserted into it:This is completely fine. However, the problem arise if you want extra space \nfor future elements. \nThen you have to overwrite the existing values:If you specify the size however, the array will reserve the extra space:Now you can add a fourth and fifth element without overwriting the others:"", 'It is also possible to declare an array without specifying the elements on declaration, and add them later:']","['\n  string cars[] = {""Volvo"", ""BMW"", ""Ford""}; // \n  size of array is always 3\n', '\nstring cars[] = {""Volvo"", ""BMW"", ""Ford""};string cars[] = {""Volvo"", ""BMW"", ""Ford"", \n  ""Mazda"", ""Tesla""};\n', '\n  string cars[5] = {""Volvo"", ""BMW"", ""Ford""}; // \n  size of array is 5, even though it\'s only three elements inside it\n', '\n  cars[3] = ""Mazda"";cars[4] = ""Tesla"";\n']",[''],[],[]
cpp||References,https://www.w3schools.com/cpp/cpp_references.asp,,['Creating References'],"['A reference variable is a ""reference"" to an existing variable, and \nit is created with the & operator:Now, we can use either the variable name food or the reference name meal \nto refer to the food variable:']","['\n  string food = ""Pizza"";\xa0 // food variablestring &meal = food;\xa0\xa0\xa0 \n  // reference to food\n &&&&&& \n  string food = ""Pizza"";string &meal = food;\n  cout << food << ""\\n"";\xa0 \n  // Outputs Pizzacout << meal << ""\\n"";\xa0 // \n  Outputs Pizza\n']",[''],[],[]
cpp||References,https://www.w3schools.com/cpp/cpp_references.asp,,['Creating References'],"['A reference variable is a ""reference"" to an existing variable, and \nit is created with the & operator:Now, we can use either the variable name food or the reference name meal \nto refer to the food variable:']","['\n  string food = ""Pizza"";\xa0 // food variablestring &meal = food;\xa0\xa0\xa0 \n  // reference to food\n &&&&&& \n  string food = ""Pizza"";string &meal = food;\n  cout << food << ""\\n"";\xa0 \n  // Outputs Pizzacout << meal << ""\\n"";\xa0 // \n  Outputs Pizza\n']",[''],[],[]
cpp||Memory Address,https://www.w3schools.com/cpp/cpp_references_memory.asp,,['Memory Address'],"['In the example from the previous page, the & operator was used to create a reference variable. \nBut it can also be used to get the memory address of a variable; which is the \nlocation of where the variable is stored on the computer.When a variable is created in C++, a memory address is assigned to the variable. \nAnd when we assign a value to the variable, it is stored in this memory \naddress.To access it, use the & \noperator, and the result will represent where the variable is stored:Note: The memory address is in hexadecimal form (0x..). Note \nthat \nyou may not get the same result in your program.']","['\n  string food = ""Pizza"";\n  cout << &food; // Outputs 0x6dfed4\n']",[''],[],[]
cpp||Pointers,https://www.w3schools.com/cpp/cpp_pointers.asp,,['Creating Pointers'],"[""You learned from the previous chapter, that we can get the memory \naddress of a variable by using the & \noperator:A pointer however, is a variable that stores the memory address as its value. A pointer variable points to a data type (like int or string) of the same \ntype, and is created with the * operator. The address of the variable you're working with is assigned to the pointer:Create a pointer variable with the name ptr, that points to a string variable, by using the \nasterisk sign \n* (string* ptr). \nNote that the type of the pointer has to match the type of the variable you're \nworking with.Use the & operator to store the memory address of the \nvariable called food, and assign it to the pointer.Now, ptr holds the value of food's memory address.""]","['\n  string food = ""Pizza""; \n    // A food variable of type stringcout << \n    food;\xa0 // Outputs the value of food (Pizza)\n  cout << &food; // Outputs the memory address of food (0x6dfed4)\n &&&&&& \n    string food = ""Pizza"";\xa0 // A food variable \n    of type stringstring* ptr = \n    &food;\xa0\xa0\xa0 // A pointer variable, with the name \n    ptr, that stores the \n    address of food// Output the value of food (Pizza)cout << food << ""\\n"";// Output \n    the memory address of food (0x6dfed4)cout << &food << ""\\n"";// \n    Output the memory address of food with the pointer (0x6dfed4)cout << \n    ptr << ""\\n"";\n']",[''],[],[]
cpp||Pointers,https://www.w3schools.com/cpp/cpp_pointers.asp,,['Creating Pointers'],"[""You learned from the previous chapter, that we can get the memory \naddress of a variable by using the & \noperator:A pointer however, is a variable that stores the memory address as its value. A pointer variable points to a data type (like int or string) of the same \ntype, and is created with the * operator. The address of the variable you're working with is assigned to the pointer:Create a pointer variable with the name ptr, that points to a string variable, by using the \nasterisk sign \n* (string* ptr). \nNote that the type of the pointer has to match the type of the variable you're \nworking with.Use the & operator to store the memory address of the \nvariable called food, and assign it to the pointer.Now, ptr holds the value of food's memory address.""]","['\n  string food = ""Pizza""; \n    // A food variable of type stringcout << \n    food;\xa0 // Outputs the value of food (Pizza)\n  cout << &food; // Outputs the memory address of food (0x6dfed4)\n &&&&&& \n    string food = ""Pizza"";\xa0 // A food variable \n    of type stringstring* ptr = \n    &food;\xa0\xa0\xa0 // A pointer variable, with the name \n    ptr, that stores the \n    address of food// Output the value of food (Pizza)cout << food << ""\\n"";// Output \n    the memory address of food (0x6dfed4)cout << &food << ""\\n"";// \n    Output the memory address of food with the pointer (0x6dfed4)cout << \n    ptr << ""\\n"";\n']",[''],[],[]
cpp||Dereference,https://www.w3schools.com/cpp/cpp_pointers_dereference.asp,,['Get Memory Address and Value'],"['In the example from the previous page, we used the pointer variable to get the memory address of a variable \n(used together with the & reference operator). However, you can also \nuse the pointer to get the value of the variable, by using the * operator \n(the dereference operator):']","['\n    string food = ""Pizza"";\xa0 // Variable declarationstring* ptr = \n    &food;\xa0\xa0\xa0 // Pointer declaration// \n    Reference: Output the memory address of food with the pointer (0x6dfed4)cout << \n    ptr << ""\\n"";// \n    Dereference: Output the value of food with the pointer (Pizza)cout << \n    *ptr << ""\\n"";\n']",[''],[],[]
cpp||Modify Pointers,https://www.w3schools.com/cpp/cpp_pointers_modify.asp,,['Modify the Pointer Value'],"[""You can also change the pointer's value. But note that this will also change \nthe value of the original variable:""]","['\n    string food = ""Pizza"";string* ptr = &food;// Output the value \n    of food (Pizza)cout << food << ""\\n"";// Output the memory address \n    of food (0x6dfed4)cout << &food << ""\\n"";// Access the memory \n    address of food and output its value (Pizza)cout << *ptr << ""\\n"";\n// Change the value of the pointer*ptr = ""Hamburger"";// \n    Output the new value of the pointer (Hamburger)cout << *ptr << ""\\n"";// \n    Output the new value of the food variable (Hamburger)cout << food << ""\\n"";\n']",[''],[],[]
cpp||Functions,https://www.w3schools.com/cpp/cpp_functions.asp,A function is a block of code which only runs when it is called.,"['Create a Function', 'Call a Function', 'Function Declaration and Definition']","['You can pass data, known as parameters, into a function.Functions are used to perform certain actions, and they are \nimportant for reusing code: Define the code once, and use it many times.', 'C++ provides some pre-defined \nfunctions, such as main(), which is used to \nexecute code. But you can also \ncreate your own functions to perform certain actions. To create (often referred to as declare) a function, specify the name of the function, followed by parentheses (): ', 'Declared functions are not executed immediately. They are ""saved for later \nuse"", and will be executed later, when they are called.To call a function, write the function\'s name followed by two parentheses () \nand a semicolon ;In the following example, myFunction() is used to print a text (the action), when it is called:A function can be called multiple times:', 'A C++ function consist of two parts:Note: If a user-defined function, such as myFunction() is declared after the main() function, \nan error will occur:However, it is possible to separate the declaration and the definition of the function - for code optimization.You will often see C++ programs that have function declaration above main(), \nand function definition below main(). This will make the code \nbetter organized and easier to read:']","['\n    void myFunction() {\xa0 \n  // code to be executed}\n', '\n  // Create a functionvoid myFunction() {\xa0 \n  cout << ""I just got executed!"";}int main() {\xa0 \n  myFunction(); // call the function\xa0 return 0;}// Outputs \n  ""I just got executed!""\n &&&&&& \n  void myFunction() {\xa0 \n  cout << ""I just got executed!\\n"";}int main() {\xa0 \n  myFunction();\xa0 myFunction();\xa0 \n  myFunction();\xa0 return 0;}// \n  I just got executed!// I just got executed!// I just got executed!\n', '\n    void myFunction() { // declaration\xa0 // \n    the body of the function (definition)}\n &&&&&& \n  int main() {\xa0 \n  myFunction();\xa0 return 0;}void myFunction() {\xa0 \n  cout << ""I just got executed!"";}// Error\n &&&&&& \n  // Function declarationvoid myFunction();// The main methodint main() {\xa0 \n  myFunction();\xa0 // call the function\xa0 return 0;}// Function definitionvoid myFunction() {\xa0 \n  cout << ""I just got executed!"";}\n']","['Create a Function###Function Declaration and Definition###&&&|||myFunction() is the name of the function|||void means that the function does not have a |||return value. You will learn more about return values later in the next chapter|||inside the function (the body), add code that defines what the function should do|||&&&|||Declaration: the return type, the name of the function, and parameters (if any)|||Definition: the body of the function (code to be executed)|||']",[],[]
cpp||Function Parameters,https://www.w3schools.com/cpp/cpp_function_param.asp,,['Parameters and Arguments'],"['Information can be passed to functions as a parameter. Parameters act as \nvariables inside the function.Parameters are specified after the function name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma:\nThe following example has a \nfunction that takes a string called fname as parameter.\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:\n']","['\n    void functionName(parameter1, parameter2, parameter3) {\xa0 \n  // code to be executed}\n &&&&&& \n  void myFunction(string fname) {\xa0 cout << fname << "" Refsnes\\n"";}\nint main() {\xa0 myFunction(""Liam"");\xa0 myFunction(""Jenny"");\xa0 \n  myFunction(""Anja"");\xa0 return 0;}// Liam Refsnes// Jenny Refsnes// \n  Anja Refsnes\n']",[''],[],[]
cpp||Function Parameters,https://www.w3schools.com/cpp/cpp_function_param.asp,,['Parameters and Arguments'],"['Information can be passed to functions as a parameter. Parameters act as \nvariables inside the function.Parameters are specified after the function name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma:\nThe following example has a \nfunction that takes a string called fname as parameter.\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:\n']","['\n    void functionName(parameter1, parameter2, parameter3) {\xa0 \n  // code to be executed}\n &&&&&& \n  void myFunction(string fname) {\xa0 cout << fname << "" Refsnes\\n"";}\nint main() {\xa0 myFunction(""Liam"");\xa0 myFunction(""Jenny"");\xa0 \n  myFunction(""Anja"");\xa0 return 0;}// Liam Refsnes// Jenny Refsnes// \n  Anja Refsnes\n']",[''],[],[]
cpp||Default Parameters,https://www.w3schools.com/cpp/cpp_function_default.asp,,['Default Parameter Value'],"['You can also use a default parameter value, by using the equals sign (=).\nIf we call the function without an argument, it uses the default value (""Norway""):']","['\n  void myFunction(string country = ""Norway"") {\xa0 cout \n  << country << ""\\n"";}\nint main() {\xa0 myFunction(""Sweden"");\xa0 \n  myFunction(""India"");\xa0 myFunction();\xa0 \n  myFunction(""USA"");\xa0 return 0;}// Sweden// \n  India// Norway// USA\n']",[''],[],[]
cpp||Multiple Parameters,https://www.w3schools.com/cpp/cpp_function_multiple.asp,,['Multiple Parameters'],"['Inside the function, you can add as many parameters as you want:']","['\n  void myFunction(string fname, int age) {\xa0 cout << fname << "" Refsnes. \n  "" << age << "" years old. \\n"";}int main() {\xa0 myFunction(""Liam"", 3);\xa0 \n  myFunction(""Jenny"", 14);\xa0 myFunction(""Anja"", 30);\xa0 return 0;\n  }// Liam Refsnes. 3 years old.// Jenny Refsnes. 14 years old.\n  // Anja Refsnes. 30 years old.\n']",[''],[],[]
cpp||The Return Keyword,https://www.w3schools.com/cpp/cpp_function_return.asp,,['Return Values'],"['The void keyword, used in the previous examples, indicates that the \nfunction should not return a value. If you \nwant the function to return a value, you can use a data type (such as int, \nstring, etc.) instead of void, and use the return \nkeyword inside the function:This example returns the sum of a function with two parameters:You can also store the result in a variable:']","['\nint myFunction(int x) {\xa0 return 5 \n    + x;}int main() {\xa0 cout << myFunction(3);\xa0 \n    return 0;}// Outputs \n  8 (5 + 3)\n &&&&&& \n  int myFunction(int x, int y) {\xa0 return x + y;}int main() \n  {\xa0 cout << myFunction(5, 3);\xa0 return 0;}\n  // Outputs 8 (5 + 3)\n &&&&&& \n  int myFunction(int x, int y) {\xa0 return x + y;}int main() {\xa0 \n  int z = myFunction(5, 3);\xa0 cout << z;\xa0 return 0;}\n  // Outputs 8 (5 + 3)\n']",[''],[],[]
cpp||Functions - Pass By Reference,https://www.w3schools.com/cpp/cpp_function_reference.asp,,['Pass By Reference'],"['In the examples from the previous page, we used normal variables when we passed parameters to \na function. You can also pass a reference to \nthe function. This can be useful when you need to change the value of the arguments:']",[''],[''],[],[]
cpp||Function Overloading,https://www.w3schools.com/cpp/cpp_function_overloading.asp,,['Function Overloading'],"['With function overloading, multiple functions can have the same name with different\nparameters:Consider the following example, which have two functions that add numbers of different type:Instead of defining two functions that should do the same thing, it is better to overload one. In the example below, we overload the plusFunc function to work for both int \nand double:']",[''],[''],[],[]
cpp||OOP,https://www.w3schools.com/cpp/cpp_oop.asp,,"['C++ What is OOP?', 'C++ What are Classes and Objects?']","['OOP stands for Object-Oriented Programming.Procedural programming is about writing procedures or functions that perform \noperations on the data, while object-oriented programming is about \ncreating objects that contain both data and functions.Object-oriented programming has several advantages over procedural \nprogramming:Tip: The ""Don\'t Repeat Yourself"" (DRY) principle is about \nreducing the repetition of code. You should extract out the codes that are \ncommon for the application, and place them at a single place and reuse them \ninstead of repeating it.', 'Classes and objects are the two main aspects of object-oriented programming.Look at the following illustration to see the difference between class and \nobjects:Another example:So, a class is a template for objects, and an object is an instance of a class.When the individual objects are created, they inherit all the \nvariables and functions from the class.You will learn much more about classes and objects in the next chapter.']","['', '']","['C++ What is OOP?###&&&|||OOP is faster and easier to execute|||OOP provides a clear structure for the programs|||OOP helps to keep the C++ code DRY ""Don\'t Repeat Yourself"", and makes |||  the |||  code easier to maintain, modify and debug|||OOP makes it possible to create full reusable |||  applications with less code and shorter development time|||']",[],[]
cpp||Classes and Objects,https://www.w3schools.com/cpp/cpp_classes.asp,,"['C++ Classes/Objects', 'Create a Class', 'Create an Object', 'Multiple Objects']","['C++ is an object-oriented programming language.Everything in C++ is associated with classes and objects, along with its attributes and \nmethods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and \nmethods, such as drive and brake.Attributes and methods are basically variables and \nfunctions that belongs to the class. These are often referred to as \n""class members"".A class is a user-defined data type that we can use in our program, and it \nworks as an object constructor, or a ""blueprint"" for creating objects.', 'To create a class, use the class keyword:', 'In C++, an object is created from a class. We have already created the class named MyClass, \nso now we can use this to create objects.To create an object of MyClass, specify the \nclass name, followed by the object name.To access the class attributes (myNum and myString), use the dot syntax (.) \non the object:', 'You can create multiple objects of one class:']","['\n  class MyClass {\xa0 \xa0\xa0\xa0\xa0 \n  // The class\xa0 public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier\xa0\xa0\xa0 int myNum;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // \n  Attribute (int variable)\xa0\xa0\xa0 string myString;\xa0 // \n  Attribute (string variable)};\n', '\n  class MyClass {\xa0 \xa0\xa0\xa0\xa0 // The class\xa0 public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier\xa0\xa0\xa0 int myNum;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // \n  Attribute (int variable)\xa0\xa0\xa0 string myString;\xa0 // \n  Attribute (string variable)};int main() {\xa0 MyClass myObj;\xa0 \n  // Create an object of MyClass\xa0 // Access attributes and set values\xa0 myObj.myNum \n  = 15;\xa0\xa0 \n  myObj.myString = ""Some text"";\xa0 // Print attribute values\xa0 \n  cout << myObj.myNum\xa0<< ""\\n""; \xa0 cout << myObj.myString; \xa0 return 0;}\n', '\n  // Create a Car class with some attributesclass Car {\xa0 public:\xa0\xa0\xa0 string brand;\xa0\xa0\xa0\xa0\xa0\xa0 string model;\xa0\xa0\xa0 int \n  year;};int main() {\xa0 // Create an object of Car\xa0 Car carObj1;\xa0 carObj1.brand = ""BMW"";\xa0 \n  carObj1.model = ""X5"";\xa0 carObj1.year = 1999;\xa0 \n  // Create another object of Car\xa0 Car \n  carObj2;\xa0 carObj2.brand = ""Ford"";\xa0 carObj2.model = \n  ""Mustang"";\xa0 carObj2.year = 1969;\xa0 // Print \n  attribute values\xa0 cout << carObj1.brand \n  << "" "" << carObj1.model << "" "" << carObj1.year << ""\\n"";\xa0 cout << \n  carObj2.brand << "" "" << carObj2.model << "" "" << carObj2.year << ""\\n"";\xa0 return 0;}\n', '']",[''],[],[]
cpp||Class Methods,https://www.w3schools.com/cpp/cpp_class_methods.asp,,"['Class Methods', 'Parameters']","['Methods are functions that belongs to the class.There are two ways to define functions that belongs to a class:In the following example, we define a function inside the class, and we name \nit ""myMethod"".Note: You access methods just like you access attributes; by creating an object of \nthe class and using the dot syntax (.):To define a function outside the class definition, you have to declare it \ninside the class and then define it outside of the class. This is done by specifiying the \nname of the class, followed the scope resolution :: operator, \nfollowed by the name of the function:', 'You can also add parameters:']","['\n  class MyClass {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // The class\xa0 \n  public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier\xa0\xa0\xa0 void myMethod() {\xa0 // Method/function \n  defined inside the \n  class\xa0\xa0\xa0\xa0\xa0 cout << ""Hello World!"";\xa0\xa0\xa0 \n  }};int main() {\xa0 MyClass \n  myObj;\xa0\xa0\xa0\xa0 // Create an object of MyClass\xa0 \n  myObj.myMethod();\xa0 // Call the method\xa0 return 0;}\n', '\n  class MyClass {\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // The class\xa0 \n  public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier\xa0\xa0\xa0 void myMethod();\xa0\xa0 // Method/function \n  declaration};\n// Method/function definition outside the classvoid \n  MyClass::myMethod() {\xa0 cout << ""Hello World!"";}int main() {\xa0 MyClass \n  myObj;\xa0\xa0\xa0\xa0 // Create an object of MyClass\xa0 \n  myObj.myMethod();\xa0 // Call the method\xa0 return 0;}\n']",['Class Methods###&&&|||Inside class definition|||Outside class definition|||'],[],[]
cpp||Constructors,https://www.w3schools.com/cpp/cpp_constructors.asp,,"['Constructors', 'Constructor Parameters']","['A constructor in C++ is a special method that is \nautomatically called when an object of a class is created.To create a constructor, use the same name as the class, followed by \nparentheses ():', 'Constructors can also take parameters (just like regular functions), which can be \nuseful for setting initial values for attributes.The following class have brand, model and year attributes, and a constructor with \ndifferent parameters. Inside the constructor we set the attributes equal to the \nconstructor parameters (brand=x, etc). When we call the constructor \n(by creating an object of the class), we pass parameters to the constructor, which will set the value of \nthe corresponding attributes to the same:Just like functions, constructors can also be defined outside the class. \nFirst, declare the constructor inside the class, and then define it outside of the \nclass by specifying the name of the class, followed by the scope resolution :: \noperator, followed by the name of the constructor (which is the same as the \nclass):']","['\n  class MyClass {\xa0\xa0\xa0\xa0 // The class\xa0 \n  public:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Access specifier\xa0\xa0\xa0 MyClass() {\xa0\xa0\xa0\xa0 \n  // Constructor\xa0\xa0\xa0\xa0\xa0 cout << ""Hello World!"";\xa0\xa0\xa0 \n  }};int main() {\xa0 MyClass myObj;\xa0\xa0\xa0 // Create an object of MyClass (this will call \n  the constructor)\xa0 return 0;}\n', '']",[''],[],[]
cpp||Access Specifiers,https://www.w3schools.com/cpp/cpp_access_specifiers.asp,,['Access Specifiers'],"[""By now, you are quite familiar with the public keyword that appears in all of our class examples:The public keyword is an access specifier. \nAccess specifiers define how the members (attributes and methods) of a class can \nbe accessed. In the example above, the members are public - which means that they \ncan be accessed and modified from outside the code. However, what if we want \nmembers to be private and hidden from the outside world? In C++, there are three access specifiers:In the following example, we demonstrate the differences between public and private members:Note: By default, all members of a class are private if you don't specify an access specifier:""]",[''],"['Access Specifiers###&&&|||public - members are accessible from outside the class|||private - members cannot be accessed (or |||viewed) from outside the class|||protected - members cannot be accessed from |||outside the class, however, they can be accessed in inherited classes. You will learn more about Inheritance later.|||']",[],[]
cpp||Encapsulation,https://www.w3schools.com/cpp/cpp_encapsulation.asp,,['Encapsulation'],"['The meaning of Encapsulation, is to make sure that \n""sensitive"" data is hidden from users. To achieve this, you must declare class variables/attributes as private (cannot \nbe accessed from outside the class). If you want others to read or modify the \nvalue of a private member, you can provide public get and \nset methods.\nAccess Private Members\nTo access a private attribute, use public ""get"" and ""set"" methods:\n\nExample\n\n    #include <iostream>using namespace std;class Employee {\xa0 \n    private:\xa0\xa0\xa0 // Private attribute\xa0\xa0\xa0 int salary;\xa0 public:\xa0\xa0\xa0 \n    // Setter\xa0\xa0\xa0 \n    void setSalary(int s) {\xa0\xa0\xa0\xa0\xa0 salary = s;\xa0\xa0\xa0 }\xa0\xa0\xa0 \n    // Getter\xa0\xa0\xa0 int getSalary() {\xa0\xa0\xa0\xa0\xa0 \n    return salary;\xa0\xa0\xa0 }};int \n    main() {\xa0 Employee myObj;\xa0 myObj.setSalary(50000);\xa0 \n    cout << myObj.getSalary();\xa0 return 0;}\nTry it Yourself »\n\nExample explained\nThe salary attribute is private, \nwhich have restricted access.\nThe public setSalary() method takes a parameter (s) and assigns it to the\nsalary attribute (salary = s).\nThe public getSalary() method returns the value of \nthe private salary attribute.\nInside main(), we create an object of the Employee class. Now we can use the \nsetSalary() method to set the value of the \nprivate attribute to 50000. Then we call the \ngetSalary() method on the object to return the value.\n\nWhy Encapsulation?\n\nIt is considered good practice to declare your class attributes as private (as \noften as you can). Encapsulation ensures better control of your data, \nbecause you (or others) can change one part of the code without affecting other parts\nIncreased security of data\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'To access a private attribute, use public ""get"" and ""set"" methods:The salary attribute is private, \nwhich have restricted access.The public setSalary() method takes a parameter (s) and assigns it to the\nsalary attribute (salary = s).The public getSalary() method returns the value of \nthe private salary attribute.Inside main(), we create an object of the Employee class. Now we can use the \nsetSalary() method to set the value of the \nprivate attribute to 50000. Then we call the \ngetSalary() method on the object to return the value.']",['\n    #include <iostream>using namespace std;class Employee {\xa0 \n    private:\xa0\xa0\xa0 // Private attribute\xa0\xa0\xa0 int salary;\xa0 public:\xa0\xa0\xa0 \n    // Setter\xa0\xa0\xa0 \n    void setSalary(int s) {\xa0\xa0\xa0\xa0\xa0 salary = s;\xa0\xa0\xa0 }\xa0\xa0\xa0 \n    // Getter\xa0\xa0\xa0 int getSalary() {\xa0\xa0\xa0\xa0\xa0 \n    return salary;\xa0\xa0\xa0 }};int \n    main() {\xa0 Employee myObj;\xa0 myObj.setSalary(50000);\xa0 \n    cout << myObj.getSalary();\xa0 return 0;}'],"['Why Encapsulation?###&&&|||It is considered good practice to declare your class attributes as private (as |||often as you can). Encapsulation ensures better control of your data, |||because you (or others) can change one part of the code without affecting other parts|||Increased security of data|||']",[],[]
cpp||Inheritance,https://www.w3schools.com/cpp/cpp_inheritance.asp,,['Inheritance'],"['In C++, it is possible to inherit attributes and methods from one class to another. We group the ""inheritance concept"" into two categories:To inherit from a class, use the : symbol.In the example below, the Car class \n(child) inherits the attributes and methods from the Vehicle class \n(parent):']","['\n    // Base classclass Vehicle {\xa0 public: \xa0\xa0\xa0 \n    string brand = ""Ford"";\xa0\xa0\xa0 void honk() {\xa0\xa0\xa0\xa0\xa0 \n    cout << ""Tuut, tuut! \\n"" ;\xa0\xa0\xa0 }};// Derived \n    classclass Car: public Vehicle {\xa0 public: \xa0\xa0\xa0 \n    string model = ""Mustang"";};int main() {\xa0 Car myCar;\xa0 \n    myCar.honk();\xa0 cout << myCar.brand + "" "" + myCar.model;\xa0 \n    return 0;}']",['Inheritance###&&&|||derived class (child) - the class that inherits from another class|||base class (parent) - the class being inherited from|||'],[],[]
cpp||Inheritance,https://www.w3schools.com/cpp/cpp_inheritance.asp,,['Inheritance'],"['In C++, it is possible to inherit attributes and methods from one class to another. We group the ""inheritance concept"" into two categories:To inherit from a class, use the : symbol.In the example below, the Car class \n(child) inherits the attributes and methods from the Vehicle class \n(parent):']","['\n    // Base classclass Vehicle {\xa0 public: \xa0\xa0\xa0 \n    string brand = ""Ford"";\xa0\xa0\xa0 void honk() {\xa0\xa0\xa0\xa0\xa0 \n    cout << ""Tuut, tuut! \\n"" ;\xa0\xa0\xa0 }};// Derived \n    classclass Car: public Vehicle {\xa0 public: \xa0\xa0\xa0 \n    string model = ""Mustang"";};int main() {\xa0 Car myCar;\xa0 \n    myCar.honk();\xa0 cout << myCar.brand + "" "" + myCar.model;\xa0 \n    return 0;}']",['Inheritance###&&&|||derived class (child) - the class that inherits from another class|||base class (parent) - the class being inherited from|||'],[],[]
cpp||Multilevel Inheritance,https://www.w3schools.com/cpp/cpp_inheritance_multilevel.asp,,['Multilevel Inheritance'],"['A class can also be derived from one class, which is already derived from \nanother class.In the following example, MyGrandChild is derived from class MyChild (which is derived \nfrom MyClass).']","['\n    // Base class (parent)class MyClass {\xa0 public: \xa0\xa0\xa0 void \n    myFunction() {\xa0\xa0\xa0\xa0\xa0 \n    cout << ""Some content in parent class."" ;\xa0\xa0\xa0 }};// \n    Derived \n    class (child)class MyChild: public MyClass {};// Derived class \n    (grandchild) class MyGrandChild: public MyChild {};int main() {\xa0 \n    MyGrandChild myObj;\xa0 \n    myObj.myFunction();\xa0 \n    return 0;}']",[''],[],[]
cpp||Multiple Inheritance,https://www.w3schools.com/cpp/cpp_inheritance_multiple.asp,,['Multiple Inheritance'],"['A class can also be derived from more than one base class, using a comma-separated list:']","['\n    // Base classclass MyClass {\xa0 public: \xa0\xa0\xa0 void \n    myFunction() {\xa0\xa0\xa0\xa0\xa0 \n    cout << ""Some content in parent class."" ;\xa0\xa0\xa0 }};// \n    Another base classclass MyOtherClass {\xa0 public: \xa0\xa0\xa0 void \n    myOtherFunction() {\xa0\xa0\xa0\xa0\xa0 \n    cout << ""Some content in another class."" ;\xa0\xa0\xa0 }};// \n    Derived \n    class class MyChildClass: public MyClass, public MyOtherClass {};int main() {\xa0 \n    MyChildClass myObj;\xa0 \n    myObj.myFunction();\xa0 myObj.myOtherFunction();\xa0 \n    return 0;}']",[''],[],[]
cpp||Inheritance Access,https://www.w3schools.com/cpp/cpp_inheritance_access.asp,,['Access Specifiers'],"['You learned from the Access Specifiers chapter that there are three \nspecifiers available in C++. Until now, we have only used public (members of a \nclass are accessible from outside the class) and private (members can only be \naccessed within the class). The third specifier, protected, is similar to \nprivate, but it can also be accessed in the \ninherited class:']",[''],[''],[],[]
cpp||Polymorphism,https://www.w3schools.com/cpp/cpp_polymorphism.asp,,['Polymorphism'],"['Polymorphism means ""many forms"", and it occurs when we have many classes that are related to each other by inheritance.Like we specified in the previous chapter; \nInheritance lets us \ninherit attributes and methods from another class. Polymorphism \nuses those methods to perform different tasks. This allows us to perform a single \naction in different ways.For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):Now we can create Pig and \nDog objects and override the animalSound() method:']",[''],[''],[],[]
cpp||Files,https://www.w3schools.com/cpp/cpp_files.asp,,"['C++ Files', 'Create and Write To a File', 'Read a File']","['The fstream library allows us to work with files.To use the fstream library, include both the standard <iostream> AND the <fstream> header file:There are three classes included in the fstream library, \nwhich are used to create, write or read files:', 'To create a file, use either the ofstream or fstream class, \nand specify the name of the file.To write to the file, use the insertion operator (<<).', 'To read from a file, use either the ifstream or fstream \nclass, and the name of the file.Note that we also use a while loop together with the getline() function \n(which belongs to the ifstream class) to read the file line by line, and to print the content of the file:']","['\n    #include <iostream>#include <fstream>', '\n    #include <iostream>#include <fstream>using namespace std;\n    int main() {\xa0 // Create and open a text file\xa0 ofstream MyFile(""filename.txt"");\xa0 // \n    Write to the file\xa0 MyFile << ""Files can be tricky, but it is fun \n    enough!"";\xa0 // \n    Close the file\xa0 MyFile.close();}', '']",[''],"['Class|||Description|||&&&ofstream|||Creates and writes to files|||&&&ifstream|||Reads from files|||&&&fstream|||A combination of ofstream and ifstream: creates, reads, and writes to files|||&&&']",[]
cpp||Exceptions,https://www.w3schools.com/cpp/cpp_exceptions.asp,,"['C++ Exceptions', 'C++ try and catch', 'Handle Any Type of Exceptions (...)']","['When executing C++ code, different errors can occur: coding errors made by the programmer, errors due to wrong input, \nor other unforeseeable things.When an error occurs, C++ will normally stop and generate an error message. The technical term for this is: C++ will throw an exception (throw an error).', 'Exception handling in C++ consist of three keywords: try, throw and catch:The try statement allows you to define a block of code to be \ntested for errors while it is being executed.The throw keyword throws an exception when a \nproblem is detected, which lets us create a custom error.The catch statement allows you to define a block of code to \nbe executed, if an error occurs in the try block.The try and catch keywords \ncome in pairs:Consider the following example:We use the try block to test some code: If the age variable is less than 18, we will throw an exception, and handle it in our catch block.In the catch block, we catch the error and \ndo something about it. The catch \nstatement takes a parameter: in our example we use an int variable (myNum) (because we are throwing an exception of int type in the try block (age)), \nto output the value of age.If no error occurs (e.g. if age is 20 instead of 15, \nmeaning it will be be greater \nthan 18), the catch block is skipped:You can also use the throw keyword to output a reference number, like a \ncustom error number/code for organizing purposes:', 'If you do not know the throw type used in the try block, you can use the ""three dots"" syntax (...) inside the catch block, which will handle any type of exception:']","['\n    try {\xa0\xa0// Block of code to try\xa0 throw exception; \n    // Throw an exception when a problem arise}catch () {\n    \xa0\xa0// Block of code to handle errors} &&&&&& \n    try {\xa0 int age = 15;\xa0 if (age >= 18) {\xa0\xa0\xa0 \n    cout << ""Access granted - you are old enough."";\xa0 } else {\xa0\xa0\xa0 \n    throw (age);\xa0 }}catch (int \n    myNum) {\xa0 cout << ""Access denied - You must be at least 18 years \n    old.\\n"";\xa0 cout << ""Age is: "" << myNum; } &&&&&& \n    int age = 20; &&&&&& \n    try {\xa0 int age = 15;\xa0 if (age >= 18) {\xa0\xa0\xa0 \n    cout << ""Access granted - you are old enough."";\xa0 } else {\xa0\xa0\xa0 \n    throw 505;\xa0 }}catch (int myNum) {\xa0 \n    cout << ""Access denied - You must be at least 18 years old.\\n"";\xa0 \n    cout << ""Error number: "" << myNum; }', '', '']",[''],[],[]
cpp||How To Add Two Numbers,https://www.w3schools.com/cpp/cpp_howto_add_two_numbers.asp,,"['Add Two Numbers', 'Add Two Numbers with User Input']","['Learn how to add two numbers in C++:', 'In this example, the user must input two numbers. Then we print the \nsum by calculating (adding) the two numbers:']","['\n  int x = 5;int y = 6;int sum = x + y;cout << sum;', '\n  int x, y;int sum;cout << ""Type a number: "";cin >> x;cout << ""Type another number: "";cin >> \n  y;sum = x + y;cout << ""Sum is: "" << sum;']",[''],[],[]
cpp||Examples,https://www.w3schools.com/cpp/cpp_examples.asp,,"['C++ Syntax', 'C++ Output/Print', 'C++ Comments', 'C++ Variables', 'C++ User Input', 'C++ Data Types', 'C++ Operators', 'C++ Strings', 'C++ Math', 'C++ Booleans', 'C++ If...Else (Conditions)', 'C++ Switch', 'C++ Loops', 'C++ Arrays', 'C++ References', 'C++ Pointers', 'C++ Files', 'C++ Functions', 'C++ Classes/Objects']","['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']","['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']",[''],[],[]
cpp||Online Compiler,https://www.w3schools.com/cpp/cpp_compiler.asp,,"['C++ Compiler (Editor)', 'C++ Compiler Explained']","['With our online C++ compiler, you can edit C++ code, and view the result in your browser.Click on the ""Try it Yourself"" button to see how it works.', 'The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.The icons are explained in the table below:']","['', '']",[''],['Icon|||Description|||&&&|||Go to www.w3schools.com|||&&&|||Menu button for more options|||&&&|||Change orientation (horizontally or vertically)|||&&&|||Change color theme (dark or light)|||&&&'],[]
cpp||Exercises,https://www.w3schools.com/cpp/cpp_exercises.asp,You can test your C++ skills with W3Schools' Exercises.,[],"[""We have gathered a variety of C++ exercises (with answers) for each C++ Chapter.Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.You will get 1 point for\neach correct answer. Your score and total score will always be displayed.""]",[],[''],[],[]
cpp||Quiz,https://www.w3schools.com/cpp/cpp_quiz.asp,You can test your C++ skills with W3Schools' Quiz.,"['The Test', 'Count Your Score']","[""The test contains 25 questions and there is no time limit.The test is not official, it's just a nice way to see how much you know, or don't know, about \nC++.You will get 1 point for each correct answer. At the end of the Quiz,\nyour total score will be displayed. Maximum score is 25 points."", '']","['', '']",[''],[],[]
