Heading,Link,Intro,Subheading,Definitions,Example,List_item,table_item,Image_url
js||Tutorial,https://www.w3schools.com/js/default.asp,,"['Use the Menu', 'Learn by Examples', 'Why Study JavaScript?', 'Learning Speed', 'Commonly Asked Questions', 'JavaScript References', 'JavaScript Quiz Test']","['We recommend reading this tutorial, in the sequence listed in the menu.If you have a large screen, the menu will always be present on the left.If you have a small screen, open the menu by clicking the top menu sign ☰.', 'Examples are better than 1000 words. Examples are often easier to understand \nthan text explanations.This tutorial supplements all explanations with clarifying ""Try it Yourself"" examples.', 'JavaScript is one of the 3 languages all web developers \nmust \nlearn:\xa0\xa0 1. HTML to define the content of web pages\xa0\xa0 2. CSS to specify the layout of web pages\xa0\xa0 3. JavaScript to program the behavior of web pages ', 'In this tutorial, the learning speed is your choice.Everything is up to you.If you are struggling, take a break, or re-read the material.Always make sure you understand all the ""Try-it-Yourself"" \nexamples.The only way to become a clever programmer is to:\nPractice. Practice. Practice. Code. Code. Code !', 'W3Schools maintains a complete JavaScript reference, including all HTML and browser objects.The reference contains examples for all properties, methods and events, and \nis continuously updated according to the latest web standards.', 'Test your JavaScript skills at W3Schools!Start JavaScript Quiz!', '']","['\nMy First JavaScript\n\nClick me to display Date and Time\n\n', '', '', '', '', '', '']",[''],[],[]
js||Introduction,https://www.w3schools.com/js/js_intro.asp,,"['JavaScript Can Change HTML Attribute Values', 'JavaScript Can Change HTML Styles (CSS)', 'JavaScript Can Hide HTML Elements', 'JavaScript Can Show HTML Elements']","['In this example JavaScript changes the value of the src (source) attribute of an <img> tag:', 'Changing the style of an HTML element, is a variant of changing an HTML \nattribute:', 'Hiding HTML elements can be done by changing the display style:', 'Showing hidden HTML elements can also be done by changing the display style:']","['\n document.getElementById(""demo"").innerHTML = ""Hello JavaScript""; &&&&&& \n document.getElementById(\'demo\').innerHTML = \'Hello JavaScript\';', '\nTurn on the light\n\nTurn off the light\n', '\n document.getElementById(""demo"").style.fontSize = ""35px"";', '\n document.getElementById(""demo"").style.display = ""none"";']",[''],[],['pic_bulboff.gif']
js||Where To,https://www.w3schools.com/js/js_whereto.asp,,"['The <script> Tag', 'JavaScript Functions and Events', 'JavaScript in <head> or <body>', 'JavaScript in <head>', 'JavaScript in <body>', 'External JavaScript', 'External JavaScript Advantages', 'External References']","['In HTML, JavaScript code is inserted between <script> and </script> tags.', 'A JavaScript function is a block of JavaScript code, that can be executed when ""called"" for.For example, a function can be called when an event occurs, like when the user clicks a button.', 'You can place any number of scripts in an HTML document.Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.', 'In this example, a JavaScript function is placed in the <head> section \nof an HTML page.The function is invoked (called) when a button is clicked:', 'In this example, a JavaScript function is placed in the <body> section of an HTML page.The function is invoked (called) when a button is clicked:', 'Scripts can also be placed in external files:External scripts are practical when the same code is used in many different web pages. JavaScript files have the file extension .js.To use an external script, put the name of the script file in the src (source) attribute of \na <script> tag:You can place an external script reference in <head> or <body> as you like.The script will behave as if it was located exactly where the <script> tag is located.', 'Placing scripts in external files has some advantages:To add several script files to one page\xa0 - use several script tags:', 'An external script can be referenced in 3 different ways:This example uses a full URL to link to myScript.js: This example uses a file path to link to myScript.js:This example uses no path to link to myScript.js:']","['\n<script>\ndocument.getElementById(""demo"").innerHTML = ""My First JavaScript"";\n</script>\n', '\n<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction myFunction() {\n\xa0\xa0document.getElementById(""demo"").innerHTML = ""Paragraph changed."";\n}\n</script>\n</head><body>\n<h2>Demo JavaScript in Head</h2>\n\n<p id=""demo"">A Paragraph</p><button type=""button"" onclick=""myFunction()"">Try \nit</button>\n</body>\n</html>\n', '\n<!DOCTYPE html>\n<html>\n<body>\n<h2>Demo JavaScript in Body</h2>\n\n  <p id=""demo"">A Paragraph</p>\n\n  <button type=""button"" onclick=""myFunction()"">Try \nit</button>\n<script>\nfunction myFunction() {\n  \xa0 document.getElementById(""demo"").innerHTML = ""Paragraph changed."";\n}\n</script>\n</body>\n</html>\n', '\nfunction myFunction() {\n\xa0 document.getElementById(""demo"").innerHTML = ""Paragraph changed."";\n}\n &&&&&& \n<script src=""myScript.js""></script>', '\n<script src=""myScript1.js""></script>\n<script src=""myScript2.js""></script>\n', '', '', '']",['External JavaScript Advantages###External References###&&&|||It separates HTML and code|||It makes HTML and JavaScript easier to read and maintain|||Cached JavaScript files can speed up page loads|||&&&|||With a full URL (a full web address)|||With a file path (like /js/)|||Without any path|||'],[],[]
js||Output,https://www.w3schools.com/js/js_output.asp,,"['JavaScript Display Possibilities', 'Using innerHTML', 'Using document.write()', 'Using window.alert()', 'Using console.log()', 'JavaScript Print']","['JavaScript can ""display"" data in different ways:', 'To access an HTML element, JavaScript can use the document.getElementById(id) method. The id attribute defines the HTML element. The innerHTML  property defines the HTML content:', 'For testing purposes, it is convenient to use document.write():', 'You can use an alert box to display data:You can skip the window keyword.In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object.\nThis also means that specifying the window keyword is optional:', 'For debugging purposes, you can call the console.log() method\nin the browser to display data.', 'JavaScript does not have any print object or print methods.You cannot access output devices from JavaScript.The only exception is that you can call the window.print() method in\nthe browser to print the content of the current window.']","['\n <!DOCTYPE html><html>\n<body>\n\n<h1>My First Web Page</h1>\n <p>My First Paragraph</p>\n<p id=""demo""></p>\n\n<script>\n document.getElementById(""demo"").innerHTML = 5 + 6;\n    </script>\n\n</body>\n</html>\n', '\n <!DOCTYPE html><html>\n<body><h1>My First Web Page</h1>\n <p>My first paragraph.</p>\n<script>document.write(5 + 6);</script>\n\n</body>\n</html>\n &&&&&& \n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Web Page</h1>\n <p>My first paragraph.</p>\n<button type=""button"" onclick=""document.write(5 + 6)"">Try it</button>\n</body>\n</html>\n', '\n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Web Page</h1><p>My first paragraph.</p>\n\n<script>window.alert(5 + 6);\n</script>\n\n</body>\n</html>\n &&&&&& \n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Web Page</h1><p>My first paragraph.</p>\n\n<script>alert(5 + 6);\n</script>\n\n</body>\n</html>\n', '\n<!DOCTYPE html>\n<html>\n<body>\n\n<script>\nconsole.log(5 + 6);\n</script>\n\n</body>\n</html>\n', '', '']","['JavaScript Display Possibilities###&&&|||Writing into an HTML element, using innerHTML.|||Writing into the HTML output using document.write().|||Writing into an alert box, using window.alert().|||Writing into the browser console, using console.log().|||']",[],[]
js||Statements,https://www.w3schools.com/js/js_statements.asp,,"['JavaScript Programs', 'JavaScript Statements', 'Semicolons ;', 'JavaScript White Space', 'JavaScript Line Length and Line Breaks', 'JavaScript Code Blocks', 'JavaScript Keywords']","['A computer program is a list of ""instructions"" to be \n""executed"" by a computer.In a programming language, these programming instructions are called statements.A JavaScript program is a list of programming statements.', 'JavaScript statements are composed of:Values, Operators, Expressions,\xa0Keywords, \nand Comments.This statement tells the browser to write ""Hello Dolly."" \ninside an HTML element with id=""demo"":Most JavaScript \nprograms contain many JavaScript statements.The statements are executed, one by one, in the \nsame order as they are written.', 'Semicolons separate JavaScript statements.Add a semicolon at the end of each executable statement: \nWhen separated by semicolons, multiple statements on one line are allowed:', 'JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.The following lines are equivalent:A good practice is to put spaces around operators ( = + - * / ):', 'For best readability, programmers often like to avoid code lines longer than 80 \ncharacters.If a JavaScript statement does not fit on one line, the best place to break \nit is after an operator:', 'JavaScript statements can be grouped together in code blocks, inside curly \nbrackets {...}.The purpose of code blocks is to define statements to be executed together.One place you will find statements grouped together in blocks, is in \nJavaScript functions:', 'JavaScript statements often start with a keyword \nto identify the JavaScript action to be performed.Our Reserved Words Reference lists all JavaScript keywords.Here is a list of some of the keywords you will learn about in \nthis tutorial: ']","['\nlet x, y, z;\xa0\xa0\xa0 // Statement 1\nx = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Statement 2\ny = 6;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Statement 3\nz = x + y;\xa0\xa0\xa0\xa0\xa0 //  Statement 4\n', '\ndocument.getElementById(""demo"").innerHTML = ""Hello Dolly."";', '\nlet a, b, c;\xa0 // Declare 3 variables\na = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Assign the value 5 to a\nb = 6;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Assign the \n  value 6 to b\nc = a + b;\xa0\xa0\xa0 // Assign the sum of a and b to c\n', '\na = 5; b = 6; c = a + b;\n', '\nlet person = ""Hege"";\nlet person=""Hege"";\n', '\nlet x = y + z;', '\ndocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";', '\n function myFunction() {\n\xa0\xa0document.getElementById(""demo1"").innerHTML = ""Hello Dolly!"";\n\xa0\xa0document.getElementById(""demo2"").innerHTML = ""How are you?"";\n}\n']",[''],['Keyword|||Description|||&&&var|||Declares a variable|||&&&let|||Declares a block variable|||&&&const|||Declares a block constant|||&&&if|||Marks a block of statements to be executed on a condition|||&&&switch|||Marks a block of statements to be executed in different cases|||&&&for|||Marks a block of statements to be executed in a loop|||&&&function|||Declares a function|||&&&return|||Exits a function|||&&&try|||Implements error handling to a block of statements|||&&&'],[]
js||Syntax,https://www.w3schools.com/js/js_syntax.asp,"JavaScript syntax is the set of rules, how 
JavaScript programs are constructed:","['JavaScript Literals', 'JavaScript Variables', 'JavaScript Operators']","['The two most important syntax rules for fixed values are:1. Numbers are written with or \nwithout decimals:2. Strings are text, written within double or single quotes:', 'In a programming language, variables \nare used to store data values.JavaScript uses the keywords var,\nlet and const to declare variables.An equal sign is used to assign values to variables.In this example, x is defined as a variable. Then, x is \nassigned (given) the value \n6:', 'JavaScript uses arithmetic operators ( + - * /']","['\n 10.50\n1001 ', '\n""John Doe""\n\'John Doe\'\n', '\nlet x;\nx = 6; ', '\n(5 + 6) * 10\n', '\nlet x, y;x = 5;\ny = 6;', '\n5 * 10 \n', '\n  x * 10 \n', '\n  ""John"" + "" "" + ""Doe""\n', '\nlet x, y;x = 5 + 6;y = x * 10;\n', '\n  var x, y;x = 5 + 6;y = x * 10;\n', '\nlet x = 5;\xa0\xa0 // I will be executed// x = 6;\xa0\xa0 I will \nNOT be executed', '\nlet lastname, lastName;lastName = ""Doe"";lastname = ""Peterson"";\n']",['JavaScript Values###JavaScript Identifiers / Names###&&&|||Fixed values|||Variable values|||&&&|||A letter (A-Z or a-z)|||A dollar sign ($)|||Or an underscore (_)|||'],[],[]
js||Comments,https://www.w3schools.com/js/js_comments.asp,"JavaScript comments can be used to explain JavaScript code, and 
to make it more readable.","['Single Line Comments', 'Multi-line Comments', 'Using Comments to Prevent Execution']","['JavaScript comments can also be used to prevent execution, when \ntesting alternative code.', 'Single line comments start with //.Any text between // and the end of the line will be ignored by JavaScript \n(will not be executed).This example uses a single-line comment before each code line:This example uses a single line comment at the end of each line \nto explain the code:', 'Multi-line comments start with /* and end with  */.Any text between /* and */ will be ignored by JavaScript.This example uses a multi-line comment (a comment block) to explain the code:', 'Using comments to prevent execution of code is suitable for \ncode testing.Adding // in front of a code line changes the code lines from an executable line to \na comment.This example uses // to prevent execution of one of the code lines:This example uses a comment block to prevent execution of \nmultiple lines:']","['\n// Change heading:\ndocument.getElementById(""myH"").innerHTML = ""My First Page"";\n// Change paragraph:\ndocument.getElementById(""myP"").innerHTML = ""My first paragraph."";\n &&&&&& \nlet x = 5;\xa0\xa0\xa0\xa0\xa0 // Declare x, give it the value of 5\nlet y = x + 2;\xa0 // Declare y, give it the value of x + 2\n', '\n/*\nThe code below will change\nthe heading with id = ""myH""\nand the paragraph with id = ""myP""\nin my web page:\n*/\ndocument.getElementById(""myH"").innerHTML = ""My First Page"";\ndocument.getElementById(""myP"").innerHTML = ""My first paragraph."";\n ', '']",[''],[],[]
js||Variables,https://www.w3schools.com/js/js_variables.asp,,"['When to Use JavaScript const?', 'Just Like Algebra', 'JavaScript Identifiers', 'The Assignment Operator', 'JavaScript Data Types', 'Declaring a JavaScript Variable', 'One Statement, Many Variables', 'Value = undefined', 'Re-Declaring JavaScript Variables', 'JavaScript Arithmetic', 'JavaScript Dollar Sign $', 'JavaScript Underscore (_)']","['If you want a general rule: always declare variables with const.If you think the value of the variable can change, use let.In this example, price1, price2, and total, are variables:The two variables price1 and price2\nare declared with the const keyword.These are constant values and cannot be changed.The variable total is declared with the let keyword.This is a value that can be changed.', 'Just like in algebra, variables hold values:Just like in algebra, variables are used in expressions:From the example above, you can guess that the total is calculated to be 11.', 'All JavaScript variables must be\nidentified with unique names.These unique names are called identifiers.Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).The general rules for constructing names for variables (unique identifiers) are:', 'In JavaScript, the equal sign (=) is an ""assignment"" operator, not an \n""equal to"" operator.This is different from algebra. The following does not make sense in \nalgebra:In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to \nx.(It calculates the value of x + 5 and puts the result into x. The value of x \nis incremented by 5.)', 'JavaScript variables can hold numbers like 100 and text values like ""John \nDoe"".In programming, text values are called text strings.JavaScript can handle many types of data, but for now, just think of numbers and strings. Strings are written inside double or single quotes. Numbers are written \nwithout quotes.If you put a number in quotes, it will be treated as a text string.', 'Creating a variable in JavaScript is called ""declaring"" a variable. You declare a JavaScript variable with the var or the let keyword:After the declaration, the variable has no value (technically it is undefined).To assign a value to the variable, use the equal sign:You can also assign a value to the variable when you declare it:In the example below, we create a variable called carName and assign the value \n""Volvo"" to it.Then we ""output"" the value inside an HTML paragraph with id=""demo"":', 'You can declare many variables in one statement.Start the statement \nwith let and separate the variables by comma:A declaration can span multiple lines: ', 'In computer programs, variables are often declared without a value. The value \ncan be something that has to be calculated, or something that will be provided \nlater, like user input.A variable declared without a value will have the value \nundefined.The variable carName will have the value undefined after the execution of this statement:', 'If you re-declare a JavaScript variable declared with var, it will not lose its value.The variable carName will still have the value ""Volvo"" after the execution of these statements:', 'As with algebra, you can do arithmetic with JavaScript variables, using \noperators like = and +: You can also add strings, but strings will be concatenated:Also try this:Now try this:', 'Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:Using the dollar sign is not very common in JavaScript,\nbut professional programmers often use it \nas an alias for the main function in a JavaScript library.In the JavaScript library jQuery, for instance, the main function\n$ is used to select HTML elements.\nIn jQuery $(""p""); means ""select all p elements"".', 'Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:\n\nExample\n\nlet _lastName = ""Johnson"";\nlet _x = 2;\nlet _100 = 5;\n\nTry it Yourself »\n\nUsing the underscore is not very common in JavaScript,\n\nbut a convention among professional programmers is to use it as an alias for\n""private (hidden)"" variables.\n\n\nTest Yourself With Exercises\n\nExercise:\nCreate a variable called carName and assign the value Volvo to it.\n\n\nvar  = """";\n\n\n\nSubmit Answer »\nStart the Exercise\n\n\n\n\n❮ Previous\nNext ❯\n\n\n\n']","['\nvar x = 5;var y = 6;\nvar z = x + y;\n &&&&&& \nlet x = 5;\nlet y = 6;\nlet z = x + y;\n &&&&&& \nx = 5;\ny = 6;\nz = x + y;\n', '\nconst price1 = 5;\nconst price2 = 6;\nlet total = price1 + price2;\n', '\nlet x = 5;\nlet y = 6;\n', '\nlet z = x + y;\n', '\nx = x + 5 \n', '\nconst pi = 3.14;\nlet person = ""John Doe"";\nlet answer = \'Yes I am!\';\n', '\nvar carName;\n &&&&&& \nlet carName;\n &&&&&& \ncarName = ""Volvo"";\n &&&&&& \nlet carName = ""Volvo"";\n &&&&&& \n<p id=""demo""></p><script>\nlet carName = ""Volvo"";\ndocument.getElementById(""demo"").innerHTML = carName; </script>', '\nlet person = ""John Doe"", carName = ""Volvo"", price = 200;\n &&&&&& \nlet person = ""John Doe"",\ncarName = ""Volvo"",\nprice = 200;\n', '\nlet carName;\n', '\nvar carName = ""Volvo"";\nvar carName;\n', '\nlet x = 5 + 2 + 3;\n &&&&&& \nlet x = ""John"" + "" "" + ""Doe""; &&&&&& \nlet x = ""5"" + 2 + 3;\n &&&&&& \nlet x = 2 + 3 + ""5"";\n', '\nlet $ = ""Hello World"";\nlet $$$ = 2;\nlet $myMoney = 5;\n', '\nlet _lastName = ""Johnson"";\nlet _x = 2;\nlet _100 = 5;\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_let.asp,,"['Block Scope', 'Redeclaring Variables', 'Browser Support', 'Redeclaring', 'Let Hoisting']","['Before ES6 (2015), JavaScript had only Global Scope and Function Scope.ES6 introduced two important new JavaScript keywords: let and const.These two keywords provide Block Scope in JavaScript.Variables declared inside a { } block cannot be accessed \nfrom outside the block:Variables declared with the var keyword can NOT have block scope.Variables declared inside a { } block can be accessed from \noutside the block. ', 'Redeclaring a variable using the var keyword can impose problems.Redeclaring a variable inside a block will also redeclare the variable \noutside the block:Redeclaring a variable using the let keyword can solve this problem.Redeclaring a variable inside a block will not redeclare the variable outside \nthe block:', 'The let keyword is not fully supported in Internet Explorer 11 or earlier.The following table defines the first browser versions with full support for the let keyword: ', 'Redeclaring a JavaScript variable with var is allowed \nanywhere in a program:With let, redeclaring a variable in the same block is NOT allowed:Redeclaring a variable with let, in another block, IS allowed:', 'Variables defined with var are hoisted to the top \nand can be initialized at any time.\nMeaning: You can use the variable before it is declared:\n\nExample\nThis is OK:\n\n  carName = ""Volvo"";\n  var carName;\n\nTry it Yourself »\n\nIf you want to learn more about hoisting, study the chapter JavaScript Hoisting.\n\n\nVariables defined with let are also hoisted to the top \nof the block, but not initialized.\nMeaning: Using a let variable before it is declared will result in a \nReferenceError:\n\nExample\n\ncarName = ""Saab"";\nlet carName = ""Volvo"";\nTry it Yourself »\n\n\n\n❮ Previous\nNext ❯\n\n\n\n']","['\nlet x = ""John Doe"";\n\nlet x = 0;\n// SyntaxError: \'x\' has already been declared\n &&&&&& \nvar x = ""John Doe"";\n\nvar x = 0;\n', '\n{ \n\xa0\xa0let x = 2;\n  }\n// x can NOT be used here &&&&&& \n{ \n\xa0\xa0var x = 2; \n  }\n// x CAN be used here', '\nvar x = 10;\n// Here x is 10\n\n{ \nvar x = 2;\n// Here x is 2}\n\n// Here x is 2 &&&&&& \nlet x = 10;\n// Here x is 10\n\n{\nlet x = 2;\n// Here x is 2}\n\n// Here x is 10\n', '\nvar x = 2;\n// Now x is 2\n\nvar x = 3;\n// Now x is 3\n &&&&&& \nvar x = 2;\xa0\xa0\xa0\xa0// Allowed\nlet x = 3;\xa0\xa0\xa0\xa0// Not allowed\n\n{\nlet x = 2;\xa0\xa0\xa0\xa0// Allowed\nlet x = 3\xa0\xa0\xa0\xa0\xa0// Not allowed\n}\n\n{\nlet x = 2;\xa0\xa0\xa0\xa0// Allowed\nvar x = 3\xa0\xa0\xa0\xa0\xa0// Not allowed\n}\n &&&&&& \nlet x = 2;\xa0\xa0\xa0\xa0// Allowed{\nlet x = 3;\xa0\xa0\xa0 // Allowed\n  }\n\n  {\nlet x = 4;\xa0\xa0\xa0\xa0// Allowed\n  }', '']",[''],"['|||||||||||||||&&&Chrome 49|||Edge 12|||Firefox 44|||Safari 11|||Opera 36|||&&&Mar, 2016|||Jul, 2015|||Jan, 2015|||Sep, 2017|||Mar, 2016|||&&&']",[]
js||Const,https://www.w3schools.com/js/js_const.asp,,"['Must be Assigned', 'Constant Objects and Arrays', 'Constant Arrays', 'Constant Objects', 'Browser Support', 'Block Scope', 'Redeclaring', 'Const Hoisting']","['JavaScript const variables must be assigned a value when they are declared:', 'The keyword const is a little misleading.It does not define a constant value. It defines a constant reference to a value.Because of this you can NOT:', 'You can change the elements of a constant array:But you can NOT reassign the array:', 'You can change the properties of a constant object:But you can NOT reassign the object:', 'The const keyword is not supported in Internet Explorer 10 or earlier.The following table defines the first browser versions with full support for the const keyword: ', 'Declaring a variable with const is similar to let \nwhen it comes to Block Scope.The x declared in the block, in this example, is not the same as the x declared outside the block:You can learn more about block scope in the chapter JavaScript Scope.', 'Redeclaring a JavaScript var variable is allowed \nanywhere in a program:Redeclaring an existing var or let\nvariable to const, in the same scope, is not allowed:Reassigning an existing const variable, in the same scope, is not allowed:Redeclaring a variable with const, in another scope, or in another block, is allowed:', 'Variables defined with var are hoisted to the top \nand can be initialized at any time.Meaning: You can use the variable before it is declared:If you want to learn more about hoisting, study the chapter JavaScript Hoisting.\n\nVariables defined with const are also hoisted to the top,\nbut not initialized.\nMeaning: Using a const variable before it is declared will result in a \nReferenceError:\n\nExample\n\nalert (carName);\nconst carName = ""Volvo"";\n\nTry it Yourself »\n\n\n\n❮ Previous\nNext ❯\n\n\n\n']","['\nconst PI = 3.141592653589793;\nPI = 3.14;\xa0\xa0\xa0\xa0\xa0 // This will give an error\nPI = PI + 10;\xa0\xa0 // This will also give an error\n', '\nconst PI = 3.14159265359;\n', '\nconst PI;\nPI = 3.14159265359;\n', '\n// You can create a constant array:\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n// You can change an element:\ncars[0] = ""Toyota"";\n// You can add an element:\ncars.push(""Audi"");\n &&&&&& \nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n\ncars = [""Toyota"", ""Volvo"", ""Audi""];\xa0\xa0\xa0 // ERROR\n', '\n// You can create a const object:\nconst car = {type:""Fiat"", model:""500"", color:""white""};\n// You can change a property:\ncar.color = ""red"";\n// You can add a property:\ncar.owner = ""Johnson""; &&&&&& \nconst car = {type:""Fiat"", model:""500"", color:""white""};\n\ncar = {type:""Volvo"", model:""EX60"", color:""red""};\xa0\xa0\xa0 // \n  ERROR', '\nconst x = 10;\n// Here x is 10\n\n{ \nconst x = 2;\n// Here x is 2}\n\n// Here x is 10\n', '\nvar x = 2;\xa0\xa0\xa0\xa0\xa0// Allowed\nvar x = 3;\xa0\xa0\xa0\xa0\xa0// Allowed\n  x = 4;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Allowed &&&&&& \nvar x = 2;\xa0\xa0\xa0\xa0\xa0// Allowed\nconst x = 2;\xa0\xa0\xa0// Not allowed\n\n{\nlet x = 2;\xa0 \xa0\xa0 // Allowed\nconst x = 2;\xa0\xa0\xa0// Not allowed}\n\n{\nconst x = 2;\xa0\xa0 // Allowed\nconst x = 2;\xa0\xa0\xa0// Not allowed\n}\n\n   &&&&&& \n  const x = 2;\xa0\xa0\xa0\xa0\xa0// Allowed\n  x = 2;\xa0\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0// Not allowed\n  var x = 2;\xa0 \xa0\xa0\xa0\xa0\xa0// Not allowed\n  let x = 2;\xa0 \xa0\xa0\xa0\xa0\xa0// Not allowed\n  const x = 2;\xa0\xa0\xa0\xa0\xa0// Not allowed\n{\xa0\n  const x = 2;\xa0\xa0 // Allowed\n\xa0 x = 2;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Not allowed\xa0 var x = 2;\xa0\xa0\xa0\xa0 \n  // Not allowed\xa0 let x = 2;\xa0\xa0\xa0\xa0 \n  // Not allowed\n  \xa0\n  const x = 2;\xa0\xa0\xa0// Not allowed\n}\n &&&&&& \n  const x = 2;\xa0\xa0\xa0\xa0\xa0\xa0 // Allowed{\xa0\n  const x = 3;\xa0\xa0 // Allowed\n  }\n\n  {\n\xa0\xa0const x = 4;\xa0\xa0\xa0// Allowed\n  }', '']",['When to use JavaScript const?###Constant Objects and Arrays###Constant Objects and Arrays###&&&|||A new Array|||A new Object|||A new Function|||A new RegExp|||&&&|||Reassign a constant value|||Reassign a constant array|||Reassign a constant object|||&&&|||But you CAN:|||Change the elements of constant array|||Change the properties of constant object|||'],"['|||||||||||||||&&&Chrome 49|||IE 11 / Edge|||Firefox 36|||Safari 10|||Opera 36|||&&&Mar, 2016|||Oct, 2013|||Feb, 2015|||Sep, 2016|||Mar, 2016|||&&&']",[]
js||Operators,https://www.w3schools.com/js/js_operators.asp,,"['JavaScript Arithmetic Operators', 'JavaScript Assignment Operators', 'JavaScript String Operators', 'Adding Strings and Numbers', 'JavaScript Comparison Operators', 'JavaScript Logical Operators', 'JavaScript Type Operators', 'JavaScript Bitwise Operators']","['The assignment operator (=) assigns a value to a variable.The addition operator (+) adds numbers:The multiplication operator (*) multiplies numbers.', 'Arithmetic operators are used to perform arithmetic on numbers:', 'Assignment operators assign values to JavaScript variables.The addition assignment operator (+=) adds a value to a variable.', 'The + operator can also be used to add (concatenate) strings.The += assignment operator can also be used to add (concatenate) strings:', 'Adding two numbers, will return the sum, but adding a number and a string will return a string:', 'Bit operators work on 32 bits numbers.', '', '']","['\nlet x = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// assign the value 5 to \n x\nlet y = 2;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// assign the value \n 2 to y\nlet z = x + y;\xa0\xa0\xa0\xa0\xa0// assign the value 7 to z (5 + 2)\n', '\nlet x = 10;', '\nlet x = 5;\nlet y = 2;\nlet z = x + y;\n', '\nlet x = 5;\nlet y = 2;\nlet z = x * y;\n', '\nlet x = 10;x += 5;', '\nlet text1 = ""John"";\nlet text2 = ""Doe"";\nlet text3 = text1 + "" "" + text2;\n &&&&&& \nJohn Doe &&&&&& \nlet text1 = ""What a very "";\ntext1 += ""nice day"";', '\nWhat a very nice day', '\nlet x = 5 + 5;\nlet y = ""5"" + 5;\nlet z = ""Hello"" + 5;\n', '\n\n10\n55\nHello5\n\n']",[''],"['Operator|||Description|||&&&+|||Addition|||&&&-|||Subtraction|||&&&*|||Multiplication|||&&&**|||Exponentiation (ES2016)|||&&&/|||Division|||&&&%|||Modulus (Division Remainder)|||&&&++|||Increment|||&&&--|||Decrement|||&&&', 'Operator|||Example|||Same As|||&&&=|||x = y|||x = y|||&&&+=|||x += y|||x = x + y|||&&&-=|||x -= y|||x = x - y|||&&&*=|||x *= y|||x = x * y|||&&&/=|||x /= y|||x = x / y|||&&&%=|||x %= y|||x = x % y|||&&&**=|||x **= y|||x = x ** y|||&&&', 'Operator|||Description|||&&&==|||equal to|||&&&===|||equal value and equal type|||&&&!=|||not equal|||&&&!==|||not equal value or not equal type|||&&&>|||greater than|||&&&<|||less than|||&&&>=|||greater than or equal to|||&&&<=|||less than or equal to|||&&&?|||ternary operator|||&&&', 'Operator|||Description|||&&&&&|||logical and|||&&&|||||logical or|||&&&!|||logical not|||&&&', 'Operator|||Description|||&&&typeof|||Returns the type of a variable|||&&&instanceof|||Returns true if an object is an instance of an object type|||&&&', 'Operator|||Description|||Example|||Same as|||Result|||Decimal|||&&&&|||AND|||5 & 1|||0101 & 0001|||0001|||\xa01|||&&&||||OR|||5 | 1|||0101 | 0001|||0101|||\xa05|||&&&~|||NOT|||~ 5|||\xa0~0101|||1010|||\xa010|||&&&^|||XOR|||5 ^ 1|||0101 ^ 0001|||0100|||\xa04|||&&&<<|||left shift|||5 << 1|||0101 << 1|||1010|||\xa010|||&&&>>|||right shift|||5 >> 1|||0101 >> 1|||0010|||\xa0 2|||&&&>>>|||unsigned right shift|||5 >>> 1|||0101 >>> 1|||0010|||\xa0 2|||&&&']",[]
js||Arithmetic,https://www.w3schools.com/js/js_arithmetic.asp,,"['JavaScript Arithmetic Operators', 'Arithmetic Operations', 'Operators and Operands', 'Adding', 'Subtracting', 'Multiplying', 'Dividing', 'Remainder', 'Incrementing', 'Decrementing', 'Exponentiation', 'Operator Precedence', 'JavaScript Operator Precedence Values']","['Arithmetic operators perform arithmetic on numbers (literals or variables).', 'A typical arithmetic operation operates on two numbers.The two numbers can be literals:or variables:or expressions:', 'The numbers (in an arithmetic operation) are called operands.The operation (to be performed between the two operands) is defined by an operator.', 'The addition operator (+) adds numbers:', 'The subtraction operator (-) subtracts numbers.', 'The multiplication operator (*) multiplies numbers.', 'The division operator (/) divides numbers.', 'The modulus operator (%) returns the division remainder.', 'The increment operator (++) increments numbers.', 'The decrement operator (--) decrements numbers.', 'The exponentiation operator (**) raises the first operand to the power of the second operand.x ** y produces the same result as Math.pow(x,y):', 'Operator precedence describes the order in which operations are performed in \nan arithmetic expression.Is the result of example above the same as 150 * 3, or is it the same as 100 \n+ 150?Is the addition or the multiplication done first?As in traditional school mathematics, the multiplication is done first.Multiplication (*) and division (/) have higher precedence than \naddition (+) and subtraction (-).And (as in school mathematics) the precedence can be changed by using \nparentheses:When using parentheses, the operations inside the parentheses are computed \nfirst. When many operations have the same precedence (like addition and \nsubtraction), they are computed from left to \nright: ', '']","['\nlet x = 100 + 50;\n &&&&&& \nlet x = a + b;\n &&&&&& \nlet x = (100 + 50) * a;\n', '\nlet x = 5;\nlet y = 2;\nlet z = x + y;\n', '\nlet x = 5;\nlet y = 2;\nlet z = x - y;\n', '\nlet x = 5;\nlet y = 2;\nlet z = x * y;\n', '\nlet x = 5;\nlet y = 2;\nlet z = x / y;\n', '\nlet x = 5;\nlet y = 2;\nlet z = x % y;\n', '\nlet x = 5;x++;\nlet z = x;', '\nlet x = 5;\n x--;\nlet z = x;\n', '\nlet x = 5;\nlet z =\n x ** 2;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // result is 25\n &&&&&& \nlet x = 5;\nlet z =\n  Math.pow(x,2);\xa0\xa0 // result is 25\n', '\nlet x = 100 + 50 * 3;\n &&&&&& \nlet x = (100 + 50) * 3;\n &&&&&& \nlet x = 100 + 50 - 3;\n', '', '', '']",[''],"['Operator|||Description|||&&&+|||Addition|||&&&-|||Subtraction|||&&&*|||Multiplication|||&&&**|||Exponentiation (ES2016)|||&&&/|||Division|||&&&%|||Modulus (Remainder)|||&&&++|||Increment|||&&&--|||Decrement|||&&&', 'Operand|||Operator|||Operand|||&&&100|||+|||50|||&&&', 'Value|||Operator|||Description|||Example|||&&&21|||( )|||Expression grouping|||(3 + 4)|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&20|||.|||Member|||person.name|||&&&20|||[]|||Member|||person[""name""]|||&&&20|||()|||Function call|||myFunction()|||&&&20|||new|||Create|||new Date()|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&18|||++|||Postfix Increment|||i++|||&&&18|||--|||Postfix Decrement|||i--|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&17|||++|||Prefix Increment|||++i|||&&&17|||--|||Prefix Decrement|||--i|||&&&17|||!|||Logical not|||!(x==y)|||&&&17|||typeof|||Type|||typeof x|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&16|||**|||Exponentiation (ES2016)|||10 ** 2|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&15|||*|||Multiplication|||10 * 5|||&&&15|||/|||Division|||10 / 5|||&&&15|||%|||Division Remainder|||10 % 5|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&14|||+|||Addition|||10 + 5|||&&&14|||-|||Subtraction|||10 - 5|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&13|||<<|||Shift left|||x << 2|||&&&13|||>>|||Shift right|||x >> 2|||&&&13|||>>>|||Shift right (unsigned)|||x >>> 2|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&12|||<|||Less than|||x < y\xa0|||&&&12|||<=|||Less than or equal|||x <= y|||&&&12|||>|||Greater than|||x > y|||&&&12|||>=|||Greater than or equal|||x >= y|||&&&12|||in|||Property in Object|||""PI"" in Math|||&&&12|||instanceof|||Instance of Object|||instanceof Array|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&11|||==|||Equal|||x == y|||&&&11|||===|||Strict equal|||x === y|||&&&11|||!=|||Unequal|||x != y|||&&&11|||!==|||Strict unequal|||x !== y|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&10|||&|||Bitwise AND|||x & y|||&&&9|||^|||Bitwise XOR|||x ^ y|||&&&8|||||||Bitwise OR|||x | y|||&&&7|||&&|||Logical AND|||x && y|||&&&6||||||||Logical OR|||x || y|||&&&5|||??|||Nullish Coalescing|||x ?? y|||&&&4|||? :|||Condition|||? ""Yes"" : ""No""|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&3|||+=|||Assignment|||x += y|||&&&3|||/=|||Assignment|||x /= y|||&&&3|||-=|||Assignment|||x -= y|||&&&3|||*=|||Assignment|||x *= y|||&&&3|||%=|||Assignment|||x %= y|||&&&3|||<<=|||Assignment|||x <<= y|||&&&3|||>>=|||Assignment|||x >>= y|||&&&3|||>>>=|||Assignment|||x >>>= y|||&&&3|||&=|||Assignment|||x &= y|||&&&3|||^=|||Assignment|||x ^= y|||&&&3||||=|||Assignment|||x |= y|||&&&\xa0|||\xa0|||\xa0|||\xa0|||&&&2|||yield|||Pause Function|||yield x|||&&&1|||,|||Comma|||5 , 6|||&&&']",[]
js||Assignment,https://www.w3schools.com/js/js_assignment.asp,,"['JavaScript Assignment Operators', 'Assignment Examples']","['Assignment operators assign values to JavaScript variables.', 'The = assignment operator assigns a value to a variable.The += assignment operator adds a value to a variable.The -= assignment operator subtracts a value from a variable.The *= assignment operator multiplies a variable.The /= assignment divides a variable.The %= assignment operator assigns a remainder to a variable.']","['\nlet x = 10;', '\nlet x = 10;x += 5;', '\nlet x = 10;x -= 5;', '\nlet x = 10;x *= 5;', '\nlet x = 10;x /= 5;', '\nlet x = 10;x %= 5;']",[''],['Operator|||Example|||Same As|||&&&=|||x = y|||x = y|||&&&+=|||x += y|||x = x + y|||&&&-=|||x -= y|||x = x - y|||&&&*=|||x *= y|||x = x * y|||&&&/=|||x /= y|||x = x / y|||&&&%=|||x %= y|||x = x % y|||&&&<<=|||x <<= y|||x = x << y|||&&&>>=|||x >>= y|||x = x >> y|||&&&>>>=|||x >>>= y|||x = x >>> y|||&&&&=|||x &= y|||x = x & y|||&&&^=|||x ^= y|||x = x ^ y|||&&&|=|||x |= y|||x = x | y|||&&&**=|||x **= y|||x = x ** y|||&&&'],[]
js||Data Types,https://www.w3schools.com/js/js_datatypes.asp,,"['JavaScript Types are Dynamic', 'JavaScript Strings', 'JavaScript Numbers', 'JavaScript Booleans', 'JavaScript Arrays', 'JavaScript Objects', 'The typeof Operator', 'Undefined', 'Empty Values ']","['JavaScript has dynamic types. This means that the same variable can be used \nto hold \ndifferent data types:', 'A string (or a text string) is a series of characters like ""John Doe"".Strings are written with quotes. You can use single or double quotes:\nYou can use quotes inside a string, as long as they don\'t match the quotes \nsurrounding the string:You will learn more about strings later in this \ntutorial.', 'JavaScript has only one type of numbers.Numbers can be written with, or without decimals:Extra large or extra small numbers can be written with scientific \n(exponential) notation:You will learn more about numbers later in this \ntutorial.', 'Booleans can only have two values: true or false.Booleans are often used in conditional testing.You will learn more about \nconditional testing later in this tutorial.', 'JavaScript arrays are written with square brackets.Array items are separated by commas.The following code declares (creates) an array called cars, containing three \nitems (car names):Array indexes are zero-based, which means the first item is [0], second is \n[1], and so on.', 'JavaScript objects are written with curly braces {}.Object \nproperties are written as name:value pairs, separated by commas.The object (person) in the example above has 4 properties: firstName, \nlastName, age, and eyeColor.', 'You can use the JavaScript typeof operator to find the type \nof a JavaScript variable.The typeof operator returns the type of a variable or an expression:', 'In JavaScript, a variable without a value, has the value undefined. \nThe type is also undefined.Any variable can be emptied, by setting the value to undefined. \nThe type will also be undefined.', 'An empty value has nothing to do with undefined.An empty string has both a legal value and a type.']","['\nlet x = 16 + ""Volvo""; &&&&&& \nlet x = ""16"" + ""Volvo""; &&&&&& \nlet x = 16 + ""Volvo""; &&&&&& \nlet x = ""Volvo"" + 16;', '\nlet x = 16 + 4 + ""Volvo"";\n', '\n20Volvo\n', '\nlet x = ""Volvo"" + 16 + 4;\n', '\nVolvo164\n', '\nlet x;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Now x is undefined\nx = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Now x is a Number\nx = ""John"";\xa0\xa0\xa0\xa0\xa0 // Now x is a String\n', '\nlet carName1 = ""Volvo XC60"";\xa0\xa0 // Using double quotes\nlet carName2 = \'Volvo XC60\';\xa0\xa0 // Using single quotes &&&&&& \nlet answer1 = ""It\'s alright"";\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Single quote inside double quotes\nlet answer2 = ""He is called \'Johnny\'"";\xa0\xa0\xa0\n// Single quotes inside double quotes\nlet answer3 = \'He is called ""Johnny""\';\xa0\xa0\xa0\n// Double quotes inside single quotes\n', '\nlet x1 = 34.00;\xa0\xa0\xa0\xa0 // Written with decimals\nlet x2 = 34;\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Written without decimals\n &&&&&& \nlet y = 123e5;\xa0\xa0\xa0\xa0\xa0\xa0// 12300000\nlet z = 123e-5;\xa0\xa0\xa0\xa0\xa0// 0.00123', '\nlet x = 5;\nlet y = 5;\nlet z = 6;(x == y)\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Returns true(x == z)\xa0\xa0\xa0\xa0\xa0\xa0 // Returns \n  false', '\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n', '\nconst person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};\n', '\ntypeof """"\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""string""\ntypeof ""John""\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""string""\ntypeof ""John Doe""\xa0\xa0\xa0\xa0\xa0// Returns \n ""string"" &&&&&& \ntypeof 0\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""number""\n  typeof 314\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Returns \n ""number""\n  typeof 3.14\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Returns \n ""number""\n  typeof (3)\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Returns \n ""number""typeof (3 + 4)\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Returns \n ""number""', '\nlet car;\xa0\xa0\xa0 // Value is undefined, \n    type is undefined &&&&&& \n    car = undefined;\xa0\xa0\xa0 // Value is undefined, \n    type is undefined', '\nlet car = """";\xa0\xa0\xa0 // \n    The value is \n    """", the typeof is ""string""']",[''],[],[]
js||Functions,https://www.w3schools.com/js/js_functions.asp,"A JavaScript function is a block of code designed to perform a 
particular task.","['JavaScript Function Syntax', 'Function Invocation', 'Function Return', 'Why Functions?', 'The () Operator Invokes the Function', 'Functions Used as Variable Values', 'Local Variables']","['A JavaScript function is executed when \n""something"" invokes it (calls it).', 'A JavaScript function is defined with the function keyword, \nfollowed by a name, followed by parentheses ().Function names can contain letters, digits, underscores, and dollar signs \n(same rules as variables).The parentheses may include parameter names separated by commas:\n(parameter1, parameter2, ...)The code to be executed, by the function, is placed inside curly brackets: {}Function parameters are listed inside the parentheses () in \nthe function definition.Function arguments are the values \nreceived by the function when it is invoked.Inside the function, the arguments (the parameters) behave as local variables.', 'The code inside the function will execute when ""something"" invokes (calls) the \nfunction:You will learn a lot more about function invocation later in this \ntutorial.', 'When JavaScript reaches a return statement, \nthe function will stop executing.If the function was invoked from a statement, JavaScript will \n""return"" to execute the code after the invoking statement.Functions often compute a return value. The return value is \n""returned"" back to \nthe ""caller"":', 'You can reuse code: Define the code once, and use it many times.You can use the same code many times with different arguments, to produce different \nresults.', 'Using the example above, toCelsius refers to the function object, and \ntoCelsius() refers to the function result.Accessing a function without () will return the function object instead of \nthe function result.', 'Functions can be used the same way as you use variables, in all types of formulas, assignments, and \ncalculations.', 'Variables declared within a JavaScript function, become \nLOCAL to \nthe function.Local variables can only be accessed \nfrom within the function.Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.Local variables are created when a function starts, and deleted when the function is completed.']","['\nfunction myFunction(p1, p2) {\n  \xa0 return p1 * p2;\xa0\xa0\n//  The function returns the product of p1 and p2\n}\n', '\nfunction\nname(parameter1, parameter2, parameter3) {\n  \xa0 // code to be executed\n}\n', '\nlet x = myFunction(4, 3);\xa0\xa0\xa0// Function is called, return value will end up in x\nfunction myFunction(a, b) {\n  \xa0 return a * b;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0\n// Function returns the product of a and b\n}\n', '\n\n12\n\n', '\nfunction toCelsius(fahrenheit) {\n  \xa0 return (5/9) * (fahrenheit-32);\n}document.getElementById(""demo"").innerHTML = toCelsius(77);', '\nfunction toCelsius(fahrenheit) {\n  \xa0 return (5/9) * (fahrenheit-32);\n}document.getElementById(""demo"").innerHTML = toCelsius;', '\nlet x = toCelsius(77);\nlet text = ""The temperature is "" + x + "" Celsius"";\n', '\nlet text = ""The temperature is "" + toCelsius(77) + "" Celsius"";\n', '\n// code here can NOT use carName\nfunction myFunction() {\n\xa0\xa0let carName = ""Volvo"";\n\xa0\xa0// code here CAN use carName\n}\n// code here can NOT use carName\n']",['Function Invocation###&&&|||When an event occurs (when a user clicks a button)|||When it is invoked (called) from JavaScript code|||Automatically (self invoked)|||'],[],[]
js||Objects,https://www.w3schools.com/js/js_objects.asp,,"['Real Life Objects, Properties, and Methods', 'JavaScript Objects', 'Object Definition', 'Object Properties', 'Accessing Object Properties', 'Object Methods', '']","['In real life, a car is an object. A car has properties like weight and color, and methods like start and stop:All cars have the same properties, but the property values differ from car to car.All cars have the same methods, but the methods are performed \nat different times.', 'You have already learned that JavaScript variables are \ncontainers for data values.This code assigns a simple value (Fiat) to \na variable named car: Objects are variables too. But objects can contain many \nvalues. This code assigns many values (Fiat, 500, white) to a\nvariable \nnamed car:The values are written as name:value pairs (name and value separated by a \ncolon).', 'You define (and create) a JavaScript object with an object literal:Spaces and line breaks are not important. An object definition can span multiple lines: ', 'The name:values pairs in JavaScript objects are called properties:', 'You can access object properties in two ways: or', 'Objects can also have methods.Methods are actions that can be performed on objects.Methods are stored in properties as function \ndefinitions.', 'In the example above, this refers to the person object.I.E. this.firstName means the firstName property of this.I.E. this.firstName means the firstName property of person.', 'In JavaScript, the this keyword refers to an object.Which object depends on how this is being invoked (used or called).The this keyword refers to different objects depending on how it is used:', 'In a function definition, this refers to the ""owner"" of the function.In the example above, this is the person object that ""owns"" the \nfullName function.In other words, this.firstName means the firstName property of this object.Learn more about this in The JavaScript this Tutorial.', 'You access an object method with the following syntax:If you access a method without the () parentheses, it \nwill return the function definition:', 'When a JavaScript variable is declared with the keyword ""new"", the variable is \ncreated as \nan object: Avoid String, Number, and Boolean objects. They complicate your code and slow down  \nexecution speed.']","['\nlet car = ""Fiat"";\n', '\nconst car = {type:""Fiat"", model:""500"", color:""white""};\n', '\nconst person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};\n &&&&&& \nconst person = {\n  \xa0 firstName: ""John"",\n  \xa0 lastName: ""Doe"",\n\xa0\xa0age: 50,\n\xa0\xa0eyeColor: ""blue""\n};\n', '\nobjectName.propertyName', '\nobjectName[""propertyName""]\n', '\nperson.lastName;\n', '\n person[""lastName""];\n', '\nconst person = {\n  \xa0 firstName: ""John"",\n  \xa0 lastName : ""Doe"",\n  \xa0 id\xa0\xa0\xa0\xa0\xa0\xa0 :\xa05566,\n  \xa0 fullName : function() {\n\xa0\xa0\xa0 return this.firstName + "" "" + this.lastName;\xa0\xa0}\n};\n', '\nobjectName.methodName()\n &&&&&& \nname = person.fullName(); &&&&&& \nname = person.fullName;', '\nx = new String();\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Declares x as a String object\ny =\xa0new Number();\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Declares y as a Number object\nz =\xa0new Boolean();\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Declares z as a Boolean object\n']",[''],"['\nObject\n|||\nProperties\n|||\nMethods\n|||&&&\n\n|||\ncar.name = Fiat\ncar.model = 500\ncar.weight = 850kg\ncar.color = white\n|||\ncar.start()\ncar.drive()\ncar.brake()\ncar.stop()|||&&&', 'Property|||Property Value|||&&&firstName|||John|||&&&lastName|||Doe|||&&&age|||50|||&&&eyeColor|||blue|||&&&', 'Property|||Property Value|||&&&firstName|||John|||&&&lastName|||Doe|||&&&age|||50|||&&&eyeColor|||blue|||&&&fullName|||function() {return this.firstName + "" "" + this.lastName;}|||&&&', 'In an object method, this refers to the object.|||&&&Alone, this refers to the global object.|||&&&In a function, this refers to the global object.|||&&&In a function, in strict mode, this is undefined.|||&&&In an event, this refers to the element that received the event.|||&&&Methods like call(), apply(),\nand bind() can refer this to any object.|||&&&']",['objectExplained.gif']
js||Events,https://www.w3schools.com/js/js_events.asp,"HTML events are ""things"" that happen to HTML elements.","['HTML Events', 'Common HTML Events', 'JavaScript Event Handlers']","['When JavaScript is used in HTML pages, JavaScript can \n""react"" on \nthese events.', 'An HTML event can be something the browser does, or something a user does.Here are some examples of HTML events:Often, when events happen, you may want to do something.JavaScript lets you execute code when events are detected.HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.With single quotes:With double quotes:In the following example, an onclick attribute (with code), is added to a \n<button> element:In the example above, the JavaScript code changes the content of \nthe element with id=""demo"".In the next example, the code changes the content of \nits own element (using this.innerHTML): ', 'Here is a list of some common HTML events:The list is much longer: W3Schools JavaScript Reference HTML DOM Events.', 'Event handlers can be used to handle and verify user input, user actions, \nand browser actions:Many different methods can be used to let JavaScript work with events:']","['\n<button onclick=""document.getElementById(\'demo\').innerHTML = Date()"">The time is?</button>\n &&&&&& \n<button onclick=""this.innerHTML = Date()"">The time is?</button>\n &&&&&& \n<button onclick=""displayDate()"">The time is?</button>', '', '']",['HTML Events###JavaScript Event Handlers###JavaScript Event Handlers###&&&|||An HTML web page has finished loading|||An HTML input field was changed|||An HTML button was clicked|||&&&|||Things that should be done every time a page loads|||Things that should be done when the page is closed|||Action that should be performed when a user clicks a button|||Content that should be verified when a user inputs data|||And more ...|||&&&|||HTML event attributes can execute JavaScript code directly|||HTML event attributes can call JavaScript functions|||You can assign your own event handler functions to HTML elements|||You can prevent events from being sent or being handled|||And more ...|||'],['Event|||Description|||&&&onchange|||An HTML element has been changed|||&&&onclick|||The user clicks an HTML element|||&&&onmouseover|||The user moves the mouse over an HTML element|||&&&onmouseout|||The user moves the mouse away from an HTML element|||&&&onkeydown|||The user pushes a keyboard key|||&&&onload|||The browser has finished loading the page|||&&&'],[]
js||Strings,https://www.w3schools.com/js/js_strings.asp,JavaScript strings are for storing and manipulating text.,"['String Length', 'Escape Character']","['To find the length of a string, use the built-in length property:', 'Because strings must be written within quotes, JavaScript will misunderstand this string:The string will be chopped to ""We are the so-called "".The solution to avoid this problem, is to use the backslash escape character.The backslash (\\) escape character turns special characters into string characters:The sequence \\""\xa0 inserts a double quote in a string:\n\nExample\n\nlet text = ""We are the so-called \\""Vikings\\"" from the north."";\nTry it Yourself »\n\nThe sequence \\\'\xa0 inserts a single quote in a string:\n\nExample\n\nlet text= \'It\\\'s alright.\';\n\nTry it Yourself »\n\nThe sequence \\\\\xa0 inserts a backslash in a string:\n\nExample\n\nlet text = ""The character \\\\ is called backslash."";\n\nTry it Yourself »\n\nSix other escape sequences are valid in JavaScript:\n\n\nCode\nResult\n\n\n\\b\nBackspace\n\n\n\\f\nForm Feed\n\n\n\\n\nNew Line\n\n\n\\r\nCarriage Return\n\n\n\\t\nHorizontal Tabulator\n\n\n\\v\nVertical Tabulator\n\n\n\nThe 6 escape characters above were originally designed to control \ntypewriters, teletypes, and fax machines. They do not make any sense in HTML. \n\n\nBreaking Long Code Lines\nFor best readability, programmers often like to avoid code lines longer than \n80 characters.\nIf a JavaScript statement does not fit on one line, the best place to break \nit is after an operator:\n\nExample\n\ndocument.getElementById(""demo"").innerHTML =""Hello Dolly!"";\nTry it Yourself »\n\nYou can also break up a code line within a text string with a single backslash:\n\nExample\n\ndocument.getElementById(""demo"").innerHTML = \n""Hello \\Dolly!"";\n\nTry it Yourself »\n\n\nThe \\ method is not the preferred method. It might not have universal support.Some browsers do \nnot allow spaces behind the \\ character.\n\nA safer way to break up a string, is to use string \naddition:\n\nExample\n\ndocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";\n\nTry it Yourself »\n\nYou cannot break up a code line with a backslash:\n\nExample\n\ndocument.getElementById(""demo"").innerHTML = \\ ""Hello Dolly!"";\n\nTry it Yourself »\n\n\nJavaScript Strings as Objects\nNormally, JavaScript strings are primitive values, created from literals:\n\n\nlet x = ""John"";\n\n\nBut strings can also be defined as objects with the keyword new:\n\n\nlet y = new String(""John"");\n\n\n\nExample\n\nlet x = ""John"";\nlet y = new String(""John"");\n\nTry it Yourself »\n\n\nDo not create Strings objects.\nThe new keyword complicates the code and slows down execution speed.\nString objects can produce unexpected results:\n\n\n When using the == operator, x and y are equal:\n\nlet x = ""John"";\nlet y = new String(""John"");\n\nTry it Yourself »\n\n\nWhen using the === operator, x and y are not equal:\n\n\nlet x = ""John"";\nlet y = new String(""John"");\n\nTry it Yourself »\n\n\nNote the difference between (x==y) and (x===y).\n\n\n(x == y) true or false?\n\nlet x = new String(""John"");\nlet y = new String(""John"");\n\nTry it Yourself »\n\n\n(x === y) true or false?\n\nlet x = new String(""John"");\nlet y = new String(""John"");\n\nTry it Yourself »\n\n\nComparing two JavaScript objects always returns false.\n\n\nComplete String Reference\nFor a complete String reference, go to our:\nComplete JavaScript String Reference.\nThe reference contains descriptions and examples of all string properties and methods.\n\n\nTest Yourself With Exercises\n\nExercise:\nUse the length property to alert the length of txt.\n\n\nlet txt = ""Hello World!"";\nlet x = ;\nalert(x);\n\n\n\nSubmit Answer »\nStart the Exercise\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'For best readability, programmers often like to avoid code lines longer than \n80 characters.If a JavaScript statement does not fit on one line, the best place to break \nit is after an operator:You can also break up a code line within a text string with a single backslash:A safer way to break up a string, is to use string \naddition:You cannot break up a code line with a backslash:', 'Normally, JavaScript strings are primitive values, created from literals:But strings can also be defined as objects with the keyword new:']","['\nlet text = ""John Doe"";\n &&&&&& \nlet carName1 = ""Volvo XC60"";\xa0 \n  // Double quotes\nlet carName2 = \'Volvo XC60\';\xa0 // Single quotes  &&&&&& \nlet answer1 = ""It\'s alright"";\nlet answer2 = ""He is called \'Johnny\'"";\nlet answer3 = \'He is called ""Johnny""\';\n', '\nlet text = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";\nlet length = text.length;\n', '\nlet text = ""We are the so-called ""Vikings"" from the north."";\n &&&&&& \nlet text = ""We are the so-called \\""Vikings\\"" from the north.""; &&&&&& \nlet text= \'It\\\'s alright.\';\n &&&&&& \nlet text = ""The character \\\\ is called backslash."";\n', '\ndocument.getElementById(""demo"").innerHTML =""Hello Dolly!""; &&&&&& \ndocument.getElementById(""demo"").innerHTML = \n""Hello \\Dolly!"";\n &&&&&& \ndocument.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";\n &&&&&& \ndocument.getElementById(""demo"").innerHTML = \\ ""Hello Dolly!"";\n']",[''],"['Code|||Result|||Description|||&&&\\\'|||\'|||Single quote|||&&&\\""|||""|||Double quote|||&&&\\\\|||\\|||Backslash|||&&&', 'Code|||Result|||&&&\\b|||Backspace|||&&&\\f|||Form Feed|||&&&\\n|||New Line|||&&&\\r|||Carriage Return|||&&&\\t|||Horizontal Tabulator|||&&&\\v|||Vertical Tabulator|||&&&']",[]
js||String Methods,https://www.w3schools.com/js/js_string_methods.asp,String methods help you to work with strings.,"['String Methods and Properties', 'JavaScript String Length', 'Extracting String Parts', 'JavaScript String slice()', 'JavaScript String substring()', 'JavaScript String substr()', 'Replacing String Content', 'Converting to Upper and Lower Case', 'JavaScript String toUpperCase()', 'JavaScript String toLowerCase()', 'JavaScript String concat()', 'JavaScript String trim()', 'JavaScript String Padding', 'JavaScript String padStart()', 'Browser Support', 'JavaScript String padEnd()', 'Browser Support', 'Extracting String Characters', 'JavaScript String charAt()', 'JavaScript String charCodeAt()', 'Property Access', 'Converting a String to an Array', 'JavaScript String split()']","['Primitive values, like ""John Doe"", cannot have properties \nor methods (because they are not objects). But with JavaScript, methods and properties are also available to \nprimitive values, because JavaScript treats primitive values \nas objects when executing methods and properties.', 'The length property returns the length of a string:', 'There are 3 methods for extracting a part of a string:', 'slice() extracts a part of a string and returns the \nextracted part in a new string.The method takes 2 parameters: the start position, and the end position (end \nnot included).This example slices out a portion of a string from position 7 to position 12 (13-1):If a parameter is negative, the position is counted from the \nend of the string.This example slices out a portion of a string from position -12 to position \n-6: If you omit the second parameter, the method will slice out the rest of the string:or, counting from the end:', 'substring() is similar to slice().The difference is that substring() cannot accept negative indexes.If you omit the second parameter, substring() will slice out the rest of the \nstring.', 'substr() is similar to slice().The difference is \nthat the second parameter specifies the length \nof the extracted part.If you omit the second parameter, substr() will slice out the rest of the \nstring.If the first parameter is negative, the position counts from the end of the \nstring.', 'The replace() method replaces a specified value with another \nvalue in a string:By default, the replace() method replaces only the first match:By default, the replace() method is case sensitive. Writing MICROSOFT (with \nupper-case) will not work:To replace case insensitive, use a regular expression with an /i flag (insensitive):To replace all matches, use a regular expression with a /g flag (global match):', 'A string is converted to upper case with toUpperCase():A string is converted to lower case with toLowerCase():', 'concat() joins two or more strings:The concat() method can be used instead of the plus operator. \nThese two lines do the same:', 'The trim() method removes whitespace from both sides of a string:', 'ECMAScript 2017 added two String methods: padStart\nand padEnd to support padding at the beginning and at the end of a string.', 'padStart() is an ECMAScript 2017 feature.It is supported in all modern browsers:padStart() is not supported in Internet Explorer.', 'padEnd() is an ECMAScript 2017 feature.It is supported in all modern browsers:padEnd() is not supported in Internet Explorer.', 'There are 3 methods for extracting string characters:', 'The charAt() method returns the character at a specified \nindex (position) in a string:', 'The charCodeAt() method returns the unicode of the character \nat a specified index in a string:The method returns a UTF-16 code (an integer between 0 and 65535).', 'ECMAScript 5 (2009) allows property access [ ] on strings:', 'A string can be converted to an array with the split() method:If the separator is omitted, the returned array will contain the whole string \nin index [0].If the separator is """", the returned array will be an array of single \ncharacters:', '', '', '', '', '']","['\nlet txt = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";\nlet length = txt.length;\n', '\nlet str = ""Apple, Banana, Kiwi"";\nlet part = str.slice(7, 13);\n &&&&&& \nlet str = ""Apple, Banana, Kiwi"";\nlet part = str.slice(-12, -6);\n &&&&&& \nlet part = str.slice(7);\n &&&&&& \nlet part = str.slice(-12);\n', '\nlet str = ""Apple, Banana, Kiwi"";\nlet part = str.substring(7, 13);\n', '\nlet str = ""Apple, Banana, Kiwi"";\nlet part = str.substr(7, 6);\n &&&&&& \nlet str = ""Apple, Banana, Kiwi"";\nlet part = str.substr(7);\n &&&&&& \nlet str = ""Apple, Banana, Kiwi"";\nlet part = str.substr(-4);\n', '\nlet text = ""Please visit Microsoft!"";\nlet newText = text.replace(""Microsoft"", ""W3Schools"");\n &&&&&& \nlet text = ""Please visit Microsoft and Microsoft!"";\nlet newText = text.replace(""Microsoft"", ""W3Schools"");\n &&&&&& \nlet text = ""Please visit Microsoft!"";\nlet newText = text.replace(""MICROSOFT"", ""W3Schools"");\n &&&&&& \nlet text = ""Please visit Microsoft!"";\nlet newText = text.replace(/MICROSOFT/i, ""W3Schools"");\n &&&&&& \nlet text = ""Please visit Microsoft and Microsoft!"";\nlet newText = text.replace(/Microsoft/g, ""W3Schools"");\n', '\nlet text1 = ""Hello World!"";\nlet text2 = text1.toUpperCase();\n &&&&&& \nlet text1 = ""Hello World!"";\xa0\xa0\xa0\xa0\xa0\xa0 // String\nlet text2 = text1.toLowerCase();\xa0\xa0// text2 is text1 \nconverted to lower\n', '\nlet text1 = ""Hello"";\nlet text2 = ""World"";\nlet text3 = text1.concat("" "", text2);\n &&&&&& \ntext = ""Hello"" + "" "" + ""World!"";\ntext = ""Hello"".concat("" "", ""World!"");', '\nlet text1 = ""\xa0\xa0\xa0\xa0\xa0 Hello World! \xa0\xa0\xa0\xa0\xa0"";\nlet text2 = text1.trim();\n', '\nlet text = ""5"";\nlet padded = text.padStart(4,0);\n', '\nlet text = ""5"";\nlet padded = text.padEnd(4,0);\n', '\nlet text = ""HELLO WORLD"";\nlet char = text.charAt(0);\n', '\nlet text = ""HELLO WORLD"";\nlet char = text.charCodeAt(0);\n', '\nlet text = ""HELLO WORLD"";\nlet char = text[0];\n &&&&&& \nlet text = ""HELLO WORLD"";\ntext[0] = ""A"";\xa0\xa0\xa0\xa0// Gives no error, but does not work\n', '', '', '', '', '', '', '', '', '', '']","['Extracting String Parts###Extracting String Characters###Note###&&&|||slice(start, end)|||substring(start, end)|||substr(start, length)|||&&&|||charAt(position)|||charCodeAt(position)|||Property access [ ]|||&&&|||It makes strings look like arrays (but they are not)|||If no character is found, [ ] returns undefined, while charAt() returns an empty string.|||It is read only. str[0] = ""A"" gives no error (but does not work!)|||']","['|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&']",[]
js||,https://www.w3schools.com/js/js_string_search.asp,,"['JavaScript String lastIndexOf()', 'JavaScript String search()', 'Did You Notice?', 'JavaScript String match()', 'Syntax', 'JavaScript String includes()', 'Syntax', 'Browser Support', 'JavaScript String startsWith()', 'Syntax', 'Parameter Values', 'Browser Support', 'JavaScript String endsWith()', 'Syntax', 'Parameter Values', 'Browser Support']","['The lastIndexOf() method returns the index of the last \noccurrence of a specified text in a string:Both indexOf(), and lastIndexOf() return -1\nif the text is not found:Both methods accept a second parameter as the starting position for the \nsearch:The lastIndexOf() methods searches backwards \n(from the end to the beginning), meaning:\nif the second parameter is 15, the search starts at position \n15, and searches to the beginning of the string.', 'The search() method searches a string for a specified value \nand returns the position of the match:', 'The two methods, indexOf() and search(), are equal?They accept the same arguments (parameters), and return the same value?The two methods are NOT equal. These are the differences:You will learn more about \nregular expressions in a later chapter.', 'The match() method searches a string for a match against a regular expression, and returns the matches, as an Array object.Read more about regular expressions in the chapter JS RegExp.', 'The includes() method returns true if a string contains a specified value.', 'includes() is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:includes() is not supported in Internet Explorer.', 'The startsWith() method returns true\nif a string begins with a specified value, otherwise false:', 'startsWith() is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:startsWith() is not supported in Internet Explorer.', 'The endsWith() method returns true\nif a string ends with a specified value, otherwise false:', 'endsWith() is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:endsWith() is not supported in Internet Explorer.', '', '', '', '', '', '']","['\nlet str = ""Please locate where \'locate\' occurs!"";\nstr.indexOf(""locate"");\n', '\nlet str = ""Please locate where \'locate\' occurs!"";\nstr.lastIndexOf(""locate"");\n &&&&&& \nlet str = ""Please locate where \'locate\' occurs!"";\nstr.lastIndexOf(""John"");\n &&&&&& \nlet str = ""Please locate where \'locate\' occurs!"";\nstr.indexOf(""locate"", 15);\n &&&&&& \nlet str = ""Please locate where \'locate\' occurs!"";\nstr.lastIndexOf(""locate"", 15);\n', '\nlet str = ""Please locate where \'locate\' occurs!"";\nstr.search(""locate"");\n', '\nlet text = ""The rain in SPAIN stays mainly in the plain""; \ntext.match(/ain/g); \n', '\nlet text = ""The rain in SPAIN stays mainly in the plain""; \ntext.match(/ain/gi);\n', '\nlet text = ""Hello world, welcome to the universe."";\ntext.includes(""world"");\n', '\nlet text = ""Hello world, welcome to the universe."";\ntext.includes(""world"", 12);\n', '\nlet text = ""Hello world, welcome to the universe."";\n\ntext.startsWith(""Hello"");\n', '\nlet text = ""Hello world, welcome to the universe."";\n\ntext.startsWith(""world"")\xa0\xa0\xa0\xa0// Returns false\n', '\nlet text = ""Hello world, welcome to the universe."";\n\ntext.startsWith(""world"", 5)\xa0\xa0\xa0\xa0// Returns false\n', '\nlet text = ""Hello world, welcome to the universe."";\n\ntext.startsWith(""world"", 6)\xa0\xa0\xa0\xa0// Returns true\n', '\nvar text = ""John Doe"";\ntext.endsWith(""Doe"");\n', '\nlet text = ""Hello world, welcome to the universe."";\ntext.endsWith(""world"", 11);\n', '', '', '']",['JavaScript Search Methods###Did You Notice?###&&&|||String indexOf()|||String lastIndexOf()|||String startsWith()|||String endsWith()|||&&&|||The search() method cannot take a second start position argument.|||The indexOf() method cannot take |||powerful search values (regular expressions).|||'],"['regexp|||Required. The value to search for, as a regular expression.|||&&&Returns:|||An Array, containing the matches, one item for each match, or null if no match is found|||&&&', 'searchvalue|||Required. The string to search for|||&&&start|||Optional. Default 0. Position to start the search|||&&&Returns:|||Returns true if the string contains the value, otherwise false|||&&&JS Version:|||ES6 (2015)|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', 'Parameter|||Description|||&&&searchvalue|||Required. The value to search for.|||&&&start|||Optional. Default 0. The position to start the search.|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', 'Parameter|||Description|||&&&searchvalue|||Required. The value to search for.|||&&&length|||Optional. The length to search.|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&']",[]
js||,https://www.w3schools.com/js/js_string_templates.asp,,"['Quotes Inside Strings', 'Multiline Strings', 'Interpolation', 'Variable Substitutions', 'Expression Substitution', 'HTML Templates', 'Browser Support']","['With template literals, you can use both single and double quotes inside a string:', 'Template literals allows multiline strings:', 'Template literals provide an easy way to interpolate variables and expressions into strings.The method is called string interpolation.The syntax is:', 'Template literals allow variables in strings:', 'Template literals allow expressions in strings:', 'Template Literals is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:Template Literals is not supported in Internet Explorer.', '']","['\nlet text = `Hello World!`;\n', '\nlet text = `He\'s often called ""Johnny""`;\n', '\nlet text =\n`The quick\nbrown fox\njumps over\nthe lazy dog`;\n', '\n${...}', '\nlet firstName = ""John"";\nlet lastName = ""Doe"";\n\nlet text = `Welcome ${firstName}, ${lastName}!`;\n', '\nlet price = 10;\nlet VAT = 0.25;\n\nlet total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;\n', '\nlet header = ""Templates Literals"";\nlet tags = [""template literals"", ""javascript"", ""es6""];\n\nlet html = `<h2>${header}</h2><ul>`;\n\nfor (const x of tags) {\n\xa0 html += `<li>${x}</li>`;\n}\n\nhtml += `</ul>`;\n']",[''],['|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&'],[]
js||Numbers,https://www.w3schools.com/js/js_numbers.asp,"JavaScript has only one type of number.
Numbers can be written with or without decimals.","['JavaScript Numbers are Always 64-bit Floating Point', 'Integer Precision', 'Floating Precision', 'Adding Numbers and Strings', 'Numeric Strings', 'NaN - Not a Number', 'Infinity', 'Hexadecimal', 'JavaScript Numbers as Objects']","['Extra large or extra small numbers can be written with scientific (exponent) notation:', 'Unlike many other programming languages, \nJavaScript does not define different types of numbers, like integers, short, long, \nfloating-point etc.JavaScript numbers are always stored as double precision floating point \nnumbers, following the international IEEE 754 standard. This format \nstores numbers in 64 bits, where the number (the fraction) is stored in bits 0 \nto 51, the exponent in bits 52 to 62, and the sign in bit 63:', 'Integers (numbers without a period or exponent notation) are accurate up to 15 digits.The maximum number of decimals is 17.', 'If you add two numbers, the result will be a number:If you add two strings, the result will be a string concatenation:If you add a number and a string, the result will be a string concatenation:If you add a string and a number, the result will be a string concatenation:A common mistake is to expect this result to be 30:A common mistake is to expect this result to be 102030:', 'JavaScript strings can have numeric content:JavaScript will try to convert strings to numbers in all numeric operations:This will work:This will also work:And this will work:But this will not work:', 'NaN is a JavaScript reserved word indicating that a number is not a legal number.Trying to do arithmetic with a non-numeric string will result in NaN (Not a \nNumber):However, if the string contains a numeric value , the result will be a \nnumber:You can use the global JavaScript function isNaN()\nto find out if a value is a not a number:Watch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:Or the result might be a concatenation like NaN5:NaN is a number: typeof NaN returns number:', 'Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest \npossible number.Division by 0 (zero) also generates Infinity:Infinity is a number: typeof Infinity returns number.', 'JavaScript interprets numeric constants as hexadecimal if they are preceded by \n0x.\nBy default, JavaScript displays numbers as base 10 decimals.But you can use the toString() method to output numbers from base 2 \nto base 36.Hexadecimal is base 16. Decimal is base 10. \nOctal is base 8. Binary is base 2.', 'Normally JavaScript numbers are primitive values created from literals:But numbers can also be defined as objects with the keyword new:']","['\nlet x = 3.14;\xa0\xa0\xa0 // A number with decimals\nlet y = 3;\xa0\xa0\xa0\xa0\xa0\xa0 // A number without decimals\n &&&&&& \nlet x = 123e5;\xa0\xa0\xa0 // 12300000\nlet y = 123e-5;\xa0\xa0 // 0.00123\n', '\nlet x = 999999999999999;\xa0\xa0 // x will be 999999999999999\nlet y = 9999999999999999;\xa0 // y will be 10000000000000000\n', '\nlet x = 0.2 + 0.1;\n', '\nlet x = (0.2 * 10 + 0.1 * 10) / 10;\n', '\nlet x = 10;\nlet y = 20;\nlet z = x + y;\n &&&&&& \nlet x = ""10"";\nlet y = ""20"";\nlet z = x + y;\n &&&&&& \nlet x = 10;\nlet y = ""20"";\nlet z = x + y;\n &&&&&& \nlet x = ""10"";\nlet y = 20;\nlet z = x + y;\n &&&&&& \nlet x = 10;\nlet y = 20;\nlet z = ""The result is: "" + x + y;\n &&&&&& \nlet x = 10;\nlet y = 20;\nlet z = ""30"";\nlet result = x + y + z;\n', '\nlet x = 100;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // x is a number\nlet y = ""100"";\xa0\xa0\xa0\xa0\xa0\xa0 // y is a \nstring', '\nlet x = ""100"";\nlet y = ""10"";\nlet z = x / y;\n', '\nlet x = ""100"";\nlet y = ""10"";\nlet z = x * y;\n', '\nlet x = ""100"";\nlet y = ""10"";\nlet z = x - y;\n', '\nlet x = ""100"";\nlet y = ""10"";\nlet z = x + y;\n', '\nlet x = 100 / ""Apple"";\n &&&&&& \nlet x = 100 / ""10"";\n &&&&&& \nlet x = 100 / ""Apple"";isNaN(x);\n &&&&&& \nlet x = NaN;\nlet y = 5;\nlet z = x + y;\n &&&&&& \nlet x = NaN;\nlet y = ""5"";\nlet z = x + y;\n &&&&&& \ntypeof NaN;\n', '\nlet myNumber = 2;\n// Execute until Infinity\nwhile (myNumber != Infinity) {\n  \xa0 myNumber = myNumber * myNumber;}\n &&&&&& \nlet x =\xa0 2 / 0;\nlet y = -2 / 0;\n &&&&&& \n typeof Infinity;\n', '\nlet x = 0xFF;\n &&&&&& \nlet myNumber = 32;\nmyNumber.toString(10);\nmyNumber.toString(32);\nmyNumber.toString(16);\nmyNumber.toString(8);\nmyNumber.toString(2);\n']",[''],['Value (aka Fraction/Mantissa)|||Exponent|||Sign|||&&&52 bits (0 - 51)\xa0|||11 bits (52 - 62)|||1 bit (63)|||&&&'],[]
js||Number Methods,https://www.w3schools.com/js/js_number_methods.asp,Number methods help you work with numbers.,"['Number Methods and Properties', 'The toString() Method', 'The toExponential() Method', 'The toFixed() Method', 'The toPrecision() Method', 'The valueOf() Method', 'Converting Variables to Numbers', 'Global JavaScript Methods', 'The Number() Method', 'The Number() Method Used on Dates', 'The parseInt() Method', 'The parseFloat() Method', 'Number Properties', 'JavaScript MIN_VALUE and MAX_VALUE', 'JavaScript POSITIVE_INFINITY', 'JavaScript NEGATIVE_INFINITY', 'JavaScript NaN - Not a Number', 'Number Properties Cannot be Used on Variables']","['Primitive values (like 3.14 or 2014), cannot have properties and methods (because they are not objects). But with JavaScript, methods and properties are also available to primitive \nvalues, because JavaScript treats primitive values as objects when executing \nmethods and properties.', 'The toString() method returns a number as a string.All number methods can be used on any type of numbers (literals, variables, or expressions):', ""toExponential() returns a string, with a number rounded and written using exponential notation.A parameter defines the number of characters behind the decimal point:The parameter is optional. If you don't specify it, JavaScript will not round the number."", 'toFixed() returns a string, with the number \nwritten with a specified number of \ndecimals:', 'toPrecision() returns a string, with a number written with a \nspecified length:', 'valueOf() returns a number as a number.In JavaScript, a number can be a primitive value (typeof = number) or an \nobject (typeof = object).The valueOf() method is used internally in JavaScript to convert Number \nobjects to primitive values.There is no reason to use it in your code.', 'There are 3 JavaScript methods that can be used \nto convert variables to numbers:These methods are not number methods, but global \nJavaScript methods.', 'JavaScript global methods can be used on all JavaScript data types.These are the most relevant methods, when working with numbers:', 'Number() can be used to convert JavaScript variables to numbers:', 'Number() can also convert a date to a number.The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:', 'parseInt() parses a string and returns a whole number. Spaces are \nallowed. Only the first number is returned:If the number cannot be converted, NaN (Not a Number) is returned.', 'parseFloat() parses a string and returns a number. Spaces are \nallowed. Only the first number is returned:If the number cannot be converted, NaN (Not a Number) is returned.', 'MAX_VALUE returns the largest possible number in JavaScript.MIN_VALUE returns the lowest possible number in JavaScript.', 'POSITIVE_INFINITY is returned on overflow:', 'NEGATIVE_INFINITY is returned on overflow:', 'NaN is a JavaScript reserved word indicating that a number is not a legal number.Trying to do arithmetic with a non-numeric string will result in NaN (Not a \nNumber):', ""Number properties belongs to the JavaScript's number object wrapper called Number.These properties can only be accessed as Number.MAX_VALUE.Using myNumber.MAX_VALUE, where myNumber is a variable, expression, \nor value, will return undefined:"", '']","['\nlet x = 123;\nx.toString();\n(123).toString();\n(100 + 23).toString();\n', '\nlet x = 9.656;\nx.toExponential(2);\nx.toExponential(4);\nx.toExponential(6);\n', '\nlet x = 9.656;\nx.toFixed(0);\nx.toFixed(2);\nx.toFixed(4);\nx.toFixed(6);\n', '\nlet x = 9.656;\nx.toPrecision();\nx.toPrecision(2);\nx.toPrecision(4);\nx.toPrecision(6);\n', '\nlet x = 123;\nx.valueOf();\n(123).valueOf();\n(100 + 23).valueOf();\n', '\nNumber(true);\nNumber(false);\nNumber(""10"");\nNumber(""\xa0 10"");\nNumber(""10\xa0 "");\nNumber("" 10\xa0 "");\nNumber(""10.33"");\nNumber(""10,33"");\nNumber(""10 33"");\nNumber(""John"");\n', '\nNumber(new Date(""1970-01-01""))\n &&&&&& \nNumber(new Date(""1970-01-02""))\n &&&&&& \nNumber(new Date(""2017-09-30""))\n', '\nparseInt(""-10"");\nparseInt(""-10.33"");\nparseInt(""10"");\nparseInt(""10.33"");\nparseInt(""10 20 30"");\nparseInt(""10 years"");\nparseInt(""years 10"");\n', '\nparseFloat(""10"");\nparseFloat(""10.33"");\nparseFloat(""10 20 30"");\nparseFloat(""10 years"");\nparseFloat(""years 10"");\n', '\nlet x = Number.MAX_VALUE;\n &&&&&& \nlet x = Number.MIN_VALUE;\n', '\nlet x = Number.POSITIVE_INFINITY;\n &&&&&& \nlet x = 1 / 0;\n', '\nlet x = Number.NEGATIVE_INFINITY;\n &&&&&& \nlet x = -1 / 0;\n', '\nlet x = Number.NaN;\n &&&&&& \nlet x = 100 / ""Apple"";\n', '', '', '', '', '']",['Converting Variables to Numbers###&&&|||The Number() method|||The parseInt() method|||The parseFloat() method|||'],"['Method|||Description|||&&&Number()|||Returns a number, converted from its argument.|||&&&parseFloat()|||Parses its argument and returns a floating point number|||&&&parseInt()|||Parses its argument and returns an integer|||&&&', 'Property|||Description|||&&&MAX_VALUE|||Returns the largest number possible in JavaScript|||&&&MIN_VALUE|||Returns the smallest number possible in JavaScript|||&&&POSITIVE_INFINITY|||Represents infinity (returned on overflow)|||&&&NEGATIVE_INFINITY|||Represents negative infinity (returned on overflow)|||&&&NaN|||Represents a ""Not-a-Number"" value|||&&&']",[]
js||Arrays,https://www.w3schools.com/js/js_arrays.asp,,"['Creating an Array', 'Using the JavaScript Keyword new', 'Accessing Array Elements', 'Changing an Array Element', 'Access the Full Array', 'Arrays are Objects', 'Array Elements Can Be Objects', 'Array Properties and Methods', 'The length Property', 'Accessing the First Array Element', 'Accessing the Last Array Element', 'Looping Array Elements', 'Adding Array Elements', 'Associative Arrays', 'The Difference Between Arrays and Objects', 'When to Use Arrays. When to use Objects.', 'JavaScript new Array()', 'How to Recognize an Array']","['Using an array literal is the easiest way to create a JavaScript Array.Syntax: Spaces and line breaks are not important. A declaration can span multiple lines:You can also create an array, and then provide the elements:', 'The following example also creates an Array, and assigns values to it:', 'You access an array element by referring to the index number:', 'This statement changes the value of the first element in cars:', 'With JavaScript, the full array can be accessed by referring to the array \nname:', 'Arrays are a special type of objects. The typeof operator in JavaScript returns ""object"" for \narrays.But, JavaScript arrays are best described as arrays.Arrays use numbers to access its ""elements"". In this \nexample, person[0] \nreturns John:Objects use names to access its ""members"". In this example, \nperson.firstName \nreturns John:', 'JavaScript variables can be objects. Arrays are special kinds of objects.Because of this, you can have variables of different types in the \nsame Array.You can have objects in an Array. You can have functions in an Array. You can \nhave arrays in an Array:', 'The real strength of JavaScript arrays are the built-in array properties and \nmethods:Array methods are covered in the next chapters.', 'The length property of an array returns the length of an array (the number of array \nelements).', 'One way to loop through an array, is using a for loop:You can also use the Array.forEach() function:', 'The easiest way to add a new element to an array is using the push() method:New element can also be added to an array using the length property:', 'Many programming languages support arrays with named indexes.Arrays with named indexes are called associative \narrays (or hashes).JavaScript does not support arrays with named indexes.In JavaScript, arrays always use numbered indexes.\xa0\xa0 ', 'In JavaScript, arrays use numbered indexes.\xa0\xa0 In JavaScript, objects use named indexes.', 'JavaScript has a built in array constructor new Array().But you can safely use [] instead.These two different statements both create a new empty array named points:These two different statements both create a new array containing 6 numbers:The new keyword can produce some unexpected results:', 'A common question is: How do I know if a variable is an array?The problem is that the JavaScript operator typeof returns \n""object"":The typeof operator returns object because a JavaScript array is an \nobject. To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray():The instanceof operator returns true if an object is created \nby a given constructor:', '', '', '']","['\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n &&&&&& \nconst cars = [\n\xa0\xa0""Saab"",\n  \xa0 ""Volvo"",\n  \xa0 ""BMW""\n]; &&&&&& \nconst cars = [];\ncars[0]= ""Saab"";\ncars[1]= ""Volvo"";\ncars[2]= ""BMW"";\n', '\nconst cars = new Array(""Saab"", ""Volvo"", ""BMW"");\n', '\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\nlet car = cars[0];\n', '\ncars[0] = ""Opel"";\n &&&&&& \nconst cars = [""Saab"", ""Volvo"", ""BMW""];\ncars[0] = ""Opel"";\n', '\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\ndocument.getElementById(""demo"").innerHTML = cars;\n', '\nconst person = [""John"", ""Doe"", 46];\n', '\nconst person = {firstName:""John"", lastName:""Doe"", age:46};\n', '\ncars.length\xa0\xa0\xa0// Returns the number of elements\ncars.sort()\xa0\xa0\xa0// Sorts the array\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nlet length = fruits.length;\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nlet fruit = fruits[0];\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nlet fruit = fruits[fruits.length - 1];\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nlet fLen = fruits.length;\nlet text = ""<ul>"";for (let i = 0; i < fLen; i++) {\xa0\xa0text += ""<li>"" + fruits[i] + ""</li>"";}text \n  += ""</ul>"";\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\n\nlet text = ""<ul>"";fruits.forEach(myFunction);text += ""</ul>"";\nfunction \n  myFunction(value) {\xa0 \n text += ""<li>"" + value + ""</li>"";}', '\nconst fruits = [""Banana"", ""Orange"", ""Apple""];\nfruits.push(""Lemon"");\xa0\xa0// Adds a new element (Lemon) to fruits &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple""];\nfruits[fruits.length] = ""Lemon"";\xa0\xa0// Adds ""Lemon"" to fruits &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple""];\nfruits[6] = ""Lemon"";\xa0\xa0// Creates undefined ""holes"" in fruits', '\nconst person = [];\nperson[0] = ""John"";\nperson[1] = ""Doe"";\nperson[2] = 46;\nperson.length;\xa0\xa0\xa0\xa0// Will return 3\nperson[0];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Will return ""John""', '\nconst person = [];\nperson[""firstName""] = ""John"";\nperson[""lastName""] = ""Doe"";\nperson[""age""] = 46;\nperson.length;\xa0\xa0\xa0\xa0\xa0// Will return 0\nperson[0];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Will return undefined', '\nconst points = new Array();\nconst points = [];\n', '\nconst points = new Array(40, 100, 1, 5, 25, 10);\nconst points = [40, 100, 1, 5, 25, 10];\n', '\n// Create an array with three elements:\nconst points = new Array(40, 100, 1);\n', '\n// Create an array with two elements:\nconst points = new Array(40, 100);\n', '\n// Create an array with one element ???\nconst points = new Array(40);\xa0\xa0\n', '\nconst points = [40];', '\nconst points = new Array(40);\n', '\n// Create an array with one element:\nconst points = [40];\n', '\n// Create an array with 40 undefined elements:\nconst points = new Array(40);\xa0\xa0\n']",['When to Use Arrays. When to use Objects.###&&&|||JavaScript does not support associative arrays.|||You should use objects when you want the element names to be |||strings (text).|||You should use arrays when you want the element names to be|||numbers.|||'],[],[]
js||,https://www.w3schools.com/js/js_array_methods.asp,,"['Converting Arrays to Strings', 'Popping and Pushing', 'JavaScript Array pop()', 'JavaScript Array push()', 'Shifting Elements', 'JavaScript Array shift()', 'JavaScript Array unshift()', 'Changing Elements', 'JavaScript Array length', 'JavaScript Array delete()', 'Merging (Concatenating) Arrays', 'Splicing and Slicing Arrays', 'JavaScript Array splice()', 'Using splice() to Remove Elements', 'JavaScript Array slice()', 'Automatic toString()', 'Finding Max and Min Values in an Array', 'Sorting Arrays']","['The JavaScript method toString() converts an array to a \nstring of (comma separated) array values.The join() method also joins all array elements into a string.It behaves just like toString(), but in addition you can specify the separator:', 'When you work with arrays, it is easy to remove elements and add \nnew elements.This is what popping and pushing is:Popping items out of an array, or pushing \nitems into an array.', 'The pop() method removes the last element from an array: The pop() method returns the value that was ""popped out"":', 'The push() method adds a new element to an array (at the end):The push() method returns the new array length:', 'Shifting is equivalent to popping, but working on the first element instead of \nthe last.', 'The shift() method removes the first array element and ""shifts"" all \nother elements to a lower index.The shift() method returns the value that was ""shifted out"":', 'The unshift() method adds a new element to an array (at the beginning), and ""unshifts"" \nolder elements: The unshift() method returns the new array length.', 'Array elements are accessed using their index number:', 'The length property provides an easy way to append a new element to an array:', 'The concat() method creates a new array by merging (concatenating) \nexisting arrays:The concat() method can take any number of array arguments:The concat() method can also take strings as arguments:', 'The splice() method adds new items to an array.The slice() method slices out a piece of an array.', 'The splice() method can be used to add new items to an array: The first parameter (2) defines the position where new elements should be \nadded (spliced in).The second parameter (0) defines how many elements should be\nremoved.The rest of the parameters (""Lemon"" , ""Kiwi"") define the new elements to be\nadded.The splice() method returns an array with the deleted items: ', 'With clever parameter setting, you can use splice() to remove elements without leaving \n""holes"" in the array: The first parameter (0) defines the position where new elements should be \nadded (spliced in).The second parameter (1) defines how many elements should be\nremoved.The rest of the parameters are omitted. No new elements will be added.', 'The slice() method slices out a piece of an array into a new \narray.This example slices out a part of an array starting from array element 1 \n(""Orange""):This example slices out a part of an array starting from array element 3 \n(""Apple""):The slice() method can take two arguments like slice(1, 3).The method then selects elements from the start argument, and up to (but not \nincluding) the end argument.If the end argument is omitted, like in the first examples, the slice() \nmethod slices out the rest of the array.', 'JavaScript automatically converts an array to a comma separated string when a \nprimitive value is expected.This is always the case when you try to output an array. These two examples will produce the same result:', 'There are no built-in functions for finding the highest \nor lowest value in a JavaScript array.You will learn how you solve this problem in the next \nchapter of this tutorial.', 'Sorting arrays are covered in the next chapter of this tutorial.', '']","['\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\ndocument.getElementById(""demo"").innerHTML = fruits.toString();\n &&&&&& \n Banana,Orange,Apple,Mango\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\ndocument.getElementById(""demo"").innerHTML = fruits.join("" * "");\n', '\n Banana * Orange * Apple * Mango', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.pop();\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nlet fruit = fruits.pop();\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.push(""Kiwi"");\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nlet length = fruits.push(""Kiwi"");\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.shift();\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nlet fruit = fruits.shift();\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.unshift(""Lemon"");\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.unshift(""Lemon"");\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits[0] = ""Kiwi"";\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits[fruits.length] = ""Kiwi"";\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\ndelete fruits[0];\n', '\nconst myGirls = [""Cecilie"", ""Lone""];\nconst myBoys = [""Emil"", ""Tobias"", ""Linus""];\n\nconst myChildren = myGirls.concat(myBoys);\n', '\nconst arr1 = [""Cecilie"", ""Lone""];\nconst arr2 = [""Emil"", ""Tobias"", ""Linus""];\nconst arr3 = [""Robin"", ""Morgan""];\nconst myChildren = arr1.concat(arr2, arr3);\n', '\nconst arr1 = [""Emil"", ""Tobias"", ""Linus""];\nconst myChildren = arr1.concat(""Peter"");\xa0', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.splice(2, 0, ""Lemon"", ""Kiwi"");\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.splice(2, 2, ""Lemon"", ""Kiwi"");\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.splice(0, 1);\n', '\nconst fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];\nconst citrus = fruits.slice(1);\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];\nconst citrus = fruits.slice(3);\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];\nconst citrus = fruits.slice(1, 3);\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];\nconst citrus = fruits.slice(2);\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\ndocument.getElementById(""demo"").innerHTML = fruits.toString();\n &&&&&& \nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\ndocument.getElementById(""demo"").innerHTML = fruits;\n', '', '']",[''],[],[]
js||Sorting Arrays,https://www.w3schools.com/js/js_array_sort.asp,,"['Sorting an Array', 'Reversing an Array', 'Numeric Sort', 'The Compare Function', 'Sorting an Array in Random Order', 'The Fisher Yates Method', 'Find the Highest (or Lowest) Array Value', 'Using Math.max() on an Array', 'Using Math.min() on an Array', 'My Min / Max JavaScript Methods', 'Sorting Object Arrays']","['The sort() method sorts an array alphabetically: ', 'The reverse() method reverses the elements in an array.You can use it to \nsort an array in descending order: ', 'By default, the sort() function sorts values as strings.This works well for strings (""Apple"" comes before ""Banana"").However, if numbers are sorted as strings, ""25"" is bigger than ""100"", \nbecause ""2"" is bigger than ""1"".Because of this, the sort() method will produce incorrect result when sorting \nnumbers.You can fix this by providing a compare function:Use the same trick to sort an array descending:', 'The purpose of the compare function is to define an alternative sort \norder.The compare function should return a negative, zero, or positive value, depending on \nthe arguments:When the sort() function compares two values, it sends the values to the \ncompare function, and sorts the values according to the returned (negative, \nzero, positive) value.If the result is negative a is sorted before\nb.If the result is positive b is sorted \nbefore a.If the result is 0 no changes are done with the sort order of the two \nvalues.Example:The compare function compares all the values in the array, two values at a \ntime (a, b).When comparing 40 and 100, the sort() method calls the compare function(40, 100).The function calculates 40 - 100 (a - b), and \nsince the result is negative (-60),\xa0 the sort function will sort 40 as a value lower than 100.You can use this code snippet to experiment with numerically and \nalphabetically sorting:', 'The above example, array.sort(), is not accurate, it will favor some \nnumbers over the others.The most popular correct method, is called the Fisher Yates shuffle, and was \nintroduced in data science as early as 1938!In JavaScript the method can be translated to this:', 'There are no built-in functions for finding the max or min \nvalue in an array.However, after you have sorted an array, you can use the \nindex to obtain the highest and lowest values.Sorting ascending:Sorting descending:', 'You can use Math.max.apply to find the highest number in an array:Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).', 'You can use Math.min.apply to find the lowest number in an array:Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).', 'The fastest solution is to use a ""home made"" method.This function loops through an array comparing each value with the highest \nvalue found: This function loops through an array comparing each value with the lowest \nvalue found: ', 'JavaScript arrays often contain objects:Even if objects have properties of different data types, the sort() method \ncan be used to sort the array. The solution is to write a compare function to compare the property values:Comparing string properties is a little more complex:', '']","['\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.sort();\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.sort();\nfruits.reverse();\n', '\nconst points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return a - b});\n &&&&&& \nconst points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return b - a});\n', '\nfunction(a, b){return a - b}\n', '\n <button onclick=""myFunction1()"">Sort Alphabetically</button><button \n onclick=""myFunction2()"">Sort Numerically</button><p id=""demo""></p>\n<script>const points = [40, 100, 1, 5, 25, 10];\n document.getElementById(""demo"").innerHTML = points;function \n myFunction1() {\xa0\xa0points.sort();\xa0\xa0document.getElementById(""demo"").innerHTML \n = points;}function myFunction2() {\xa0 points.sort(function(a, b){return \n a - b});\xa0\xa0document.getElementById(""demo"").innerHTML = points;}\n </script>', '\nconst points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return 0.5 - Math.random()});\n', '\nconst points = [40, 100, 1, 5, 25, 10];\nfor (let i = points.length -1; i > 0; \n  i--) {\xa0 let j = Math.floor(Math.random() * i)\xa0 let k = points[i]\xa0 \n  points[i] = points[j]\xa0 points[j] = k}', '\nconst points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return a - b});\n// now points[0] contains the lowest value\n// and points[points.length-1] contains the highest value &&&&&& \nconst points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return b - a});\n// now points[0] contains the highest value\n// and points[points.length-1] contains the lowest value', '\nfunction myArrayMax(arr) {\n  \xa0 return Math.max.apply(null, arr);}\n', '\nfunction myArrayMin(arr) {\n\xa0\xa0return Math.min.apply(null, arr);}\n', '\nfunction myArrayMax(arr) {\n\xa0\xa0let len = arr.length;\n\xa0\xa0let max = -Infinity;\n\xa0\xa0while (len--) {\n    \xa0\xa0\xa0 \n  if (arr[len] > max) {\xa0\xa0\xa0\xa0\xa0 \n  max = arr[len];\xa0\xa0\xa0\xa0}\xa0\xa0}\xa0 return max;}', '\n  function myArrayMin(arr) {\xa0\xa0let len = arr.length;\xa0\xa0let min = Infinity;\xa0\xa0while (len--) {\xa0\xa0\xa0 \n  if (arr[len] < min) {\xa0\xa0\xa0\xa0\xa0 \n  min = arr[len];\xa0\xa0\xa0\xa0}\xa0\xa0}\xa0\xa0return min;}', '\nconst cars = [\n \xa0\n {type:""Volvo"", year:2016},\n \xa0\n {type:""Saab"", year:2001},\n \xa0\n {type:""BMW"", year:2010}]; &&&&&& \n cars.sort(function(a, b){return a.year - b.year}); &&&&&& \ncars.sort(function(a, b){\n\xa0\xa0let x = a.type.toLowerCase();\n\xa0\xa0let y = b.type.toLowerCase();\n  \xa0 if (x < y) {return -1;}\xa0 \n if (x > y) {return 1;}\xa0 return 0;});']",[''],[],[]
js||,https://www.w3schools.com/js/js_array_iteration.asp,Array iteration methods operate on every array item.,"['JavaScript Array forEach()', 'JavaScript Array map()', 'JavaScript Array filter()', 'JavaScript Array reduce()', 'JavaScript Array reduceRight()', 'JavaScript Array every()', 'JavaScript Array some()', 'JavaScript Array indexOf()', 'JavaScript Array lastIndexOf()', 'JavaScript Array find()', 'Browser Support', 'JavaScript Array findIndex()', 'Browser Support', 'JavaScript Array.from()', 'Browser Support', 'JavaScript Array Keys()', 'Browser Support', 'JavaScript Array includes()', 'Browser Support']","['The forEach() method calls a function (a callback function) once for each array element.Note that the function takes 3 arguments:The example above uses only the value parameter. The example can be rewritten \nto:', 'The map() method creates a new array by performing a function on each array element.The map() method does not execute the function for array \nelements without values.The map() method does not change the original array.This example multiplies each array value by 2: Note that the function takes 3 arguments:When a callback function uses only the value parameter, the index and array \nparameters can be omitted: ', 'The filter() method creates a new array with array elements that passes a test.This example creates a new array from elements with a value larger than 18:Note that the function takes 3 arguments:In the example above, the callback function does not use the index and array \nparameters, so they can be omitted:', 'The reduce() method runs a function on each array element to produce (reduce it to) a single value.The reduce() method works from left-to-right in the array. See also reduceRight().This example finds the sum of all numbers in an array:Note that the function takes 4 arguments:The example above does not use the index and array parameters. It can be \nrewritten to:The reduce() method can accept an initial value:', 'The reduceRight() method runs a function on each array element to produce (reduce it to) a single value.The reduceRight() works from right-to-left in the array. See also reduce().This example finds the sum of all numbers in an array:Note that the function takes 4 arguments:The example above does not use the index and array parameters. It can be \nrewritten to:', 'The every() method check if all array values pass a test.This example check if all array values are larger than 18:Note that the function takes 3 arguments:When a callback function uses the first parameter only (value), the other \nparameters can be omitted:', 'The some() method check if some array values pass a test.This example check if some array values are larger than 18:Note that the function takes 3 arguments:', 'The indexOf() method searches an array for an element value and returns its position.Array.indexOf() returns -1 if the item is not found.If the item is present more than once, it returns the position of the first \noccurrence.', 'Array.lastIndexOf() is the same as Array.indexOf(), but \nreturns the position of the last occurrence of the specified element.', 'The find() method returns the value of the first array element that passes a \ntest function.This example finds (returns the value of) the first element that is larger \nthan 18:Note that the function takes 3 arguments:', 'find() is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:find() is not supported in Internet Explorer.', 'The findIndex() method returns the index of the first array element that \npasses a test function.This example finds the index of the first element that is larger than 18:Note that the function takes 3 arguments:', 'findIndex() is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:findIndex() is not supported in Internet Explorer.', 'The Array.from() method returns an Array object from any object with a length \nproperty or any iterable object.', 'from() is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:from() is not supported in Internet Explorer.', 'The Array.keys() method returns an Array Iterator object with the keys of an array.', 'keys() is an ES6  feature (JavaScript 2015).It is supported in all modern browsers:keys() is not supported in Internet Explorer.', 'ECMAScript 2016 introduced Array.includes() to arrays.\nThis allows us to check if an element is present in an array (including NaN, unlike indexOf).Array.includes() is not supported in Internet Explorer and Edge 12/13.The first browser versions with full support are:', 'includes() is an ECMAScript 2016 feature.It is supported in all modern browsers:includes() is not supported in Internet Explorer.']","['\nconst numbers = [45, 4, 9, 16, 25];\nlet txt = """";\nnumbers.forEach(myFunction);\nfunction myFunction(value, index, array) {\n  \xa0\ntxt += value + ""<br>"";\n}\n &&&&&& \nconst numbers = [45, 4, 9, 16, 25];\nlet txt = """";\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\n  \xa0\ntxt += value + ""<br>""; \n}\n', '\nconst numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\n\nfunction myFunction(value, index, array) {\n  \xa0 return value * 2;\n}\n &&&&&& \nconst numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\n\nfunction myFunction(value) {\n  \xa0 return value * 2;\n}\n', '\nconst numbers = [45, 4, 9, 16, 25];\nconst over18 = numbers.filter(myFunction);\nfunction myFunction(value, index, array) {\xa0\xa0return value > 18;}  &&&&&& \nconst numbers = [45, 4, 9, 16, 25];\nconst over18 = \n  numbers.filter(myFunction);function myFunction(value) {\xa0\xa0return value > 18;} ', '\nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\nfunction myFunction(total, value, index, array) {\xa0 \n  return total + value;}  &&&&&& \nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\nfunction myFunction(total, value) {\xa0 \n  return total + value;}  &&&&&& \nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction, \n  100);\nfunction myFunction(total, value) {\xa0\xa0return total + value;} ', '\nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\nfunction myFunction(total, value, index, array) {\xa0 \n  return total + value;}  &&&&&& \nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\nfunction myFunction(total, value) {\xa0\xa0return total + value;} ', '\nconst numbers = [45, 4, 9, 16, 25];\nlet allOver18 = \n  numbers.every(myFunction);function myFunction(value, index, array) {\n  \xa0 return \n  value > 18;}  &&&&&& \nconst numbers = [45, 4, 9, 16, 25];\nlet allOver18 = \n  numbers.every(myFunction);function myFunction(value) {\xa0 return \n  value > 18;} ', '\nconst numbers = [45, 4, 9, 16, 25];\nlet someOver18 = numbers.some(myFunction);function myFunction(value, index, array) {\n  \xa0 return \n  value > 18;} ', '\nconst fruits = [""Apple"", ""Orange"", ""Apple"", ""Mango""];\nlet position = fruits.indexOf(""Apple"") + 1;\n', '\nconst fruits = [""Apple"", ""Orange"", ""Apple"", ""Mango""];\nlet position = fruits.lastIndexOf(""Apple"") + 1;\n', '\nconst numbers = [4, 9, 16, 25, 29];\nlet first = \n  numbers.find(myFunction);function myFunction(value, index, array) {\xa0\xa0return \n  value > 18;} ', '\nconst numbers = [4, 9, 16, 25, 29];\nlet first = \n  numbers.findIndex(myFunction);function myFunction(value, index, array) {\n  \xa0 return \n  value > 18;} ', '\nArray.from(""ABCDEFG"");\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nconst keys = fruits.keys();\nfor (let x of keys) {\n\xa0 text += x + ""<br>"";}\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nfruits.includes(""Mango""); // is true\n', '', '', '', '', '']",['JavaScript Array forEach()###JavaScript Array map()###JavaScript Array filter()###JavaScript Array reduce()###JavaScript Array reduceRight()###JavaScript Array every()###JavaScript Array some()###JavaScript Array find()###JavaScript Array findIndex()###&&&|||The item value|||The item index |||The array itself|||&&&|||The item value|||The item index |||The array itself|||&&&|||The item value|||The item index |||The array itself|||&&&|||The total (the initial value / previously returned value)|||The item value|||The item index |||The array itself|||&&&|||The total (the initial value / previously returned value)|||The item value|||The item index |||The array itself|||&&&|||The item value|||The item index |||The array itself|||&&&|||The item value|||The item index |||The array itself|||&&&|||The item value|||The item index |||The array itself|||&&&|||The item value|||The item index |||The array itself|||'],"['item|||Required. The item to search for.|||&&&start|||Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.|||&&&', 'item|||Required. The item to search for|||&&&start|||Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the beginning|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&']",[]
js||Array Const,https://www.w3schools.com/js/js_array_const.asp,,"['ECMAScript 2015 (ES6)', 'Cannot be Reassigned', 'Arrays are Not Constants', 'Elements Can be Reassigned', 'Browser Support', 'Assigned when Declared']","['in 2015, JavaScript introduced an important new keyword: const.It has become a common practice to declare arrays using const:', 'An array declared with const cannot be reassigned:', 'The keyword const is a little misleading.It does NOT define a constant array. It defines a constant reference to an array.Because of this, we can still change the elements of a constant array.', 'You can change the elements of a constant array:', 'The const keyword is not supported in Internet Explorer 10 or earlier.The following table defines the first browser versions with full support for the const keyword: ', 'JavaScript const variables must be assigned a value when they are declared:\nMeaning: An arrays declared with const must be initialized when it is declared.\nUsing const without initializing the array is a syntax \nerror:\n\nExample\nThis will not work:\n\nconst cars;\ncars = [""Saab"", ""Volvo"", ""BMW""];\n\n\nArrays declared with var can be initialized at any time.\nYou can even use the array before it is declared:\n\nExample\nThis is OK:\n\ncars = [""Saab"", ""Volvo"", ""BMW""];\nvar cars;\n\nTry it Yourself »\n\n\nConst Block Scope\nAn array declared with const has Block Scope.\nAn array declared in a block is not the same as an array declared outside the block:\n\nExample\n\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n// Here cars[0] is ""Saab""\n{\n\xa0\xa0const cars = [""Toyota"", ""Volvo"", ""BMW""]; \n\xa0\xa0// Here cars[0] is ""Toyota""\n}\n// Here cars[0] is ""Saab""\n\nTry it Yourself »\n\nAn array declared with var does not have block scope:\n\nExample\n\nvar cars = [""Saab"", ""Volvo"", ""BMW""];\n// Here cars[0] is ""Saab""\n{\n\xa0\xa0var cars = [""Toyota"", ""Volvo"", ""BMW""]; \n\xa0\xa0// Here cars[0] is ""Toyota""\n}\n// Here cars[0] is ""Toyota""\n\nTry it Yourself »\n\nYou can learn more about Block Scope in the chapter: JavaScript Scope.\n\n\n\n\n\n\n\nRedeclaring Arrays\nRedeclaring an array declared with var is allowed anywhere in a program:\n\nExample\n\nvar cars = [""Volvo"", ""BMW""]; \xa0\xa0// Allowed\nvar cars = [""Toyota"", ""BMW""]; \xa0// Allowed\ncars = [""Volvo"", ""Saab""]; \xa0\xa0\xa0\xa0\xa0// Allowed\n\n\nRedeclaring or reassigning an array to const, in the same scope, or in \nthe same block, is not allowed:\n\nExample\n\nvar cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0\xa0\xa0// Allowed\nconst cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0// Not allowed\n{\n\xa0\xa0var cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0// Allowed\n\xa0\xa0const cars = [""Volvo"", ""BMW""];\xa0// Not allowed\n}\n\n\nRedeclaring or reassigning an existing const array, in the same scope, or in \nthe same block, is not allowed:\n\nExample\n\nconst cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0// Allowed\nconst cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0// Not allowed\nvar cars = [""Volvo"", ""BMW""];\xa0 \xa0\xa0\xa0// Not allowed\ncars = [""Volvo"", ""BMW""];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Not allowed\n\n{\n\xa0\xa0const cars = [""Volvo"", ""BMW""];\xa0// Allowed\n\xa0\xa0const cars = [""Volvo"", ""BMW""];\xa0// Not allowed\n\xa0\xa0var cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0// Not allowed\n\xa0\xa0cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Not allowed\n}\n\n\nRedeclaring an array with const, in another scope, or in another block, is allowed:\n\nExample\n\nconst cars = [""Volvo"", ""BMW""];\xa0\xa0\xa0// Allowed\n{\n\xa0\xa0const cars = [""Volvo"", ""BMW""];\xa0// Allowed\n}\n{\n\xa0\xa0const cars = [""Volvo"", ""BMW""];\xa0// Allowed\n}\n\n\n\nComplete Array Reference\nFor a complete Array reference, go to our:\nComplete JavaScript Array Reference.\nThe reference contains descriptions and examples of all Array \nproperties and methods.\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'An array declared with const has Block Scope.An array declared in a block is not the same as an array declared outside the block:An array declared with var does not have block scope:You can learn more about Block Scope in the chapter: JavaScript Scope.', 'Redeclaring an array declared with var is allowed anywhere in a program:Redeclaring or reassigning an array to const, in the same scope, or in \nthe same block, is not allowed:Redeclaring or reassigning an existing const array, in the same scope, or in \nthe same block, is not allowed:Redeclaring an array with const, in another scope, or in another block, is allowed:']","['\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n', '\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\ncars = [""Toyota"", ""Volvo"", ""Audi""];\xa0\xa0\xa0 // ERROR\n', '\n// You can create a constant array:\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n// You can change an element:\ncars[0] = ""Toyota"";\n// You can add an element:\ncars.push(""Audi"");\n', '\nconst cars;\ncars = [""Saab"", ""Volvo"", ""BMW""];\n &&&&&& \ncars = [""Saab"", ""Volvo"", ""BMW""];\nvar cars;\n', '\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\n// Here cars[0] is ""Saab""\n{\n\xa0\xa0const cars = [""Toyota"", ""Volvo"", ""BMW""]; \n\xa0\xa0// Here cars[0] is ""Toyota""\n}\n// Here cars[0] is ""Saab""\n &&&&&& \nvar cars = [""Saab"", ""Volvo"", ""BMW""];\n// Here cars[0] is ""Saab""\n{\n\xa0\xa0var cars = [""Toyota"", ""Volvo"", ""BMW""]; \n\xa0\xa0// Here cars[0] is ""Toyota""\n}\n// Here cars[0] is ""Toyota""\n', '']",[''],"['|||||||||||||||&&&Chrome 49|||IE 11 / Edge|||Firefox 36|||Safari 10|||Opera 36|||&&&Mar, 2016|||Oct, 2013|||Feb, 2015|||Sep, 2016|||Mar, 2016|||&&&']",[]
js||,https://www.w3schools.com/js/js_dates.asp,,"['JavaScript Date Output', 'Creating Date Objects', 'new Date()', '']","['JavaScript Date Object lets us work with dates:document.write(xxx)', ""By default, JavaScript will use the browser's time zone and display a date as a full text string:document.write(xxx)"", 'Date objects are created with the \nnew Date() constructor.There are 4 ways to create a new date object:', 'new Date() creates a new date object with the current date and time:', 'new Date(year, month, ...) creates a new date object with a specified date and time.7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):Specifying a month higher than 11, will not result in an error but add the overflow to the next year:Specifying a day higher than max, will not result in an error but add the overflow to the next month:', '6 numbers specify year, month, day, hour, minute, second:5 numbers specify year, month, day, hour, and minute:4 numbers specify year, month, day, and hour:3 numbers specify year, month, and day:2 numbers specify year and month:', 'One and two digit years will be interpreted as 19xx:', 'new Date(dateString) creates a new date object from a date string:', 'JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).Now the time is: document.write(xxx.getTime()) milliseconds past January 01, 1970', 'new Date(milliseconds) creates a new date object as zero time plus milliseconds:01 January 1970 plus 100 000 000 000 milliseconds is approximately 03 March 1973:January 01 1970 minus 100 000 000 000 milliseconds is approximately October 31 1966:', 'When a Date object is created, a number of methods allow you to operate on \nit.Date methods allow you to get and set the year, month, day, hour, \nminute, second, and millisecond of date objects, using either local time or UTC \n(universal, or GMT) time.', 'JavaScript will (by default) output dates in full text string format:When you display a date object in HTML, it is automatically converted to a \nstring, with the toString() method.The toUTCString() method converts a date to a UTC string (a date display \nstandard).The toDateString() method converts a date to a more readable \nformat:The toISOString() method converts a Date object to a string, using the ISO standard format:']","['\nconst d = new Date();\n', '\nnew Date()new Date(year, month, day, hours, minutes, seconds, milliseconds)\n  new Date(milliseconds)\nnew Date(date string)\n', '\nconst d = new Date();\n', '\nconst d = new Date(2018, 11, 24, 10, 33, 30, 0);\n', '\nconst d = new Date(2018, 15, 24, 10, 33, 30);\n', '\nconst d = new Date(2019, 3, 24, 10, 33, 30);\n', '\nconst d = new Date(2018, 5, 35, 10, 33, 30);\n', '\nconst d = new Date(2018, 6, 5, 10, 33, 30);\n', '\nconst d = new Date(2018, 11, 24, 10, 33, 30);\n &&&&&& \nconst d = new Date(2018, 11, 24, 10, 33);\n &&&&&& \nconst d = new Date(2018, 11, 24, 10);\n &&&&&& \nconst d = new Date(2018, 11, 24);\n &&&&&& \nconst d = new Date(2018, 11);\n &&&&&& \nconst d = new Date(2018);\n', '\nconst d = new Date(99, 11, 24);\n &&&&&& \nconst d = new Date(9, 11, 24);\n', '\nconst d = new Date(""October 13, 2014 11:13:00"");\n', '\nconst d = new Date(0);\n &&&&&& \nconst d = new Date(100000000000);\n &&&&&& \nconst d = new Date(-100000000000);\n &&&&&& \nconst d = new Date(86400000);\n']",[''],[],[]
js||Date Formats,https://www.w3schools.com/js/js_date_formats.asp,,"['JavaScript Date Input', 'JavaScript Date Output', 'JavaScript ISO Dates', 'ISO Dates (Year and Month)', 'ISO Dates (Only Year)', 'ISO Dates (Date-Time)', 'Time Zones', 'JavaScript Short Dates.', 'WARNINGS !', 'JavaScript Long Dates.', 'Date Input - Parsing Dates']","['There are generally 3 types of JavaScript date input formats:', 'Independent of input format, JavaScript will (by default) output dates in full \ntext string format:', 'ISO 8601 is the international standard for the representation of dates and \ntimes.The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:', 'ISO dates can be written without specifying the day (YYYY-MM):', 'ISO dates can be written without month and day (YYYY):', 'ISO dates can be written with added hours, minutes, and seconds \n(YYYY-MM-DDTHH:MM:SSZ):Date and time is separated with a capital T.UTC time is defined with a capital letter Z.If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM \ninstead: ', ""When setting a date, without specifying the time zone, JavaScript will use \nthe browser's time zone.When getting a date, without specifying the time zone, the result is \nconverted to the browser's time zone.In other words: If a date/time is created in GMT (Greenwich Mean Time), the \ndate/time will be converted to CDT (Central US Daylight Time) if a user browses \nfrom central US."", 'Short dates are written with an ""MM/DD/YYYY"" syntax like this:', 'Long dates are most often written with a ""MMM DD YYYY"" syntax like this: Month and day can be in any order:And, month can be written in full (January), or abbreviated (Jan):Commas are ignored. Names are case insensitive:', 'If you have a valid date string, you can use the \nDate.parse() method to convert it to milliseconds.Date.parse() returns the number of milliseconds between the date and January \n1, 1970:You can then use the number of milliseconds to convert it to a date object:', '']","['\ndocument.write(new Date())\n\n', '\nconst d = new Date(""2015-03-25"");\n', '\nconst d = new Date(""2015-03"");\n', '\nconst d = new Date(""2015"");\n', '\nconst d = new Date(""2015-03-25T12:00:00Z"");\n &&&&&& \nconst d = new Date(""2015-03-25T12:00:00-06:30"");\n', '\nconst d = new Date(""03/25/2015"");', '\nconst d = new Date(""2015-3-25"");\n', '\nconst d = new Date(""2015/03/25"");', '\nconst d = new Date(""25-03-2015"");\n', '\nconst d = new Date(""Mar 25 2015"");\n &&&&&& \nconst d = new Date(""25 Mar 2015"");\n &&&&&& \nconst d = new Date(""January 25 2015"");\n &&&&&& \nconst d = new Date(""Jan 25 2015"");\n &&&&&& \nconst d = new Date(""JANUARY, 25, 2015"");\n', '']",[''],"['Type|||Example|||&&&ISO Date|||""2015-03-25""  (The International Standard)|||&&&Short Date|||""03/25/2015""|||&&&Long Date|||""Mar 25 2015"" or ""25 Mar 2015""|||&&&']",[]
js||Get Date Methods,https://www.w3schools.com/js/js_date_methods.asp,,"['The getTime() Method', 'The getFullYear() Method', 'The getMonth() Method', 'The getDate() Method', 'The getHours() Method', 'The getMinutes() Method', 'The getSeconds() Method', 'The getMilliseconds() Method', 'The getDay() Method', 'UTC Date Methods']","['These methods can be used for getting information from a date object:', 'The getTime() method returns the number of milliseconds since January 1, 1970:', 'The getFullYear() method returns the year of a date as a four digit number:', 'The getMonth() method returns the month of a date as a number (0-11):You can use an array of names, and getMonth() to return the month as a name:', 'The getDate() method returns the day of a date as a number (1-31):', 'The getHours() method returns the hours of a date as a number (0-23):', 'The getMinutes() method returns the minutes of a date as a number (0-59):', 'The getSeconds() method returns the seconds of a date as a number (0-59):', 'The getMilliseconds() method returns the milliseconds of a date as a number (0-999):', 'The getDay() method returns the weekday of a date as a number (0-6):You can use an array of names, and getDay() to return the weekday as a name:', 'UTC date methods are used for working with UTC dates (Universal Time Zone dates):']","['\nconst d = new Date();\nd.getTime();\n', '\nconst d = new Date();\nd.getFullYear();\n', '\nconst d = new Date();\nd.getMonth();\n &&&&&& \nconst months = [""January"", ""February"", ""March"", ""April"", ""May"",\n""June"", ""July"", ""August"", ""September"", ""October"",\n""November"", ""December""];\n\nconst d = new Date();\nlet month = months[d.getMonth()];\n', '\nconst d = new Date();\nd.getDate();\n', '\nconst d = new Date();\nd.getHours();\n', '\nconst d = new Date();\nd.getMinutes();\n', '\nconst d = new Date();\nd.getSeconds();\n', '\nconst d = new Date();\nd.getMilliseconds();\n', '\nconst d = new Date();\nd.getDay();\n &&&&&& \nconst days = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"",\n""Thursday"", ""Friday"", ""Saturday""];\n\nconst d = new Date();\nlet day = days[d.getDay()];\n', '']",[''],"['Method|||Description|||&&&getFullYear()|||Get the year as a four digit number (yyyy)|||&&&getMonth()|||Get the month as a number (0-11)|||&&&getDate()|||Get the day as a number (1-31)|||&&&getHours()|||Get the hour (0-23)|||&&&getMinutes()|||Get the minute (0-59)|||&&&getSeconds()|||Get the second (0-59)|||&&&getMilliseconds()|||Get the millisecond (0-999)|||&&&getTime()|||Get the time (milliseconds since January 1, 1970)|||&&&getDay()|||Get the weekday as a number (0-6)|||&&&Date.now()|||Get the time. ECMAScript 5.|||&&&', 'Method|||Description|||&&&getUTCDate()|||Same as getDate(), but returns the UTC date|||&&&getUTCDay()|||Same as getDay(), but returns the UTC day|||&&&getUTCFullYear()|||Same as getFullYear(), but returns the UTC year|||&&&getUTCHours()|||Same as getHours(), but returns the UTC hour|||&&&getUTCMilliseconds()|||Same as getMilliseconds(), but returns the UTC milliseconds|||&&&getUTCMinutes()|||Same as getMinutes(), but returns the UTC minutes|||&&&getUTCMonth()|||Same as getMonth(), but returns the UTC month|||&&&getUTCSeconds()|||Same as getSeconds(), but returns the UTC seconds|||&&&']",[]
js||Set Date Methods,https://www.w3schools.com/js/js_date_methods_set.asp,"Set Date methods let you set date values (years, 
months, days, hours, minutes, seconds, milliseconds) for a Date Object.","['Set Date Methods', 'The setFullYear() Method', 'The setMonth() Method', 'The setDate() Method', 'The setHours() Method', 'The setMinutes() Method', 'The setSeconds() Method', 'Compare Dates']","['Set Date methods are used for setting a part of a date:', 'The setFullYear() method sets the year of a date object. In this example to 2020:The setFullYear() method can optionally set month and day:', 'The setMonth() method sets the month of a date object (0-11):The setDate() method sets the day of a date object (1-31):The setDate() method can also be used to add days to a date:', 'The setHours() method sets the hours of a date object (0-23):', 'The setMinutes() method sets the minutes of a date object (0-59):', 'The setSeconds() method sets the seconds of a date object (0-59):', ""Dates can easily be compared.The following example compares today's date with January 14, 2100:"", '']","['\nconst d = new Date();\nd.setFullYear(2020);\n &&&&&& \nconst d = new Date();\nd.setFullYear(2020, 11, 3);\n', '\nconst d = new Date();\nd.setMonth(11);\n &&&&&& \nconst d = new Date();\nd.setDate(15);\n &&&&&& \nconst d = new Date();\nd.setDate(d.getDate() + 50);\n', '\nconst d = new Date();\nd.setHours(22);\n', '\nconst d = new Date();\nd.setMinutes(30);\n', '\nconst d = new Date();\nd.setSeconds(30);\n', '', '', '']",[''],"['Method|||Description|||&&&setDate()|||Set the day as a number (1-31)|||&&&setFullYear()|||Set the year (optionally month and day)|||&&&setHours()|||Set the hour (0-23)|||&&&setMilliseconds()|||Set the milliseconds (0-999)|||&&&setMinutes()|||Set the minutes (0-59)|||&&&setMonth()|||Set the month (0-11)|||&&&setSeconds()|||Set the seconds (0-59)|||&&&setTime()|||Set the time (milliseconds since January 1, 1970)|||&&&']",[]
js||Math Object,https://www.w3schools.com/js/js_math.asp,"The JavaScript Math object allows you to perform mathematical tasks on 
numbers.","['The Math Object', 'Math Properties (Constants)', 'Math Methods', 'Number to Integer', 'Math.round()', 'Math.ceil()', 'Math.floor()', 'Math.trunc()', 'Math.sign()', 'Math.pow()', 'Math.sqrt()', 'Math.abs()', 'Math.sin()', 'Math.cos()', 'Math.min() and Math.max()', 'Math.random()', 'The Math.log() Method', 'The Math.log2() Method', 'The Math.log10() Method', 'JavaScript Math Methods']","['Unlike other objects, the Math object has no constructor.The Math object is static.All methods and properties can be used without creating a Math object first.', 'The syntax for any Math property is : Math.property.JavaScript provides 8 mathematical constants that can be accessed as Math properties:', 'The syntax for Math any methods is : Math.method(number)', 'There are 4 common methods to round a number to an integer:', 'Math.round(x) returns the nearest integer:', 'Math.ceil(x) returns the value of x rounded up to its nearest integer:', 'Math.floor(x) returns the value of x rounded down to its nearest integer:', 'Math.trunc(x) returns the integer part of x:', 'Math.sign(x) returns if x is negative, null or positive:', 'Math.pow(x, y) returns the value of x to the power of y:', 'Math.sqrt(x) returns the square root of x:', 'Math.abs(x) returns the absolute (positive) value of x:', 'Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).If you want to use degrees instead of radians, you have to convert degrees to radians:Angle in radians = Angle in degrees x PI / 180.', 'Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).If you want to use degrees instead of radians, you have to convert degrees to radians:Angle in radians = Angle in degrees x PI / 180.', 'Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:', 'Math.random() returns a random number between 0 (inclusive), and 1 \n(exclusive):', 'Math.log(x) returns the natural logarithm of x.The natural logarithm returns the time needed to reach a certain level of growth:Math.E and Math.log() are twins.', 'Math.log2(x) returns the base 2 logarithm of x.', 'Math.log10(x) returns the base 10 logarithm of x.', '']","['\nMath.PI;\n', ""\nMath.E\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// returns Euler's number\nMath.PI\xa0\xa0\xa0\xa0\xa0\xa0\xa0// returns PI\nMath.SQRT2\xa0\xa0\xa0\xa0// returns the square root of 2\nMath.SQRT1_2\xa0\xa0// returns the square root of 1/2\nMath.LN2\xa0\xa0\xa0\xa0\xa0\xa0// returns the natural logarithm of 2\nMath.LN10\xa0\xa0\xa0\xa0\xa0// returns the natural logarithm of 10\nMath.LOG2E\xa0\xa0\xa0\xa0// returns base 2 logarithm of E\nMath.LOG10E\xa0\xa0\xa0// returns base 10 logarithm of E\n"", '\nMath.round(4.6);\n', '\nMath.round(4.5);\n', '\nMath.round(4.4);\n', '\nMath.ceil(4.9);\nMath.ceil(4.7);\nMath.ceil(4.4);\nMath.ceil(4.2);\nMath.ceil(-4.2);\n', '\nMath.floor(4.9);\nMath.floor(4.7);\nMath.floor(4.4);\nMath.floor(4.2);\nMath.floor(-4.2);\n', '\nMath.trunc(4.9);\nMath.trunc(4.7);\nMath.trunc(4.4);\nMath.trunc(4.2);\nMath.trunc(-4.2);\n', '\nMath.sign(-4);\nMath.sign(0);\nMath.sign(4);\n', '\nMath.pow(8, 2);\n', '\nMath.sqrt(64);\n', '\nMath.abs(-4.7);\n', '\nMath.sin(90 * Math.PI / 180);\xa0\xa0\xa0\xa0\xa0// returns 1 (the sine of 90 degrees)\n', '\nMath.cos(0 * Math.PI / 180);\xa0\xa0\xa0\xa0\xa0// returns 1 (the cos of 0 degrees)\n', '\nMath.min(0, 150, 30, 20, -8, -200);\n &&&&&& \nMath.max(0, 150, 30, 20, -8, -200);\n', '\nMath.random();\n', '\nMath.log(1);\n', '\nMath.log(2);\n', '\nMath.log(3);\n', '\nMath.log(10);\n', '\nMath.log2(8);\n', '\nMath.log10(1000);\n']",[''],"['Math.round(x)|||Returns x rounded to its nearest integer|||Math.ceil(x)|||Returns x rounded up to its nearest integer|||Math.floor(x)|||Returns x rounded down to its nearest integer|||Math.trunc(x)|||Returns the integer part of x (new in ES6)|||&&&Math.round(x)|||Returns x rounded to its nearest integer|||&&&Math.ceil(x)|||Returns x rounded up to its nearest integer|||Math.floor(x)|||Returns x rounded down to its nearest integer|||Math.trunc(x)|||Returns the integer part of x (new in ES6)|||&&&Math.ceil(x)|||Returns x rounded up to its nearest integer|||&&&Math.floor(x)|||Returns x rounded down to its nearest integer|||Math.trunc(x)|||Returns the integer part of x (new in ES6)|||&&&Math.floor(x)|||Returns x rounded down to its nearest integer|||&&&Math.trunc(x)|||Returns the integer part of x (new in ES6)|||&&&Math.trunc(x)|||Returns the integer part of x (new in ES6)|||&&&', 'Method|||Description|||&&&abs(x)|||Returns the absolute value of x|||&&&acos(x)|||Returns the arccosine of x, in radians|||&&&acosh(x)|||Returns the hyperbolic arccosine of x|||&&&asin(x)|||Returns the arcsine of x, in radians|||&&&asinh(x)|||Returns the hyperbolic arcsine of x|||&&&atan(x)|||Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians|||&&&atan2(y, x)|||Returns the arctangent of the quotient of its arguments|||&&&atanh(x)|||Returns the hyperbolic arctangent of x|||&&&cbrt(x)|||Returns the cubic root of x|||&&&ceil(x)|||Returns x, rounded upwards to the nearest integer|||&&&cos(x)|||Returns the cosine of x (x is in radians)|||&&&cosh(x)|||Returns the hyperbolic cosine of x|||&&&exp(x)|||Returns the value of Ex|||&&&floor(x)|||Returns x, rounded downwards to the nearest integer|||&&&log(x)|||Returns the natural logarithm (base E) of x|||&&&max(x, y, z, ..., n)|||Returns the number with the highest value|||&&&min(x, y, z, ..., n)|||Returns the number with the lowest value|||&&&pow(x, y)|||Returns the value of x to the power of y|||&&&random()|||Returns a random number between 0 and 1|||&&&round(x)|||Rounds x to the nearest integer|||&&&sign(x)|||Returns if x is negative, null or positive (-1, 0, 1)|||&&&sin(x)|||Returns the sine of x (x is in radians)|||&&&sinh(x)|||Returns the hyperbolic sine of x|||&&&sqrt(x)|||Returns the square root of x|||&&&tan(x)|||Returns the tangent of an angle|||&&&tanh(x)|||Returns the hyperbolic tangent of a number|||&&&trunc(x)|||Returns the integer part of a number (x)|||&&&']",[]
js||,https://www.w3schools.com/js/js_random.asp,,"['Math.random()', 'JavaScript Random Integers', 'A Proper Random Function']","['Math.random() returns a random number between 0 (inclusive),\xa0 and 1 \n(exclusive):', 'Math.random() used with Math.floor() can be used to return random integers.', 'As you can see from the examples above, it might be a good idea to create a proper random function\nto use for all random integer purposes.This JavaScript function always returns a random number between min (included) and \nmax (excluded):This JavaScript function always returns a random number between min and max (both included):']","['\n// Returns a random number:\nMath.random();\n', '\n// Returns a random integer from 0 to 9:\nMath.floor(Math.random() * 10);\n &&&&&& \n// Returns a random integer from 0 to 10:\nMath.floor(Math.random() * 11);\n &&&&&& \n// Returns a random integer from 0 to 99:\nMath.floor(Math.random() * 100);\n &&&&&& \n// Returns a random integer from 0 to 100:\nMath.floor(Math.random() * 101);\n &&&&&& \n// Returns a random integer from 1 to 10:\nMath.floor(Math.random() * 10) + 1;\n &&&&&& \n// Returns a random integer from 1 to 100:\nMath.floor(Math.random() * 100) + 1;\n', '']",[''],[],[]
js||Booleans,https://www.w3schools.com/js/js_booleans.asp,"A JavaScript Boolean represents one of two values: true or 
false.","['Boolean Values', 'The Boolean() Function', 'Comparisons and Conditions', 'Everything With a ""Value"" is True', 'Everything Without a ""Value"" is False', 'JavaScript Booleans as Objects']","['Very often, in programming, you will need a data type that can only have one \nof two values, likeFor this, JavaScript has a Boolean data type. It can only \ntake the values true or false.', 'You can use the Boolean() function to find out if an expression (or a variable) is \ntrue:Or even easier:', 'The chapter JS Comparisons gives a full overview of comparison operators.The chapter JS Conditions gives a full overview of conditional statements.Here are some examples:', 'Normally JavaScript booleans are primitive values created from literals:But booleans can also be defined as objects with the keyword new:', '', '']","['\nBoolean(10 > 9)\n &&&&&& \n(10 > 9)\n10 > 9\n', '\n100\n3.14\n-15\n""Hello""\n""false""\n7 + 1 + 3.14', '\nlet x = 0;\nBoolean(x);\n', '\nlet x = -0;\nBoolean(x);\n', '\nlet x = """";\nBoolean(x);\n', '\nlet x;\nBoolean(x);\n', '\nlet x = null;\nBoolean(x);\n', '\nlet x = false;\nBoolean(x);\n', '\nlet x = 10 / ""Hallo"";\nBoolean(x);\n']",['Boolean Values###&&&|||YES / NO|||ON / OFF|||TRUE / FALSE|||'],"['Operator|||Description|||Example|||&&&==|||equal to||| if (day == ""Monday"")|||&&&>|||greater than|||if (salary > 9000)|||&&&<|||less than||| if (age < 18)|||&&&']",[]
js||Comparison,https://www.w3schools.com/js/js_comparisons.asp,"Comparison and Logical operators are used to test for true or 
false.","['Comparison Operators', 'How Can it be Used', 'Logical Operators', 'Conditional (Ternary) Operator', 'Comparing Different Types']","['Comparison operators are used in logical statements to determine equality or difference between variables or values. Given that x = 5, the table below explains the comparison operators:', 'Comparison operators can be used in conditional statements to compare values \nand take action depending on the result:You will learn more about the use of conditional statements in the next chapter of this tutorial.', 'Logical operators are used to determine the logic between variables or values.Given that x = 6 and y = 3, the table below explains the logical operators: ', 'JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.If the variable age is a value below 18, the value of the variable voteable \nwill be ""Too young"", otherwise the value of voteable will be ""Old enough"".', 'Comparing data of different types may give unexpected results.When comparing a string with a number, JavaScript will convert the string to \na number when doing the comparison. An empty string converts to 0. A non-numeric \nstring converts to NaN which is always false.When comparing two strings, ""2"" will be greater than ""12"", because \n(alphabetically) 1 is less than 2.To secure a proper result, variables should be converted to the proper type \nbefore comparison:']","['\nif (age < 18) text = ""Too young to buy alcohol"";\n', '\nlet voteable = (age < 18) ? ""Too young"":""Old enough"";', '\nage = Number(age);\nif (isNaN(age)) {\n\xa0\xa0voteable = ""Input is not a number"";\n} else {\n  \xa0 voteable = (age < 18) ? ""Too young"" : ""Old enough"";\n}\n', '', '']",[''],"['Operator|||Description|||Comparing|||Returns|||Try it|||&&&==|||equal to|||x == 8|||false|||Try it »|||&&&x == 5|||true|||Try it »|||&&&x == ""5""|||true|||Try it »|||&&&===|||equal value and equal type|||x === 5|||true|||Try it »|||&&&x === ""5""|||false|||Try it »|||&&&!=|||not equal|||x != 8|||true|||Try it »|||&&&!==|||not equal value or not equal type|||x !== 5|||false|||\nTry it »|||&&&x !== ""5""|||true|||\nTry it »|||&&&x !== 8|||true|||\nTry it »|||&&&>|||greater than|||x > 8|||false|||Try it »|||&&&<|||less than|||x < 8|||true|||Try it »|||&&&>=|||greater than or equal to|||x >= 8|||false|||Try it »|||&&&<=|||less than or equal to|||x <= 8|||true|||Try it »|||&&&', 'Operator|||Description|||Example|||Try it|||&&&&&|||and||| (x < 10 && y > 1) is true|||Try it »|||&&&|||||or|||(x == 5 || y == 5) is false|||Try it »|||&&&!|||not||| !(x == y) is true|||Try it »|||&&&', 'Case|||Value|||Try|||&&&2 < 12|||true|||Try it »|||&&&2 < ""12""|||true|||Try it »|||&&&2 < ""John""|||false|||Try it »|||&&&2 > ""John""|||false|||Try it »|||&&&2 == ""John""|||false|||Try it »|||&&&""2"" < ""12""|||false|||Try it »|||&&&""2"" > ""12""|||true|||Try it »|||&&&""2"" == ""12""|||false|||Try it »|||&&&']",[]
js||,https://www.w3schools.com/js/js_if_else.asp,Conditional statements are used to perform different actions based on different conditions.,"['Conditional Statements', 'The if Statement', 'The else Statement', 'The else if\xa0Statement', 'More Examples']","['Very often when you write code, you want to perform different actions for different decisions.You can use conditional statements in your code to do this.In JavaScript we have the following conditional statements:', 'Use the if statement to specify a block of JavaScript code to \nbe executed if a condition is true.', 'Use the else statement to specify a block of code to be \nexecuted if the condition is \nfalse.', 'Use the else if statement to specify a new condition if the first condition is false.', 'Random link\nThis example will write a link to either W3Schools or to the World Wildlife \nFoundation (WWF). By using a random number, there is a 50% chance for each of the \nlinks.']","['\nif (hour < 18) {\n  \xa0 greeting = ""Good day"";\n }', '\n\n\nd=new Date();\nvar time=d.getHours();\nif (time<20)\n  {\n  document.write(""Good day"");\n  }\n\n\n', '\nif (hour < 18) {\n  \xa0\xa0greeting = ""Good day"";\n }\nelse {\n  \xa0 greeting = ""Good evening"";\n }\n', '\n\n\nd=new Date();\nvar time=d.getHours();\nif (time<20)\n  {\n  document.write(""Good day"");\n  }\nelse\n  {\n  document.write(""Good evening"");\n  }\n\n\n', '\nif (time < 10) {\n  \xa0 greeting = ""Good morning"";\n }\nelse if (time < 20)\xa0{\n  \xa0 greeting = ""Good day"";\n }\nelse\xa0{\n  \xa0 greeting = ""Good evening"";\n }\n', '\n\n\nd=new Date();\ntime=d.getHours();\nif (time<10)\n  {\n  document.write(""Good morning"");\n  }\nelse if (time<20)\n  {\n  document.write(""Good day"");\n  }\nelse\n  {\n  document.write(""Good evening"");\n  }\n\n\n']","['Conditional Statements###&&&|||Use if to specify a block of code to be executed, if a specified condition is true|||Use else to specify a block of code to be executed, if the same condition is |||  false|||Use else if to specify a new condition to test, if the first condition is false|||Use switch to specify many alternative blocks of code to be executed|||']",[],[]
js||Switch,https://www.w3schools.com/js/js_switch.asp,The switch statement is used to perform different actions based on different conditions.,"['The JavaScript Switch Statement', 'The break Keyword', 'The default Keyword', 'Common Code Blocks', 'Switching Details', 'Strict Comparison']","['Use the switch statement to select one of many code blocks to be executed.This is how it works:', 'When JavaScript reaches a break \nkeyword, it breaks out of the switch block.This will stop the execution inside the switch block.It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway.', 'The default keyword specifies the code to run if there is no \ncase match:The default case does not have to be the last case in a switch \nblock:', '\nSometimes you will want different \nswitch cases to use the same \ncode.\nIn this example case 4 and 5 share the same code block, and 0 and 6 share \nanother code block:', '\nIf multiple cases matches a case value, the first case is selected.\nIf no matching cases are found, the program continues to the default label.\nIf no default label is found, the program continues to the statement(s) after the switch.', 'Switch cases use strict comparison (===).The values must be of the same type to match.A strict comparison can only be true if the operands are of the same type.In this example there will be no match for x: ']","['\nswitch (new Date().getDay()) {\n\xa0\xa0case 0:\n\xa0 \xa0\xa0day = ""Sunday"";\n\xa0\xa0\xa0\xa0break;\n\xa0\xa0case 1:\n  \xa0 \xa0 day = ""Monday"";\n \xa0\xa0\xa0\xa0break;\n\xa0\xa0case 2:\n  \xa0 \xa0\xa0 day = ""Tuesday"";\n  \xa0\xa0\xa0 break;\n\xa0\xa0case 3:\n\xa0 \xa0 day = ""Wednesday"";\n  \xa0\xa0\xa0 break;\n\xa0\xa0case 4:\n  \xa0 \xa0 day = ""Thursday"";\n \xa0\xa0\xa0\xa0break;\n\xa0\xa0case 5:\n  \xa0 \xa0 day = ""Friday"";\n  \xa0\xa0\xa0 break;\n\xa0\xa0case 6:\n\xa0 \xa0\xa0day = ""Saturday"";\n}\n', '\n\n\nlet d=new Date().getDay();\nswitch (d) {\ncase 0:\n  x=""Sunday"";\n  break;\ncase 1:\n  x=""Monday"";\n  break;\ncase 2:\n  x=""Tuesday"";\n  break;\ncase 3:\n  x=""Wednesday"";\n  break;\ncase 4:\n  x=""Thursday"";\n  break;\ncase 5:\n  x=""Friday"";\n  break;\ncase 6:\n  x=""Saturday"";\n  break;\n}\ndocument.write(x);\n\n\n', '\nswitch (new Date().getDay()) {\n  \xa0\ncase 6:\n  \xa0 \xa0 text = ""Today is Saturday"";\n\xa0\xa0\xa0\xa0break; \n\xa0\xa0case 0:\n  \xa0\xa0\xa0 text = ""Today is Sunday"";\n  \xa0\xa0\xa0 break; \n  \xa0\ndefault: \n  \xa0\xa0\xa0 text = ""Looking forward to the Weekend"";}\n &&&&&& \n\n\nswitch (new Date().getDay()) {\ncase 6:\n     x= ""Today is Saturday"";\n    break;\ncase 0:\n    x = ""Today is Sunday"";\n    break;\ndefault:\n    x = ""Looking forward to the Weekend"";\n}\ndocument.write(x);\n\n\n &&&&&& \nswitch (new Date().getDay()) {\n\xa0\xa0default: \n    \xa0\xa0\xa0 text = ""Looking forward to the Weekend"";\xa0\xa0\xa0 \n  break;\xa0\xa0case 6:\n    \xa0 \xa0 text = ""Today is Saturday"";\n    \xa0\xa0\xa0 break; \n\xa0\xa0case 0:\n    \xa0\xa0\xa0 text = ""Today is Sunday"";\n  }\n', '\nswitch (new Date().getDay()) {\n\xa0\xa0case 4:\xa0\xa0case 5:\n\xa0\xa0\xa0 text = ""Soon it is Weekend"";\n  \xa0\xa0\xa0 break; \n\xa0\xa0case 0:\n\xa0\xa0case 6:\n  \xa0\xa0\xa0 text = ""It is Weekend"";\xa0\xa0\xa0\xa0break;\xa0\xa0default: \n\xa0\xa0\xa0\xa0text = ""Looking forward to the Weekend"";\n  }\n', '\n  let x = ""0"";switch (x) {\xa0\xa0case 0:\xa0\xa0\xa0\xa0text = ""Off"";\n  \xa0\xa0\xa0 break;\xa0\xa0case 1:\xa0\xa0\xa0 text = ""On"";\xa0\xa0\xa0\xa0break;\n  \xa0 default:\xa0\xa0\xa0 \n  text = ""No value found"";} ', '']","['The JavaScript Switch Statement###&&&|||The switch expression is evaluated once.|||The value of the expression is compared with the values of each case.|||If there is a match, the associated block of code is executed.|||If there is no match, the default code block is executed.|||']",[],[]
js||For Loop,https://www.w3schools.com/js/js_loop_for.asp,Loops can execute a block of code a number of times.,"['JavaScript Loops', 'Different Kinds of Loops', 'The For Loop', 'Statement 1', 'Statement 2', 'Statement 3', 'Loop Scope', 'For/Of and For/In Loops', 'While Loops']","['Loops are handy, if you want to run the same code over and over again, each \ntime with a different value.Often this is the case when working with arrays:', 'JavaScript supports different kinds of loops:', 'The for loop has the following syntax:Statement 1 is executed (one time) before the execution of the code block.Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.From the example above, you can read:Statement 1 sets a variable before the loop starts (let i = 0).Statement 2 defines the condition for the loop to run (i must be less than \n5).Statement 3 increases a value (i++) each time the code block in the loop has \nbeen executed.', ""Normally you will use statement 1 to initialize the variable used in the loop (let i = 0).This is not always the case, JavaScript doesn't care. Statement 1 is \noptional.You can initiate many values in statement 1 (separated by comma):And you can omit statement 1 (like when your values are set \nbefore the loop starts):Often statement 2 is used to evaluate the condition of the initial variable.This is not always the case, JavaScript doesn't care. Statement 2 is \nalso optional.If statement 2 returns true, the loop will start over again, if it returns false, the \nloop will end."", ""Often statement 3 increments the value of the initial variable.This is not always the case, JavaScript doesn't care, and statement 3 is \noptional.Statement 3 can do anything like negative increment (i--), positive \nincrement (i = i + 15), or anything else.Statement 3 can also be omitted (like when you increment your values inside the loop): "", 'Using var in a loop:Using let in a loop:In the first example, using var, the variable declared in \nthe loop redeclares the variable outside the loop. In the second example, using let, the variable declared in \nthe loop does not redeclare the variable outside the loop. When let is used to declare the i variable in a loop, the i \nvariable will only be visible within the loop. ', 'The for/in loop and the for/of loop are explained in the next chapter.', 'The while loop and the do/while are explained in the next chapters.', '']","['\n  text += cars[0] + ""<br>""; text += cars[1] + ""<br>""; \n text += cars[2] + ""<br>""; text += cars[3] + ""<br>""; \n text += cars[4] + ""<br>""; text += cars[5] + ""<br>"";\n', '\nfor (let i = 0; i < cars.length; i++) { \xa0\xa0text += cars[i] + ""<br>"";\n }', '\nfor (let i = 0; i < 5; i++) {\n \xa0 text += ""The number is "" + i + ""<br>"";\n}\n', '\nfor (let i = 0, len = cars.length, text = """"; i < len; i++) { \xa0 text += cars[i] + ""<br>"";\n } &&&&&& \nlet i = 2;\nlet len = cars.length;\nlet text = """";for (; i < len; i++) { \n  \xa0 text += cars[i] + ""<br>"";\n }', '\nlet i = 0;\nlet len = cars.length;\nlet text = """";\nfor (; i < len; ) { \xa0 text += cars[i] + ""<br>"";\n  \xa0\n i++;}', '\nvar i = 5;\n\nfor (var i = 0; i < 10; i++) {\n\xa0\xa0// some code}\n\n// Here i is 10\n &&&&&& \nlet i = 5;\n\nfor (let i = 0; i < 10; i++) {\n  \xa0 // some code}\n\n// Here i is 5\n', '', '', '']",['Different Kinds of Loops###&&&|||for - loops through a block of code a number of times|||for/in - loops through the properties of an object|||for/of - loops through the values of an |||  iterable object |||while - loops through a block of code while a specified condition is true|||do/while - also loops through a block of code while a specified condition is true|||'],[],[]
js||,https://www.w3schools.com/js/js_loop_forin.asp,,"['The For In Loop', 'Example Explained', 'For In Over Arrays', 'Array.forEach()']","['The JavaScript for in statement loops through the properties of an Object:', 'The JavaScript for in statement can also loop over the properties of an Array:', 'The forEach() method calls a function (a callback function) once for each array element.Note that the function takes 3 arguments:The example above uses only the value parameter. It can be rewritten to:', '']","['\nfor (key in object) {\n\xa0 // code block to be executed\n\n}\n &&&&&& \nconst person = {fname:""John"", lname:""Doe"", age:25};\nlet text = """";for (let x in person) {\n\xa0 text += person[x];\n}', '\nfor (variable in array) {\n\xa0\xa0code\n}\n &&&&&& \nconst numbers = [45, 4, 9, 16, 25];\nlet txt = """";\nfor (let x in numbers) {\n\xa0 txt += numbers[x]; \n}\n', '', '']",['Example Explained###Array.forEach()###&&&|||The for in loop iterates over a person object|||Each iteration returns a key (x)|||The key is used to access the value of the key|||The value of the key is person[x]|||&&&|||The item value|||The item index |||The array itself|||'],[],[]
js||,https://www.w3schools.com/js/js_loop_forof.asp,,"['The For Of Loop', 'Browser Support', 'Looping over an Array', 'Looping over a String', 'The While Loop']","['The JavaScript for of statement loops \nthrough the values of an iterable object.It lets you loop over iterable data structures \nsuch as Arrays, Strings, Maps, NodeLists, and more:variable - For every iteration the value of the next property is \nassigned to the variable. Variable can be declared with\nconst, let, or var.iterable - An object that has iterable properties.', 'For/of was added to JavaScript in 2015 (ES6)Safari 7 was the first browser to support for of:For/of is not supported in Internet Explorer.', 'The while loop and the do/while loop are explained in the next chapter.', '', '']","['\nfor (variable of iterable) {\n\xa0 // code block to be executed\n}\n', '\nconst cars = [""BMW"", ""Volvo"", ""Mini""];\nlet text = """";\nfor (let x of cars) {\n\xa0 text += x;\n}\n', '\nlet language = ""JavaScript"";\nlet text = """";\nfor (let x of language) {\n  text += x;\n}\n', '', '']",[''],['|||||||||||||||&&&Chrome 38|||Edge 12|||Firefox 51|||Safari 7|||Opera 25|||&&&Oct 2014|||Jul 2015|||Oct 2016|||Oct 2013|||Oct 2014|||&&&'],[]
js||While Loop,https://www.w3schools.com/js/js_loop_while.asp,"Loops can execute a block of code
as long as a specified condition is true.","['The While Loop', 'The Do While Loop', 'Comparing For and While']","['The while loop loops through a block of code as long as a specified condition is true.In the following example, the code in the loop will run, over and over again, as long as \na variable (i) is less than 10:', 'The do while loop is a variant of the while loop. This loop will \nexecute the code block once, before checking if the condition is true, then it will\nrepeat the loop as long as the condition is true.The example below uses a do while loop. The loop will always be \nexecuted at least once, even if the condition is false, because the code block \nis executed before the condition is tested:Do not forget to increase the variable used in the condition, otherwise \nthe loop will never end!', 'If you have read the previous chapter, about the for loop, you will discover that a while loop is \nmuch the same as a for loop, with statement 1 and statement 3 omitted.The loop in this example uses a for loop to collect the car \nnames from the cars array:The loop in this example uses a while loop to collect the \ncar names from the cars array:']","['\nwhile (i < 10) {\n  \xa0 text += ""The number is "" + i;\n  \xa0 i++;}\n', '\ndo {\n  \xa0 text += ""The number is "" + i;\n  \xa0 i++;\n }\nwhile (i < 10);', '\nconst cars = [""BMW"", ""Volvo"", ""Saab"", ""Ford""];\nlet i = 0;\nlet text = """";\nfor (;cars[i];) {\n  \xa0\xa0text += cars[i];\n  \xa0\ni++;\n}\n &&&&&& \nconst cars = [""BMW"", ""Volvo"", ""Saab"", ""Ford""];\nlet i = 0;\nlet text = """";\n\n while (cars[i]) {\n  \xa0 text += cars[i];\n  \xa0\ni++;\n}\n']",[''],[],[]
js||Break and Continue,https://www.w3schools.com/js/js_break.asp,"The break statement ""jumps out"" of a loop.","['The Break Statement', 'The Continue Statement', 'JavaScript Labels']","['The continue statement ""jumps over"" one iteration in \nthe loop.', 'You have already seen the break statement used in an earlier \nchapter of this tutorial. It was used to ""jump out"" of a switch() statement.The break statement can also be used to jump out of a loop:In the example above, the break statement ends the loop (""breaks"" the loop)\nwhen the loop counter (i) is 3.', 'The continue statement breaks one iteration (in the loop), if a specified \ncondition occurs, and continues with the next iteration in the loop.This example skips the value of 3: ', 'To label JavaScript statements you precede the statements with a label name \nand a colon:The break and the continue statements are the only JavaScript statements that \ncan ""jump out of"" a code block.Syntax:\nThe continue \nstatement (with or without a label reference) can only be used to skip one \nloop iteration.The break statement, without a label reference, can only be used to \njump out of a loop \nor a switch.With a label reference, the break statement can be used to jump out \nof any code block: ']","['\nfor (let i = 0; i < 10; i++) {\n  \xa0\nif (i === 3) { break; }\n  \xa0 text += ""The number is "" + i + ""<br>"";\n }', '\nfor (let i = 0; i < 10; i++) {\n  \xa0 if (i === 3) { continue; }\n  \xa0 text += ""The number is "" + i + ""<br>"";\n}\n', '\n label:statements &&&&&& \n break labelname; continue labelname; &&&&&& \nconst cars = [""BMW"", ""Volvo"", ""Saab"", ""Ford""];list: {\xa0 text += cars[0] + ""<br>""; \n  \xa0 text += cars[1] + ""<br>""; \xa0 break list;\xa0 text += cars[2] + ""<br>""; \n  \xa0 text += cars[3] + ""<br>""; }']",[''],[],[]
js||,https://www.w3schools.com/js/js_iterables.asp,,"['Iterating', 'Iterating Over a String', 'Iterating Over an Array', 'Iterating Over a Set', 'Iterating Over a Map']","['Iterating is easy to understand.It simply means looping over a sequence of elements.Here are some easy examples:', 'You can use a for..of loop to iterate over the elements of a string:', 'You can use a for..of loop to iterate over the elements of an Array:', 'You can use a for..of loop to iterate over the elements of a Set:You can use a for..of loop to iterate over the elements of a Map:', '']","['\nfor (variable of iterable) {\n\xa0 // code block to be executed\n}\n', '\nconst name = ""W3Schools"";\n\nfor (const x of name) {\n\xa0\xa0// code block to be executed\n}\n', '\nconst letters = [""a"",""b"",""c""];\n\nfor (const x of letters) {\n\xa0\xa0// code block to be executed\n}\n', '', '']",['Iterating###&&&|||Iterating over a String|||Iterating over an Array|||'],[],[]
js||,https://www.w3schools.com/js/js_sets.asp,,"['How to Create a Set', 'The new Set() Method', 'The add() Method', 'The forEach() Method', 'The values() Method']","['You can create a JavaScript Set by:', 'Pass an Array to the new Set() constructor:Create a Set and add values:Create a Set and add variables:', 'If you add equal elements, only the first will be saved:', 'The forEach() method invokes (calls) a function for each Set element:', 'The values() method returns a new iterator object containing all the values in a Set:Now you can use the Iterator object to access the elements:']","['\n// Create a Set\nconst letters = new Set([""a"",""b"",""c""]);\n &&&&&& \n// Create a Set\nconst letters = new Set();\n\n// Add Values to the Set\nletters.add(""a"");\nletters.add(""b"");\nletters.add(""c"");\n &&&&&& \n// Create a Set\nconst letters = new Set();\n\n// Create Variables\nconst a = ""a"";\nconst b = ""b"";\nconst c = ""c"";\n\n// Add Variables to the Set\nletters.add(a);\nletters.add(b);\nletters.add(c);\n', '\nletters.add(""d"");\nletters.add(""e"");\n &&&&&& \nletters.add(""a"");\nletters.add(""b"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\n', '\n// Create a Set\nconst letters = new Set([""a"",""b"",""c""]);\n\n// List all Elements\nlet text = """";\nletters.forEach (function(value) {\n\xa0\xa0text += value;\n})\n', '', '']",['How to Create a Set###&&&|||Passing an Array to new Set()|||Create a new Set and use add() to add values|||Create a new Set and use add() to add variables|||'],['Method|||Description|||&&&new Set()|||Creates a new Set|||&&&add()|||Adds a new element to the Set|||&&&delete()|||Removes an element from a Set|||&&&has()|||Returns true if a value exists in the Set|||&&&forEach()|||Invokes a callback for each element in the Set|||&&&values()|||Returns an iterator with all the values in a Set|||&&&Property|||Description|||&&&size|||Returns the number of elements in a Set|||&&&'],[]
js||,https://www.w3schools.com/js/js_maps.asp,,"['How to Create a Map', 'The new Map() Method', 'The set() Method', 'The get() Method', 'The size Property', 'The delete() Method', 'The has() Method', 'JavaScript Objects vs Maps', 'The forEach() Method', 'The entries() Method', 'Browser Support']","['You can create a JavaScript Map by:', 'You can create a Map by passing an Array to the new Map() constructor:', 'You can add elements to a Map with the set() method:The set() method can also be used to change existing Map values:', 'The get() method gets the value of a key in a Map:', 'The size property returns the number of elements in a Map:', 'The delete() method removes a Map element:', 'The has() method returns true if a key exists in a Map:', 'The forEach() method calls a function for each key/value pair in a Map:', 'The entries() method returns an iterator object with the [key, values] in a Map:', 'JavaScript Maps are supported in all browsers, except Internet Explorer:', '']","['\n// Create a Map\nconst fruits = new Map([\n\xa0 [""apples"", 500],\n\xa0 [""bananas"", 300],\n\xa0 [""oranges"", 200]\n]);\n', '\n// Create a Map\nconst fruits = new Map();\n\n// Set Map Values\nfruits.set(""apples"", 500);\nfruits.set(""bananas"", 300);\nfruits.set(""oranges"", 200);\n &&&&&& \nfruits.set(""apples"", 200);\n', '\nfruits.get(""apples"");\xa0\xa0\xa0\xa0// Returns 500\n', '\nfruits.size;\n', '\nfruits.delete(""apples"");\n', '\nfruits.has(""apples"");\n', '\nfruits.delete(""apples"");\nfruits.has(""apples"");\n', '\n// List all entries\nlet text = """";\nfruits.forEach (function(value, key) {\n\xa0\xa0text += key + \' = \' + value;\n})\n', '\n// List all entries\nlet text = """";\nfor (const x of fruits.entries()) {\n\xa0\xa0text += x;\n}\n', '', '']",['How to Create a Map###&&&|||Passing an Array to new Map()|||Create a Map and use Map.set()|||'],"['Method|||Description|||&&&new Map()|||Creates a new Map|||&&&set()|||Sets the value for a key in a Map|||&&&get()|||Gets the value for a key in a Map|||&&&delete()|||Removes a Map element specified by the key|||&&&has()|||Returns true if a key exists in a Map|||&&&forEach()|||Calls a function for each key/value pair in a Map|||&&&entries()|||Returns an iterator with the [key, value] pairs in a Map|||&&&Property|||Description|||&&&size|||Returns the number of elements in a Map|||&&&', '|||Object|||Map|||&&&Iterable|||&&&Size|||&&&Key Types|||&&&Key Order|||&&&Defaults|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&']",[]
js||,https://www.w3schools.com/js/js_typeof.asp,,"['The typeof Operator', 'Primitive Data', 'Complex Data', 'The Data Type of typeof', 'The constructor Property', 'Undefined', 'Empty Values ', 'Null', 'Difference Between Undefined and Null']","['In JavaScript there are 5 different data types that can contain values:There are 6 types of objects:And 2 data types that cannot contain values:', 'You can use the typeof operator to find the data type of a \nJavaScript variable.Please observe:', 'A primitive data value is a single simple data value with no additional \nproperties and methods.The typeof operator can return one of these primitive types:', 'The typeof operator can return one of two complex types:The typeof operator returns ""object"" for objects, arrays, and null.The typeof operator does not return ""object"" for functions.', 'The typeofoperator is not a variable. It is an operator. Operators ( + - * / \n) do not have any data type. But, the typeof operator always returns a string (containing \nthe type of the operand).', 'The constructor property returns the constructor \nfunction for all JavaScript variables.\nYou can check the constructor property to find out if an object is an Array \n(contains the word ""Array""):Or even simpler, you can check if the object is an Array function:\nYou can check the constructor property to find out if an object is a \nDate (contains the word ""Date""):Or even simpler, you can check if the object is a Date function:', 'In JavaScript, a variable without a value, has the value undefined. \nThe type is also undefined.Any variable can be emptied, by setting the value to undefined. \nThe type will also be undefined.', 'An empty value has nothing to do with undefined.An empty string has both a legal value and a type.', 'In JavaScript null is ""nothing"". It is supposed to be something that doesn\'t exist.Unfortunately, in JavaScript, the data type of null is an object.You can empty an object by setting it to null:You can also empty an object by setting it to undefined:', 'undefined and null are equal in value but different in type:']","['\ntypeof ""John""\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns ""string"" \ntypeof 3.14\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns ""number""\ntypeof NaN \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns ""number""\ntypeof false\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n// Returns ""boolean""\ntypeof [1,2,3,4]\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""object""\ntypeof {name:\'John\', age:34}\xa0\n// Returns ""object""typeof new Date()\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns ""object""typeof function () {} \xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Returns \n ""function""\ntypeof myCar\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns ""undefined"" *\ntypeof null\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns ""object""\n', '\ntypeof ""John""\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""string"" \ntypeof 3.14\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""number""\ntypeof true \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""boolean""typeof false\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n ""boolean""typeof x\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Returns ""undefined"" (if x has no value)', '\ntypeof {name:\'John\', age:34}\xa0// Returns ""object""\ntypeof [1,2,3,4]\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n// Returns ""object"" (not ""array"", see note below)\ntypeof null\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Returns \n  ""object""typeof function myFunc(){}\xa0\xa0 // Returns ""function""\n', '\n""John"".constructor\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns function String()\xa0 {[native code]}\n(3.14).constructor\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Returns function Number()\xa0 {[native code]}\nfalse.constructor\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n  function Boolean() {[native code]}\n[1,2,3,4].constructor\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n// Returns function Array()\xa0\xa0 {[native code]}\n{name:\'John\',age:34}.constructor\xa0\n// Returns function Object()\xa0 {[native code]}\n new Date().constructor\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n// Returns function Date()\xa0 \xa0 {[native code]}\nfunction () {}.constructor \xa0\xa0\xa0\xa0\xa0\xa0\xa0// Returns \n  function Function(){[native code]}\n &&&&&& \nfunction isArray(myArray) {\n  \xa0 return myArray.constructor.toString().indexOf(""Array"") > -1;\n}\n &&&&&& \nfunction isArray(myArray) {\n  \xa0 return myArray.constructor \n  === Array;\n}\n &&&&&& \nfunction isDate(myDate) {\n  \xa0 return myDate.constructor.toString().indexOf(""Date"") > -1;\n}\n &&&&&& \nfunction isDate(myDate) {\n  \xa0 return myDate.constructor === Date;\n}\n', '\nlet car;\xa0\xa0\xa0 // Value is undefined, \n    type is undefined &&&&&& \n    car = undefined;\xa0\xa0\xa0 // Value is undefined, \n    type is undefined', '\nlet car = """";\xa0\xa0\xa0 // \n    The value is \n    """", the typeof is ""string""', '\nlet person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};person = null;\xa0\xa0\xa0 // \n  Now value is null, \n    but type is still an object\n &&&&&& \nlet person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};person = undefined;\xa0\xa0 // \n  Now both value and type is undefined\n', '', '']",[''],[],[]
js||Type Conversion,https://www.w3schools.com/js/js_type_conversion.asp,,"['Converting Strings to Numbers', 'Number Methods', 'The Unary + Operator', 'Converting Numbers to Strings', 'More Methods', 'Converting Dates to Numbers', 'Converting Dates to Strings', 'Converting Booleans to Numbers', 'Converting Booleans to Strings', 'Automatic Type Conversion', 'Automatic String Conversion', 'JavaScript Type Conversion Table']","['The global method Number() can convert strings to numbers.Strings containing numbers (like ""3.14"") convert to numbers (like 3.14).Empty strings convert to 0.Anything else converts to NaN (Not a Number).', 'In the chapter Number Methods, you \nwill find more methods that can be used to convert strings to \nnumbers:', 'The unary + operator can be used to \nconvert a variable to a number:\nIf the \nvariable cannot be converted, it will still become a number, but with the value NaN \n(Not a Number):', 'The global method String() can convert numbers to strings.It can be used on any type of numbers, literals, variables, or expressions:The Number method toString() does the same.', 'In the chapter Number Methods, you \nwill find more methods that can be used to convert numbers to \nstrings:', 'The global method Number() can be used to convert dates to \nnumbers.The date method getTime()  does the same.', 'The global method String() can convert dates to \nstrings.The Date method toString() does the same.In the chapter Date Methods, you \nwill find more methods that can be used to convert dates to \nstrings:', 'The global method Number() can also convert booleans to numbers.', 'The global method String() can convert booleans to \nstrings.The Boolean method toString() does the same.', 'When JavaScript tries to operate on a ""wrong"" data type, it will try to \nconvert the value to a ""right"" type.The result is not always what you expect:', 'JavaScript automatically calls the variable\'s toString() function when you try \nto ""output"" an object or a variable:Numbers and booleans are also converted, but this is not very visible:', 'This table shows the result of converting different JavaScript values to Number, String, and Boolean:Values in quotes indicate string values.Red values indicate values (some) programmers might not expect.']","['\nNumber(""3.14"")\xa0\xa0\xa0 // returns 3.14\nNumber("" "")\xa0\xa0\xa0\xa0\xa0\xa0 // returns 0 \nNumber("""")\xa0\xa0\xa0\xa0\xa0\xa0\xa0  // returns 0\nNumber(""99 88"")\xa0\xa0 // returns NaN\n', '\nlet y = ""5"";\xa0\xa0\xa0\xa0\xa0\n// y is a string\nlet x = + y;\xa0\xa0\xa0\xa0\xa0 \n// x is a number\n &&&&&& \nlet y = ""John"";\xa0\xa0\n// y is a string\nlet x = + y;\xa0\xa0\xa0\xa0\xa0\xa0// x is a number (NaN)', '\n String(x)\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// returns a string from a number variable x\n String(123)\xa0\xa0 \xa0\xa0\xa0 // returns a string from a number literal 123\n String(100 + 23)\xa0 // returns a string from a number from an expression &&&&&& \nx.toString()(123).toString()(100 + 23).toString()', '\nd = new Date();Number(d)\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0 // returns 1404568027739\n', '\nd = new Date();d.getTime()\xa0\xa0\xa0 \xa0 \xa0 // returns 1404568027739\n', '\n  String(Date())\xa0 // returns ""Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)"" &&&&&& \n  Date().toString()\xa0 // returns ""Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)""', '\nNumber(false)\xa0\xa0\xa0\xa0 // returns 0\nNumber(true)\xa0 \xa0\xa0\xa0 // returns 1\n', '\nString(false)\xa0\xa0\xa0 \xa0\xa0// returns ""false""\nString(true)\xa0\xa0\xa0\xa0 \xa0 // returns ""true""\n', '\nfalse.toString()\xa0\xa0\xa0// returns ""false""\n  true.toString()\xa0 \xa0 // returns ""true""\n', '\n 5 + null\xa0\xa0\xa0 // returns 5\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 because null is converted to 0""5"" + null\xa0 // returns ""5null""\xa0\xa0 because null is converted to ""null""""5"" + 2\xa0\xa0\xa0\xa0 // returns \n    ""52""\xa0\xa0\xa0\xa0\xa0 because 2 is converted to ""2""\n ""5"" - 2\xa0\xa0\xa0\xa0 // returns 3\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 because ""5"" is converted to 5""5"" * ""2""\xa0\xa0 // returns \n    10\xa0\xa0\xa0\xa0\xa0\xa0\xa0 because ""5"" and ""2"" are \n    converted to 5 and 2', '\ndocument.getElementById(""demo"").innerHTML = myVar;\n// if myVar = {name:""Fjohn""}\xa0 // toString converts to ""[object Object]""\n// if myVar = [1,2,3,4]\xa0\xa0\xa0\xa0\xa0\xa0 // toString converts to ""1,2,3,4""\n// if myVar = new Date()\xa0\xa0\xa0\xa0\xa0 // toString converts to ""Fri Jul 18 2014 09:08:55 GMT+0200""\n', '\n// if myVar = 123\xa0\xa0\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0 // toString converts to ""123""\n// if myVar = true \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // toString converts to ""true""\n// if myVar = false\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // toString converts to ""false""\n']",[''],"['Method|||Description|||&&&Number()|||Returns a number, converted from its argument|||&&&parseFloat()|||Parses a string and returns a floating point number|||parseInt()|||Parses a string and returns an integer|||&&&parseFloat()|||Parses a string and returns a floating point number|||&&&parseInt()|||Parses a string and returns an integer|||&&&', 'Method|||Description|||&&&toExponential()|||Returns a string, with a number rounded and written using exponential notation.|||&&&toFixed()|||Returns a string, with a number rounded and written with a specified number of decimals.|||&&&toPrecision()|||Returns a string, with a number written with a specified length|||&&&', 'Method|||Description|||&&&getDate()|||Get the day as a number (1-31)|||&&&getDay()|||Get the weekday a number (0-6)|||&&&getFullYear()|||Get the four digit year (yyyy)|||&&&getHours()|||Get the hour (0-23)|||&&&getMilliseconds()|||Get the milliseconds (0-999)|||&&&getMinutes()|||Get the minutes (0-59)|||&&&getMonth()|||Get the month (0-11)|||&&&getSeconds()|||Get the seconds (0-59)|||&&&getTime()|||Get the time (milliseconds since January 1, 1970)|||&&&', 'OriginalValue|||Convertedto Number|||Convertedto String|||Convertedto Boolean|||Try it|||&&&false|||0|||""false""|||false|||Try it »|||&&&true|||1|||""true""|||true|||Try it »|||&&&0|||0|||""0""|||false|||Try it »|||&&&1|||1|||""1""|||true|||Try it »|||&&&""0""|||0|||""0""|||true|||Try it »|||&&&""000""|||0|||""000""|||true|||Try it »|||&&&""1""|||1|||""1""|||true|||Try it »|||&&&NaN|||NaN|||""NaN""|||false|||Try it »|||&&&Infinity|||Infinity|||""Infinity""|||true|||Try it »|||&&&-Infinity|||-Infinity|||""-Infinity""|||true|||Try it »|||&&&""""|||0|||""""|||false|||Try it »|||&&&""20""|||20|||""20""|||true|||Try it »|||&&&""twenty""|||NaN|||""twenty""|||true|||Try it »|||&&&[ ]|||0|||""""|||true|||Try it »|||&&&[20]|||20|||""20""|||true|||Try it »|||&&&[10,20]|||NaN|||""10,20""|||true|||Try it »|||&&&[""twenty""]|||NaN|||""twenty""|||true|||Try it »|||&&&[""ten"",""twenty""]|||NaN|||""ten,twenty""|||true|||Try it »|||&&&function(){}|||NaN|||""function(){}""|||true|||Try it »|||&&&{ }|||NaN|||""[object Object]""|||true|||Try it »|||&&&null|||0|||""null""|||false|||Try it »|||&&&undefined|||NaN|||""undefined""|||false|||Try it »|||&&&']",[]
js||Bitwise Operations,https://www.w3schools.com/js/js_bitwise.asp,,"['JavaScript Bitwise Operators', 'Examples', 'JavaScript Uses 32 bits Bitwise Operands', 'Bitwise AND', 'Bitwise OR', 'Bitwise XOR', 'JavaScript Bitwise AND (&)', 'JavaScript Bitwise OR (|)', 'JavaScript Bitwise XOR (^)', 'JavaScript Bitwise NOT (~)', 'JavaScript (Zero Fill) Bitwise Left Shift (<<)', 'JavaScript (Sign Preserving) Bitwise Right Shift (>>)', 'JavaScript (Zero Fill) Right Shift (>>>)', 'Binary Numbers', 'Converting Decimal to Binary', 'Converting Binary to Decimal']","['JavaScript stores numbers as 64 bits floating point numbers, but all bitwise \noperations are performed on 32 bits binary numbers. Before a bitwise operation is performed, JavaScript converts numbers to 32 bits \nsigned integers.After the bitwise operation is performed, the result is converted back to 64 bits JavaScript \nnumbers.', 'When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.', 'When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits are 1:', 'When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:', 'Bitwise AND returns 1 only if both bits are 1:', 'Bitwise OR returns 1 if one of the bits are 1:', 'Bitwise XOR returns 1 if the bits are different:', 'This is a zero fill left shift. One or more zero bits are pushed in from the right,\nand the leftmost bits fall off:', 'This is a sign preserving right shift. Copies of the leftmost bit are pushed \nin from the left, and the rightmost bits fall off:', 'This is a zero fill right shift. One or more zero bits are pushed in from the left,\nand the rightmost bits fall off:', ""Binary numbers with only one bit set is easy to understand:Setting a few more bits reveals the binary pattern:JavaScript binary numbers are stored in two's complement format.This means that a negative number is the bitwise NOT of the number plus 1:"", '', '', '', '', '']","['\nlet x = 5 & 1;\n', '\nlet x = 5 | 1;\n', '\nlet x = 5 ^ 1;\n', '\nlet x = ~5;\n', '\nlet x = 5 << 1;\n', '\nlet x = -5 >> 1;\n', '\nlet x = 5 >>> 1;\n', '\nfunction dec2bin(dec){\n\xa0\xa0return (dec >>> 0).toString(2);\n}\n', '', '', '', '', '', '', '', '']",[''],"['Operator|||Name|||Description|||&&&&|||AND|||Sets each bit to 1 if both bits are 1|||&&&||||OR|||Sets each bit to 1 if one of two bits is 1|||&&&^|||XOR|||Sets each bit to 1 if only one of two bits is 1|||&&&~|||NOT|||Inverts all the bits|||&&&<<|||Zero fill left shift|||Shifts left by pushing zeros in from the right and let the leftmost bits fall off|||&&&>>|||Signed right shift|||Shifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits \nfall off|||&&&>>>|||Zero fill right shift|||Shifts right by pushing zeros in from the left, and let the rightmost bits fall off|||&&&', 'Operation|||Result|||Same as|||Result|||&&&5 & 1|||1|||0101 & 0001|||\xa00001|||&&&5 | 1|||5|||0101 | 0001|||\xa00101|||&&&~ 5|||10|||\xa0~0101|||\xa01010|||&&&5 << 1|||10|||0101 << 1|||\xa01010|||&&&5 ^ 1|||4|||0101 ^ 0001|||\xa00100|||&&&5 >> 1|||2|||0101 >> 1|||\xa00010|||&&&5 >>> 1|||2|||0101 >>> 1|||\xa00010|||&&&', 'Operation|||Result|||&&&0 & 0|||0|||&&&0 & 1|||0|||&&&1 & 0|||0|||&&&1 & 1|||1|||&&&', 'Operation|||Result|||&&&1111 & 0000|||0000|||&&&1111 & 0001|||0001|||&&&1111 & 0010|||0010|||&&&1111 & 0100|||0100|||&&&', 'Operation|||Result|||&&&0 | 0|||0|||&&&0 | 1|||1\xa0|||&&&1 | 0|||1|||&&&1 | 1|||1|||&&&', 'Operation|||Result|||&&&1111 | 0000|||1111|||&&&1111 | 0001|||1111|||&&&1111 | 0010|||1111|||&&&1111 | 0100|||1111|||&&&', 'Operation|||Result|||&&&0 ^ 0|||0|||&&&0 ^ 1|||1\xa0|||&&&1 ^ 0|||1|||&&&1 ^ 1|||0\xa0|||&&&', 'Operation|||Result|||&&&1111 ^ 0000|||1111|||&&&1111 ^ 0001|||1110|||&&&1111 ^ 0010|||1101|||&&&1111 ^ 0100|||1011|||&&&', 'Decimal|||Binary|||&&&5|||00000000000000000000000000000101|||&&&1|||00000000000000000000000000000001|||&&&5 & 1|||00000000000000000000000000000001 (1)|||&&&', 'Decimal|||Binary|||&&&5|||00000000000000000000000000000101|||&&&1|||00000000000000000000000000000001|||&&&5 | 1|||00000000000000000000000000000101 (5)|||&&&', 'Decimal|||Binary|||&&&5|||00000000000000000000000000000101|||&&&1|||00000000000000000000000000000001|||&&&5 ^ 1|||00000000000000000000000000000100 (4)|||&&&', 'Decimal|||Binary|||&&&5|||00000000000000000000000000000101|||&&&~5|||11111111111111111111111111111010 (-6)|||&&&', 'Decimal|||Binary|||&&&5|||00000000000000000000000000000101|||&&&5 << 1|||00000000000000000000000000001010 (10)|||&&&', 'Decimal|||Binary|||&&&-5|||11111111111111111111111111111011|||&&&-5 >> 1|||11111111111111111111111111111101 (-3)|||&&&', 'Decimal|||Binary|||&&&5|||00000000000000000000000000000101|||&&&5 >>> 1|||00000000000000000000000000000010 (2)|||&&&', 'Binary Representation|||Decimal value|||&&&00000000000000000000000000000001|||1|||&&&00000000000000000000000000000010|||2|||&&&00000000000000000000000000000100|||4|||&&&00000000000000000000000000001000|||8|||&&&00000000000000000000000000010000|||16|||&&&00000000000000000000000000100000|||32|||&&&00000000000000000000000001000000|||64|||&&&', 'Binary Representation|||Decimal value|||&&&00000000000000000000000000000101|||5 (4 + 1)|||&&&00000000000000000000000000001101|||13 (8 + 4 + 1)|||&&&00000000000000000000000000101101|||45 (32 + 8 + 4 + 1)|||&&&', 'Binary Representation|||Decimal value|||&&&00000000000000000000000000000101|||5|||&&&11111111111111111111111111111011|||-5|||&&&00000000000000000000000000000110|||6|||&&&11111111111111111111111111111010|||-6|||&&&00000000000000000000000000101000|||40|||&&&11111111111111111111111111011000|||-40|||&&&']",[]
js||Regular Expressions,https://www.w3schools.com/js/js_regexp.asp,"A regular expression is a sequence of characters that forms a 
search pattern.","['What Is a Regular Expression?', 'Syntax', 'Using String Methods', 'Using String search() With a String', 'Using String search() With a Regular Expression', 'Using String replace() With a String', 'Use String replace() With a Regular Expression', 'Did You Notice?', 'Regular Expression Modifiers', 'Regular Expression Patterns', 'Using the RegExp Object', 'Using test()', 'Using exec()', 'Complete RegExp Reference']","['The search pattern can be used for text search and text replace \noperations. ', 'A regular expression is a sequence of characters that forms a search \npattern.When you search for data in a text, you can use this search pattern to describe what you are searching for.A regular expression can be a single character, or a more complicated pattern.Regular expressions can be used to perform all types of text search \nand text replace operations.Example explained:/w3schools/i\xa0 is a regular expression.w3schools\xa0 is a pattern (to be used in a search).i\xa0 is a modifier (modifies the search to be case-insensitive).', 'In JavaScript, regular expressions are often used with the two string \nmethods: search() and replace().The search() method uses an expression to search for a \nmatch, and returns the position of the match.The replace() method returns a modified string where the \npattern is replaced.', 'The search() method searches a string for a specified value and returns the position of the match:', 'The replace() method replaces a specified value with another value in a string:', 'Modifiers can be used to perform case-insensitive more global searches:Brackets are used to find a range of characters:Metacharacters are characters with a special meaning:Quantifiers define quantities:', 'In JavaScript, the RegExp object is a regular expression object with \npredefined properties and methods.', 'The test() method is a RegExp expression method.It searches a string for a pattern, and returns true \nor false, depending on the result.The following example searches a string for the character ""e"":', 'The exec() method is a RegExp expression method.It searches a string for a specified pattern, and returns the found text as \nan object. If no match is found, it returns an empty (null) object.The following example searches a string for the character ""e"":', 'For a complete reference, go to our Complete \nJavaScript RegExp Reference.The reference contains descriptions and examples of all RegExp \nproperties and methods.', '', '', '', '']","['\n/w3schools/i;', '\nlet text = ""Visit W3Schools!"";\nlet n = text.search(""W3Schools"");\n', '\n6\n', '\nlet text = ""Visit W3Schools"";\nlet n = text.search(/w3schools/i);\n', '\n6\n', '\nlet text = ""Visit Microsoft!"";\nlet result = text.replace(""Microsoft"", ""W3Schools"");\n', '\nlet text = ""Visit Microsoft!"";\nlet result = text.replace(/microsoft/i, ""W3Schools"");\n', '\nVisit W3Schools!', '\nconst pattern = /e/;\npattern.test(""The best things in life are free!"");\n', '\ntrue\n', '\n/e/.test(""The best things in life are free!"");', '\n /e/.exec(""The best things in life are free!"");\n', '', '']",[''],"['Modifier|||Description|||Try it|||&&&i|||Perform case-insensitive matching|||Try it »|||&&&g|||Perform a global match (find all matches rather than stopping after the first match)|||Try it »|||&&&m|||Perform multiline matching|||Try it »|||&&&', 'Expression|||Description|||Try it|||&&&[abc]|||Find any of the characters between the brackets|||Try it »|||[0-9]|||Find any of the digits between the brackets|||Try it »|||(x|y)|||Find any of the alternatives separated with ||||Try it »|||&&&[0-9]|||Find any of the digits between the brackets|||Try it »|||(x|y)|||Find any of the alternatives separated with ||||Try it »|||&&&(x|y)|||Find any of the alternatives separated with ||||Try it »|||&&&', 'Metacharacter|||Description|||Try it|||&&&\\d|||Find a digit|||Try it »|||&&&\\s|||Find a whitespace character|||Try it »|||&&&\\b|||Find a match at the beginning of a word like this: \\bWORD, or at the end of a word \n    like this: WORD\\b|||\nTry it »\n\nTry it »\n|||&&&\\uxxxx|||Find the Unicode character specified by the hexadecimal number xxxx|||Try it »|||&&&', 'Quantifier|||Description|||Try it|||&&&n+|||Matches any string that contains at least one n|||Try it »|||&&&n*|||Matches any string that contains zero or more occurrences of n|||Try it »|||&&&n?|||Matches any string that contains zero or one occurrences of n|||Try it »|||&&&']",[]
js||,https://www.w3schools.com/js/js_errors.asp,,"['Throw, and Try...Catch...Finally', 'Errors Will Happen!', 'JavaScript try and catch', 'JavaScript Throws Errors', 'The throw Statement', 'Input Validation Example', 'HTML Validation', 'The finally Statement', 'The Error Object', 'Error Object Properties', 'Error Name Values', 'Eval Error', 'Range Error', 'Reference Error', 'Syntax Error', 'Type Error', 'URI (Uniform Resource Identifier) Error', 'Non-Standard Error Object Properties', 'Complete Error Reference']","['The try statement defines a code block to run (to try).The catch statement defines a code block to handle any error.The finally statement defines a code block to run regardless of the result.The throw statement defines a custom error.', 'When executing JavaScript code, different errors can \noccur. Errors can be coding errors made by the programmer, errors due to wrong \ninput, and other unforeseeable things.', 'The try statement allows you to define a block of code to be \ntested for errors while it is being executed.The catch statement allows you to define a block of code to \nbe executed, if an error occurs in the try block.The JavaScript statements try and catch \ncome in pairs:', 'When an error occurs, JavaScript will \nnormally stop and generate an error message.The technical term for this is: JavaScript will throw an \nexception (throw an error).', 'The throw statement allows you to create a custom error.Technically you can throw an exception (throw an error).The exception can be a JavaScript String, a Number, a Boolean or an Object:If you use throw together with try and \ncatch, you can control program \nflow and generate custom error messages.', 'This example examines input. If the value is wrong, \nan exception (err) is thrown.The exception (err) is caught by the catch statement and a custom error message is displayed:', 'The code above is just an example.Modern browsers will often use a combination of JavaScript and built-in HTML \nvalidation, using predefined validation rules defined in HTML attributes: You can read more about forms validation in a later chapter of this tutorial.', 'The finally statement lets you execute code, after try and \ncatch, regardless of the result:', 'JavaScript has a built in error object that provides error information when \nan error occurs. The error object provides two useful properties: name and message.', 'Six different values can be returned by the error name property:The six different values are described below.', 'An EvalError indicates an error in the eval() function.', 'A RangeError is thrown if you use a number that is outside \nthe range of legal values.For example: You cannot set the number of significant digits of a number to \n500. ', 'A ReferenceError is thrown if you use (reference) a variable \nthat has not been declared:', 'A SyntaxError is thrown if you try to evaluate code with a \nsyntax error.', 'A TypeError is thrown if you use a value that is outside the \nrange of expected types:', 'A URIError is thrown if you use illegal characters in a URI function:', 'For a complete reference of the Error object, go to our Complete \nJavaScript Error Reference.', '', '']","['\n <p id=""demo""></p><script>\ntry {\xa0 adddlert(""Welcome guest!"");}catch(err) {\xa0 \ndocument.getElementById(""demo"").innerHTML = err.message;}</script>', '\ntry {\n  \xa0 Block of code to try\n}\ncatch(err) {\n  \xa0 Block of code to handle errors\n}\n', '\nthrow ""Too big"";\xa0\xa0\xa0 // throw a text\nthrow 500;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // throw a number', '\n<!DOCTYPE html><html><body><p>Please input a number between \n5 and 10:</p><input id=""demo"" type=""text""><button type=""button"" \nonclick=""myFunction()"">Test Input</button><p id=""p01""></p>\n<script>function myFunction() {\xa0\xa0const message = \ndocument.getElementById(""p01"");\xa0\xa0message.innerHTML = """";\n\xa0\xa0let x = \ndocument.getElementById(""demo"").value;\xa0 \ntry { \xa0\xa0\xa0\xa0if(x == """") throw ""empty"";\n  \xa0\xa0\xa0 \n if(isNaN(x)) throw ""not a number"";\xa0\xa0\xa0 \n x = Number(x);\xa0\xa0\xa0 if(x < 5) throw \n ""too low"";\xa0\xa0\xa0 if(x > 10) throw ""too \n high"";\xa0\xa0}\xa0\xa0catch(err) {\xa0\xa0\xa0 message.innerHTML = \n""Input is "" + err;\xa0\xa0}}</script></body></html>\n', '\n <input id=""demo"" type=""number"" min=""5"" max=""10"" step=""1"">', '\ntry {\n  \xa0 Block of code to try\n}\ncatch(err) {\n  \xa0 Block of code to handle errors\n}\nfinally {\xa0 Block of code to be executed regardless of the try / catch result\n} &&&&&& \n function myFunction() {\xa0 const message = \ndocument.getElementById(""p01"");\xa0 message.innerHTML = """";\n\xa0\xa0let x = \ndocument.getElementById(""demo"").value;\xa0 \ntry { \xa0\xa0\xa0 \nif(x == """") throw ""is empty"";\xa0\xa0\xa0 if(isNaN(x)) \nthrow ""is not a number"";\xa0\xa0\xa0 \n    x = Number(x);\xa0\xa0\xa0 if(x > \n10) throw ""is too high"";\xa0\xa0\xa0 if(x < \n5) throw ""is too low"";\xa0\xa0}\xa0\xa0catch(err) \n{\xa0\xa0\xa0 message.innerHTML = ""Error: "" + \nerr + ""."";\xa0\xa0}\xa0\xa0finally {\xa0\xa0\xa0\xa0document.getElementById(""demo"").value = """";\n  \xa0\xa0}}', '\nlet num = 1;\ntry {\n  \xa0 num.toPrecision(500);\xa0\xa0 // A number cannot have 500 \n significant digits\n}\ncatch(err) {\n  \xa0 document.getElementById(""demo"").innerHTML = err.name;\n}\n', '\nlet x = 5;try {\n\xa0\xa0x = y + 1;\xa0\xa0 // y cannot be used (referenced)\n}\ncatch(err) {\n  \xa0 document.getElementById(""demo"").innerHTML = err.name;\n}\n', '\n try {\xa0 eval(""alert(\'Hello)"");\xa0\xa0 // \n Missing \' will produce an error}catch(err) {\xa0\xa0document.getElementById(""demo"").innerHTML = err.name;} ', '\nlet num = 1;\ntry {\n\xa0\xa0num.toUpperCase();\xa0\xa0 // You cannot convert a number \n to upper case\n}\ncatch(err) {\n\xa0\xa0document.getElementById(""demo"").innerHTML = err.name;\n}\n', '\ntry {\n  \xa0 decodeURI(""%%%"");\xa0\xa0 // You cannot URI decode \n  percent signs\n}\ncatch(err) {\n\xa0\xa0document.getElementById(""demo"").innerHTML = err.name;\n}\n', '', '', '', '', '', '', '', '']",[''],"['Property|||Description|||&&&name|||Sets or returns an error name|||&&&message|||Sets or returns an error message (a string)|||&&&', 'Error Name|||Description|||&&&EvalError|||An error has occurred in the eval() function|||&&&RangeError|||A number ""out of range"" has occurred|||&&&ReferenceError|||An illegal reference has occurred|||&&&SyntaxError|||A syntax error has occurred|||&&&TypeError|||A type error has occurred|||&&&URIError|||An error in encodeURI() has occurred|||&&&']",[]
js||Scope,https://www.w3schools.com/js/js_scope.asp,Scope determines the accessibility (visibility) of variables.,"['Local Scope', 'Function Scope', 'Global JavaScript Variables', 'Global Scope', 'JavaScript Variables', 'Automatically Global', 'Strict Mode', 'Global Variables in HTML', 'Warning', 'The Lifetime of JavaScript Variables', 'Function Arguments']","['Variables declared within a JavaScript function, become \nLOCAL to \nthe function.Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.Local variables are created when a function starts, and deleted when the function is completed.', 'JavaScript has function scope: Each function creates a new scope. Variables defined inside a function are not accessible (visible) from outside the \nfunction.Variables declared with var, let\nand const are \nquite similar when declared inside a function.They all have Function Scope:', 'A variable declared outside a function, becomes GLOBAL.', 'Variables declared Globally (outside any function) have\nGlobal Scope.Global variables can be accessed from anywhere in a JavaScript program. Variables declared with var, let\nand const are \nquite similar when declared outside a block.They all have Global Scope:', 'In JavaScript, objects and functions are also variables.', 'If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.This code example will declare a global variable carName, even if \nthe value is assigned inside a function.', 'All modern browsers support running JavaScript in ""Strict Mode"".You will learn more about how to use strict mode in a later chapter of this tutorial.', 'With JavaScript, the global scope is the JavaScript environment. In HTML, the global scope is the window object.Global variables defined with the var keyword belong to the window object:Global variables defined with the let keyword do not belong to the window object:', 'The lifetime of a JavaScript variable starts when it is declared.Function (local) variables are deleted when the function is completed.In a web browser, global variables are deleted when you close the browser \nwindow (or tab).', 'Function arguments (parameters) work as local variables inside functions.', '']","['\n{ \n\xa0\xa0let x = 2;\n  }\n// x can NOT be used here &&&&&& \n{ \n\xa0\xa0var x = 2; \n  }\n// x CAN be used here', '\n// code here can NOT use carNamefunction myFunction() {\n\xa0\xa0let carName = ""Volvo"";\xa0 // code here CAN use carName}\n// code here can NOT use carName\n', '\nfunction myFunction() {\n  \xa0 var carName = ""Volvo"";\xa0\xa0 \n  // Function Scope\n}\n', '\nfunction myFunction() {\n  \xa0 let carName = ""Volvo"";\xa0\xa0 // \n  Function Scope\n}\n', '\nfunction myFunction() {\n  \xa0 const carName = ""Volvo"";\xa0\xa0 // \n  Function Scope\n}\n', '\nlet carName = ""Volvo"";\n// code here can use carName\nfunction myFunction() {\n// code here can also use carName }\n', '\nvar x = 2;\xa0\xa0\xa0\xa0\xa0\xa0 \n  // Global scope', '\n  let x = 2;\xa0\xa0\xa0\xa0\xa0\xa0 // \n  Global scope', '\n  const x = 2;\xa0\xa0\xa0\xa0\xa0\xa0 // \n  Global scope', '\n myFunction();// code here can use carName\n function myFunction() {\n  \xa0 carName = ""Volvo"";}', '\n var carName = ""Volvo"";// code here \n can use window.carName &&&&&& \nlet carName = ""Volvo"";\n// code here can not use window.carName\n']",[''],[],[]
js||Hoisting,https://www.w3schools.com/js/js_hoisting.asp,"Hoisting is JavaScript's default behavior of moving declarations to the 
top.","['JavaScript Declarations are Hoisted', 'The let and const Keywords']","['In JavaScript, a variable can be declared after it has been used.In other words; a variable can be used before it has been declared.Example 1 gives the same result as Example 2:To understand this, you have to understand the term ""hoisting"".Hoisting is JavaScript\'s default behavior of moving all declarations to the \ntop of the current scope (to the top of the current script or the current function).', 'Variables defined with let and const are hoisted to the top \nof the block, but not initialized.Meaning: The block of code is aware of the \nvariable, but it cannot be used until it has been declared.\nUsing a let variable before it is declared will result in a\nReferenceError.\nThe variable is in a ""temporal dead zone"" from the start \nof the block until it is declared:\n\nExample\nThis will result in a ReferenceError:\n\ncarName = ""Volvo"";\nlet carName;\n\nTry it Yourself »\n\nUsing a const variable before it is declared, is a syntax errror,\nso the code will simply not run.\n\nExample\nThis code will not run.\n\ncarName = ""Volvo"";\nconst carName;\n\nTry it Yourself »\n\nRead more about let and const in JS Let / Const.\n\n\n\n\n\n\n\nJavaScript Initializations are Not Hoisted\nJavaScript only hoists declarations, not initializations.\nExample 1 does not give the same result as\nExample 2:\n\nExample 1\n\nvar x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(""demo""); // Find an element \nelem.innerHTML = x + "" "" + y;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Display x and y\n\nTry it Yourself »\n\n\nExample 2\n\nvar x = 5; // Initialize x\n\nelem = document.getElementById(""demo""); // Find an element \nelem.innerHTML = x + "" "" + y;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Display x and y\n\nvar y = 7; // Initialize y\n\nTry it Yourself »\n\nDoes it make sense that y is undefined in the last example?\nThis is because only the declaration (var y), not the initialization (=7) is hoisted to the top.\nBecause of hoisting, y has been declared before it is used, but because \ninitializations are not hoisted, the value of y is undefined.\nExample 2 is the same as writing:\n\nExample\n\nvar x = 5; // Initialize x\nvar y;\xa0\xa0\xa0\xa0 // Declare y\n\nelem = document.getElementById(""demo""); // Find an element \nelem.innerHTML = x + "" "" + y;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Display x and y\n\ny = 7;\xa0\xa0\xa0 // Assign 7 to y \n\nTry it Yourself »\n\n\nDeclare Your Variables At the Top !\nHoisting is (to many developers) an unknown or overlooked behavior of  \nJavaScript.\nIf a developer doesn\'t understand hoisting, programs may contain bugs (errors).\nTo avoid bugs, always declare all variables at the beginning of \nevery scope.\nSince this is how JavaScript interprets the \ncode, it is always a good rule.\n\n\nJavaScript in strict mode does not allow variables to be used if they are \nnot declared.Study ""use strict"" in the next chapter.\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'JavaScript only hoists declarations, not initializations.Example 1 does not give the same result as\nExample 2:Does it make sense that y is undefined in the last example?This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.Because of hoisting, y has been declared before it is used, but because \ninitializations are not hoisted, the value of y is undefined.Example 2 is the same as writing:', 'Hoisting is (to many developers) an unknown or overlooked behavior of  \nJavaScript.\nIf a developer doesn\'t understand hoisting, programs may contain bugs (errors).\nTo avoid bugs, always declare all variables at the beginning of \nevery scope.\nSince this is how JavaScript interprets the \ncode, it is always a good rule.\n\n\nJavaScript in strict mode does not allow variables to be used if they are \nnot declared.Study ""use strict"" in the next chapter.\n\n\n\n❮ Previous\nNext ❯\n\n\n\n']","['\nx = 5; // Assign 5 to x\n\nelem = document.getElementById(""demo""); // Find an element \nelem.innerHTML = x;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Display x in the elementvar x; // Declare x\n', '\nvar x; // Declare x\nx = 5; // Assign 5 to x\nelem = document.getElementById(""demo""); // Find an element elem.innerHTML = x;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n// Display x in the element\n', '\ncarName = ""Volvo"";\nlet carName;\n &&&&&& \ncarName = ""Volvo"";\nconst carName;\n', '\nvar x = 5; // Initialize xvar y = 7; // Initialize yelem = document.getElementById(""demo""); // Find an element \nelem.innerHTML = x + "" "" + y;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Display x and y\n &&&&&& \nvar x = 5; // Initialize x\n\nelem = document.getElementById(""demo""); // Find an element \nelem.innerHTML = x + "" "" + y;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Display x and y\n\nvar y = 7; // Initialize y\n &&&&&& \nvar x = 5; // Initialize x\nvar y;\xa0\xa0\xa0\xa0 // Declare y\n\nelem = document.getElementById(""demo""); // Find an element \nelem.innerHTML = x + "" "" + y;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// Display x and y\n\ny = 7;\xa0\xa0\xa0 // Assign 7 to y \n']",[''],[],[]
js||Use Strict,https://www.w3schools.com/js/js_strict.asp,"""use strict""; Defines that 
JavaScript code should be executed in 
""strict mode"".","['The ""use strict"" Directive', 'Declaring Strict Mode', 'The ""use strict""; Syntax', 'Why Strict Mode?', 'Not Allowed in Strict Mode', 'Future Proof!']","['The ""use strict"" directive was new in ECMAScript version 5.It is not a statement, but a literal expression, ignored by earlier versions \nof JavaScript.The purpose of ""use strict"" is to indicate that the code should be executed in ""strict mode"".With strict mode, you can not, for example, use undeclared variables.All modern browsers support ""use strict"" except Internet Explorer 9 and lower:The numbers in the table specify the first browser version that fully supports the directive.', 'Strict mode is declared by adding ""use strict""; to the beginning of a \nscript or a function.Declared at the beginning of a script, it has global scope (all code \nin the script will execute in strict mode):Declared inside a function, it has local scope (only the code inside the function is \nin strict mode):', 'The syntax, for declaring strict mode, was designed to be compatible with \nolder versions of JavaScript.Compiling a numeric literal (4 + 5;) or a string literal (""John Doe"";) in a \nJavaScript program has no side effects. It simply compiles to a non existing \nvariable and dies.So ""use strict""; only matters to new compilers that ""understand"" the meaning \nof it.', 'Strict mode makes it easier to write ""secure"" JavaScript.Strict mode changes previously accepted ""bad syntax"" into real errors.As an example, in normal JavaScript, mistyping a variable name creates a new \nglobal variable. In strict mode, this will throw an error, making it impossible \nto accidentally create a global variable.In normal JavaScript, a developer will not receive any error feedback \nassigning values to non-writable properties. In strict mode, any assignment to a non-writable property, a getter-only \nproperty, a non-existing property, a non-existing variable, or a non-existing \nobject, will throw an error.', 'Using a variable, without declaring it, is not allowed:Using an object, without declaring it, is not allowed:Deleting a variable (or object) is not allowed.Deleting a function is not allowed.Duplicating a parameter name is not allowed:Octal numeric literals are not allowed:Octal escape characters are not allowed:Writing to a read-only property is not allowed:Writing to a get-only property is not allowed:Deleting an undeletable property is not allowed:The word eval cannot be used as a variable:The word arguments cannot be used as a variable:The with statement is not allowed:For security reasons, eval() is not allowed to create  \nvariables in the scope from which it was called:The this keyword in functions behaves \ndifferently in strict mode.The this keyword refers to the object that \ncalled the function.If the object is not specified, functions in strict mode \nwill return undefined and functions in normal \nmode will return the global object (window):', '\nKeywords reserved for future JavaScript versions can NOT be used as variable \nnames in strict mode.\nThese are:']","['\n""use strict"";x = 3.14;\xa0\xa0\xa0\xa0\xa0\xa0 // This will cause an error \n because x is not declared\n &&&&&& \n""use strict"";myFunction();\nfunction myFunction() {\n \xa0\xa0y = 3.14;\xa0\xa0 // This will also cause an error \n because y is not declared}', '\nx = 3.14;\xa0\xa0\xa0\xa0\xa0\xa0 // This will not cause an error.\n myFunction();function \n myFunction() {\n\xa0\xa0""use strict"";\n  \xa0 y = 3.14;\xa0\xa0 // This will cause an error}\n', '\n""use strict"";\n x = 3.14;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // This will cause an error', '\n""use strict"";\n x = {p1:10, p2:20};\xa0\xa0\xa0\xa0\xa0 // This will cause an error', '\n""use strict"";let x = 3.14;\ndelete x;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0\xa0\xa0\xa0\xa0\xa0 // This \nwill cause an error\n', '\n""use strict"";function x(p1, p2) {}; delete x;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n // This will cause an error\xa0\n', '\n""use strict"";function x(p1, p1) {};\xa0\xa0 // This will cause an error\n', '\n""use strict"";let x = 010;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // This \nwill cause an error\n', '\n""use strict"";\nlet x = ""\\010"";\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // This will cause an error\n', '\n""use strict"";\nconst obj = {};\nObject.defineProperty(obj, ""x"", {value:0, writable:false});\nobj.x = 3.14;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0\xa0 // This \nwill cause an error\n', '\n""use strict"";\nconst obj = {get x() \n{return 0} };obj.x = 3.14;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // This \nwill cause an error\n', '\n""use strict"";delete Object.prototype; // This will cause an error\n', '\n""use strict"";let eval = 3.14;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // This will cause an error\n', '\n""use strict"";let arguments = 3.14;\xa0\xa0\xa0 // This will cause an error\n', '\n""use strict"";with (Math){x = cos(2)}; // This will cause an error\n', '\n""use strict"";eval (""let x = 2"");\nalert (x);\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0// This \nwill cause an error\n', '\n""use strict"";function myFunction() {\xa0 \n  alert(this); // will alert ""undefined""}myFunction(); ']",['Future Proof!###&&&|||implements|||interface|||let|||package|||private|||protected|||public|||static|||yield|||'],"['Directive||||||||||||||||||&&&""use strict""|||13.0|||10.0|||4.0|||6.0|||12.1|||&&&']",[]
js||,https://www.w3schools.com/js/js_this.asp,,[''],"['In JavaScript, the this keyword refers to an object.Which object depends on how this is being invoked (used or called).The this keyword refers to different objects depending on how it is used:', 'When used in an object method, this refers to the object.In the example on top of this page, this refers to the person object.Because the fullName method is a method of the person object.', 'When used alone, this refers to the global object.Because this is running in the global scope.In a browser window the global object is [object Window]:\xa0In strict mode, when used alone, this also refers to the global object:', 'In a function, the global object is the default binding for this.In a browser window the global object is [object Window]:', 'JavaScript strict mode does not allow default binding.So, when used in a function, in strict mode, this is undefined.', 'In HTML event handlers, this refers to the HTML element that received the \nevent:', 'In these examples, this is the person object:i.e. this.firstName is the firstName property of this (the person object).', 'The call() and apply() methods are predefined JavaScript methods.They can both be used to call an object method with another object as argument.The example below calls person1.fullName with person2 as an argument, this refers to person2,\neven if fullName is a method of person1:', 'With the bind() method, an object can borrow a method from another object.This example creates 2 objects (person and member).The member object borrows the fullname method from the person object:', 'To determine which object this refers to; Use the following precedence of order.Is this in a function being called using bind()?Is this in a function is being called using apply()?Is this in a function is being called using call()?Is this in an object function (method)?\nIs this in a function in the global scope.\n\n\n❮ Previous\nNext ❯\n\n\n\n']","['\nconst person = {\n  \xa0 firstName: ""John"",\n\xa0\xa0lastName : ""Doe"",\n  \xa0 id\xa0\xa0\xa0\xa0\xa0\xa0 :\xa05566,\n  \xa0 fullName : function() {\n  \xa0\xa0\xa0 return this.firstName + "" "" + this.lastName;\n  \xa0\xa0}\n};\n', '\nfullName : function() {\n  \xa0 return this.firstName + "" "" + this.lastName;}\n', '\nlet x = this; \n &&&&&& \n  ""use strict"";let x = this; \n', '\nfunction myFunction() {\n  \xa0 return this;\n}\n', '\n""use strict"";function myFunction() {\n  \xa0 return this;\n}\n', '\n  <button onclick=""this.style.display=\'none\'"">\xa0 Click to \n  Remove Me!</button>', '\nconst person = {\n  \xa0 firstName\xa0 : ""John"",\n  \xa0 lastName\xa0\xa0 : ""Doe"",\n  \xa0 id\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 :\xa05566,\n  \xa0 myFunction : function() {\n\xa0\xa0\xa0 return this;\xa0\xa0}\n};\n &&&&&& \nconst person = {\n  \xa0 firstName: ""John"",\n  \xa0 lastName : ""Doe"",\n  \xa0 id\xa0\xa0\xa0\xa0\xa0\xa0 :\xa05566,\n  \xa0 fullName : function() {\n\xa0\xa0\xa0\xa0return this.firstName + "" "" + \nthis.lastName;\xa0\xa0}\n};\n', '\nconst person1 = {\n  \xa0 fullName: function() {\n  \xa0\xa0\xa0 return this.firstName + "" "" + this.lastName;\n  \xa0\xa0}}\n\nconst person2 = {\n  \xa0 firstName:""John"",\n  \xa0 lastName: ""Doe"",\n}\n\n// Return ""John Doe"":\nperson1.fullName.call(person2);\n', '\nconst person = {\n\xa0\xa0firstName:""John"",\n\xa0\xa0lastName: ""Doe"",\n  \xa0 fullName: function () {\n\xa0\xa0\xa0 return this.firstName + "" "" + this.lastName;\n  \xa0\xa0}\n}\n\nconst member = {\n\xa0\xa0firstName:""Hege"",\n\xa0\xa0lastName: ""Nilsen"",\n}\n\nlet fullName = person.fullName.bind(member);\n']",[''],"['In an object method, this refers to the object.|||&&&Alone, this refers to the global object.|||&&&In a function, this refers to the global object.|||&&&In a function, in strict mode, this is undefined.|||&&&In an event, this refers to the element that received the event.|||&&&Methods like call(), apply(),\nand bind() can refer this to any object.|||&&&', '&&&Precedence|||Object|||&&&1|||bind()|||&&&2|||apply() and call()|||&&&3|||Object method|||&&&4|||Global scope|||&&&']",[]
js||,https://www.w3schools.com/js/js_arrow_function.asp,,[''],"['The handling of this is also different in arrow functions compared to regular \nfunctions.In short, with arrow functions there are no binding of\nthis.In regular functions the this keyword represented the object that called the \nfunction, which could be the window, the document, a button or whatever.With arrow functions the this keyword always represents the \nobject that \ndefined the arrow function.Let us take a look at two examples to understand the difference.Both examples call a method twice, first when the page loads, and once again \nwhen the user clicks a button.The first example uses a regular function, and the second example uses an \narrow function.The result shows that the first example returns two different objects (window and button), \nand the \nsecond example returns the window object twice, because the window object is the \n""owner"" of the function.Remember these differences when you are working with functions. Sometimes the \nbehavior of regular functions is what you want, if not, use arrow functions.', 'The following table defines the first browser versions with full support for \nArrow Functions in JavaScript: ']","['\nhello = function() {\xa0 return ""Hello World!"";}', '\nhello = () => {\xa0 return ""Hello World!"";}', '\nhello = () => ""Hello World!"";', '\nhello = (val) => ""Hello "" + val;', '\nhello = val => ""Hello "" + val;', '\n  // Regular Function:hello = function() {\xa0 document.getElementById(""demo"").innerHTML \n  += this;}// The window object calls the function:\n  window.addEventListener(""load"", hello);// A button object calls the \n  function:document.getElementById(""btn"").addEventListener(""click"", hello); &&&&&& \n  // Arrow Function:hello = () => {\xa0 document.getElementById(""demo"").innerHTML \n  += this;}// The window object calls the function:\n  window.addEventListener(""load"", hello);// A button object calls the \n  function:document.getElementById(""btn"").addEventListener(""click"", hello);']",[''],"['|||||||||||||||&&&Chrome 45|||Edge 12|||Firefox 22|||Safari 10|||Opera 32|||&&&Sep, 2015|||Jul, 2015|||May, 2013|||Sep, 2016|||Sep, 2015|||&&&']",[]
js||,https://www.w3schools.com/js/js_classes.asp,,"['Using a Class', 'The Constructor Method', 'Class Methods', 'Browser Support']","['When you have a class, you can use the class to create objects:The example above uses the Car class to create two Car objects.', 'The constructor method is a special method:If you do not define a constructor method, JavaScript \nwill add an empty constructor method.\n', 'Class methods are created with the same syntax as object methods.Use the keyword class to create a class.Always add a constructor() method.Then add any number of methods.Create a Class method named ""age"", that returns the Car age:You can send parameters to Class methods:', 'The following table defines the first browser version with full support for \nClasses in JavaScript: ']","['\nclass ClassName {\n\xa0  constructor() { ... }\n}\n &&&&&& \nclass Car {\n\xa0  constructor(name, year) {\n\xa0\xa0\xa0 this.name = name;\n\xa0\xa0\xa0 this.year = year;\n\xa0 }\n}\n', '\nlet myCar1 = new Car(""Ford"", 2014);\nlet myCar2 = new Car(""Audi"", 2019);\n', '\nclass ClassName {\n\xa0  constructor() { ... }\n\xa0\xa0method_1() { ... }\n\xa0\xa0method_2() { ... }\n\xa0\xa0method_3() { ... }\n}\n &&&&&& \nclass Car {\n\xa0  constructor(name, year) {\n\xa0\xa0\xa0 this.name = name;\n\xa0\xa0\xa0 this.year = year;\n\xa0  }\xa0 age() {\n\xa0\xa0\xa0 let date = new Date();\n\xa0\xa0\xa0 return date.getFullYear() - this.year;\n\xa0  }}\nlet myCar = new Car(""Ford"", 2014);\ndocument.getElementById(""demo"").innerHTML =\n""My car is "" + myCar.age() + "" years old."";\n &&&&&& \nclass Car {\xa0 constructor(name, year) {\xa0\xa0\xa0 \n  this.name = name;\xa0\xa0\xa0 this.year = year;\xa0 }\xa0 \n  age(x) {\xa0\xa0\xa0 return x - this.year;\xa0 }}\n  let date = new Date();\n  let year = date.getFullYear();let myCar = new \n  Car(""Ford"", 2014);document.getElementById(""demo"").innerHTML=""My car is \n  "" + myCar.age(year) + "" years old.""; ', '']","['The Constructor Method###&&&|||It has to have the exact name ""constructor""|||It is executed automatically when a new object is created|||It is used to initialize object properties|||']","['|||||||||||||||&&&Chrome 49|||Edge 12|||Firefox 45|||Safari 9|||Opera 36|||&&&Mar, 2016|||Jul, 2015|||Mar, 2016|||Oct, 2015|||Mar, 2016|||&&&']",[]
js||JSON,https://www.w3schools.com/js/js_json.asp,JSON is a format for storing and transporting data.,"['What is JSON?', 'JSON Example', 'The JSON Format Evaluates to JavaScript Objects', 'JSON Syntax Rules', 'JSON Data - A Name and a Value', 'JSON Objects', 'JSON Arrays', 'Converting a JSON Text to a JavaScript Object']","['JSON is often used when data is sent from a server to a web \npage. ', '* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. \nCode for reading and generating JSON data can be written in any programming \nlanguage.\n', 'This JSON syntax defines an employees object: an array of 3 employee records (objects):', 'The JSON format is syntactically identical to the code for creating \nJavaScript objects.Because of this similarity, a JavaScript program \ncan easily convert JSON data into native \nJavaScript objects.', 'JSON data is written as name/value pairs, just like JavaScript object \nproperties.A name/value pair consists of a field name (in double quotes), \nfollowed by a colon, followed by a value:', 'JSON objects are written inside curly braces.Just like in JavaScript, objects can contain multiple name/value pairs:', 'JSON arrays are written inside square brackets.Just like in JavaScript, an array can contain objects:In the example above, the object ""employees"" is an array. It contains three \nobjects.Each object is a record of a person (with a first name and a last name).', 'A common use of JSON is to read data from a web server, \nand display the data in a web page.For simplicity, this can be demonstrated using a string as input.First, create a JavaScript string containing JSON syntax:Then, use the JavaScript built-in function JSON.parse() to convert the string into a JavaScript object:Finally, use the new JavaScript object in your page:']","['\n{""employees"":[\n\xa0\xa0{""firstName"":""John"", ""lastName"":""Doe""}, \n\xa0\xa0{""firstName"":""Anna"", ""lastName"":""Smith""},\n  \xa0 {""firstName"":""Peter"", ""lastName"":""Jones""}\n]}\n', '', '', '', '', '', '', '']","['What is JSON?###JSON Syntax Rules###&&&|||JSON stands for JavaScript Object Notation|||JSON is a lightweight data interchange format|||JSON is language independent *|||JSON is ""self-describing"" and easy to understand|||&&&|||Data is in name/value pairs|||Data is separated by commas|||Curly braces hold objects|||Square brackets hold arrays|||']",[],[]
js||Debugging,https://www.w3schools.com/js/js_debugging.asp,,"['Code Debugging', 'JavaScript Debuggers', 'The console.log() Method', 'Setting Breakpoints', 'The debugger Keyword', ""Major Browsers' Debugging Tools"", 'Chrome', 'Firefox', 'Edge', 'Opera', 'Safari', 'Did You Know?']","['Programming code might contain syntax errors, or logical errors.Many of these errors are difficult to diagnose.Often, when programming code contains errors, nothing will happen. There are \nno error messages, and you will get no indications where to search for errors.Searching for (and fixing) errors in programming code is called code debugging.', 'Debugging is not easy. But fortunately, all modern browsers have a built-in \nJavaScript debugger.Built-in debuggers can be turned on and off, forcing errors to be reported to \nthe user.With a debugger, you can also set breakpoints (places where code execution \ncan be stopped), and examine variables while the code is executing.Normally, otherwise follow the steps at the bottom of this page, you activate debugging in your browser with \nthe F12 key, and select ""Console"" in the debugger menu.', 'If your browser supports debugging, you can use console.log() to \ndisplay JavaScript values in the debugger window:', 'In the debugger window, you can set breakpoints in the JavaScript code.At each breakpoint, JavaScript will stop executing, and let you examine \nJavaScript values.After examining values, you can resume the execution of code (typically with \na play button).', 'The debugger keyword stops the execution of JavaScript, \nand calls (if available) the debugging function.This has the same function as setting a breakpoint in the debugger.If no debugging is available, the debugger statement has no effect.With the debugger turned on, this code will stop executing before it \nexecutes the third line.', 'Normally, you activate debugging in your browser with F12, and select ""Console"" in the debugger menu.Otherwise follow these steps:', '', '', '', '', '', '']","['\n<!DOCTYPE html><html><body><h1>My First Web Page</h1>\n<script>a = 5;b = 6;c = a + b;console.log(c);</script>\n</body></html>', '\nlet x = 15 * 5;debugger;document.getElementById(""demo"").innerHTML = x;\n', '', '', '', '', '', '', '', '', '', '']","['Chrome###Firefox###Edge###Opera###Safari###&&&|||Open the browser.|||From the menu, select ""More tools"".|||From tools, choose ""Developer tools"".|||Finally, select Console.|||&&&|||Open the browser.|||From the menu, select ""Web Developer"".|||Finally, select ""Web Console"".|||&&&|||Open the browser.|||From the menu, select ""Developer Tools"".|||Finally, select ""Console"".|||&&&|||Open the browser.|||From the menu, select ""Developer"".|||From ""Developer"", select ""Developer tools"".|||Finally, select ""Console"".|||&&&|||Go to Safari, Preferences, Advanced in the main menu.|||Check ""Enable Show Develop menu in menu bar"".|||When the new option ""Develop"" appears in the menu:Choose ""Show Error ||| Console"".|||']",[],[]
js||,https://www.w3schools.com/js/js_conventions.asp,"Always use the same coding conventions for all your JavaScript 
projects.","['Variable Names', 'Spaces Around Operators', 'Code Indentation', 'Statement Rules', 'Object Rules', 'Line Length < 80', 'Naming Conventions', 'Loading JavaScript in HTML', 'Accessing HTML Elements', 'File Extensions']","['Coding conventions are style guidelines for programming. \nThey typically cover:Coding conventions secure quality:Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.', 'At W3schools we use camelCase for identifier names (variables and functions).All names start with a letter.At the bottom of this page, you will find a wider discussion about naming \nrules.', 'Always put spaces around operators ( = + - * / ), and after commas:', 'Always use 2 spaces for indentation of code blocks:', 'General rules for simple statements:General rules for complex (compound) statements:', 'General rules for object definitions:Short objects can be written compressed, on one line, using spaces only \nbetween properties, like this:', 'For readability, avoid lines longer than 80 \ncharacters.If a JavaScript statement does not fit on one line, the best place to break \nit, is after an operator or a comma.', 'Always use the same naming convention for all your code. For example:Should you use hyp-hens, camelCase, or\nunder_scores in variable names?This is a question programmers often discuss. The answer depends on who you \nask:Hyphens in HTML and CSS:HTML5 attributes can start with data- (data-quantity, data-price).CSS uses hyphens in property-names (font-size).Underscores:Many programmers prefer to use underscores (date_of_birth), especially in SQL \ndatabases.Underscores are often used in PHP documentation.PascalCase:PascalCase is often preferred by C programmers.camelCase:camelCase is used by JavaScript itself, by jQuery, and other JavaScript \nlibraries.', 'Use simple syntax for loading external scripts (the type attribute is not \nnecessary):', 'A consequence of using ""untidy"" HTML styles, might result in JavaScript errors.These two JavaScript statements will produce different results:If possible, use the same naming convention (as JavaScript) in HTML. Visit the HTML Style Guide.', 'HTML files should have a .html extension (.htm is allowed).\nCSS files should have a .css extension.\nJavaScript files should have a .js extension.\n\nUse Lower Case File Names\nMost web servers (Apache, Unix) are case sensitive about file names:\nlondon.jpg cannot be accessed as London.jpg. \nOther web servers (Microsoft, IIS) are not case sensitive:\nlondon.jpg can be accessed as London.jpg or london.jpg.\nIf you use a mix of upper and lower case, you have to be extremely \nconsistent.\nIf you move from a case insensitive, to a case sensitive server, even small \nerrors can break your web site.\nTo avoid these problems, always use lower case file names (if possible). \n\nPerformance\nCoding conventions are not used by computers. Most rules have \nlittle impact on the execution of programs.\nIndentation and extra spaces are not significant in small scripts.\nFor code in development, readability should be preferred. Larger production \nscripts should be minified.\xa0 \n\n\n❮ Previous\nNext ❯\n\n\n\n', 'Most web servers (Apache, Unix) are case sensitive about file names:london.jpg cannot be accessed as London.jpg. Other web servers (Microsoft, IIS) are not case sensitive:london.jpg can be accessed as London.jpg or london.jpg.If you use a mix of upper and lower case, you have to be extremely \nconsistent.If you move from a case insensitive, to a case sensitive server, even small \nerrors can break your web site.To avoid these problems, always use lower case file names (if possible). ', 'Coding conventions are not used by computers. Most rules have \nlittle impact on the execution of programs.Indentation and extra spaces are not significant in small scripts.For code in development, readability should be preferred. Larger production \nscripts should be minified.\xa0 ']","['\nfirstName = ""John"";lastName = ""Doe"";price = 19.90;\n tax = 0.20;fullPrice = price + (price * tax);', '\nlet x = y + z;\nconst myArray = [""Volvo"", ""Saab"", \n ""Fiat""];', '\nfunction toCelsius(fahrenheit) {\n  \xa0 return (5 / 9) * (fahrenheit - 32);\n}\n', '\nconst cars = [""Volvo"", ""Saab"", \n ""Fiat""];\nconst person = {\xa0 firstName: ""John"",\xa0 \n lastName: ""Doe"",\xa0 age: 50,\xa0 eyeColor: \n ""blue""};', '\nfunction toCelsius(fahrenheit) {\n\xa0\xa0return (5 / 9) * (fahrenheit - 32);\n}\n', '\n for (let i = 0; i < 5; i++) {\xa0\xa0x += i;}', '\n if (time < 20) {\xa0\xa0greeting = ""Good day"";} else {\n  \xa0 \n greeting = ""Good evening"";}', '\nconst person = {\xa0 firstName: ""John"",\xa0 \n lastName: ""Doe"",\xa0 age: 50,\xa0 eyeColor: \n ""blue""};', '\nconst person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};', '\ndocument.getElementById(""demo"").innerHTML =\n  ""Hello Dolly."";\n', '\n<script src=""myscript.js""></script>', '\nconst obj = getElementById(""Demo"")\nconst obj = getElementById(""demo"")\n']",[''],[],[]
js||Best Practices,https://www.w3schools.com/js/js_best_practices.asp,"Avoid global variables, avoid new, avoid ==, avoid eval()","['Avoid Global Variables', 'Always Declare Local Variables', 'Declarations on Top', 'Initialize Variables', '']","['Minimize the use of global variables.This includes all data types, objects, and functions.Global variables and functions can be overwritten by other scripts.Use local variables instead, and learn how to use \nclosures. ', 'All variables used in a function should be declared as local variables. Local variables must be declared with the var \nkeyword or the let keyword,or the const keyword,\notherwise they will become global variables.', 'It is a good coding practice to put all declarations at the top of each script \nor function.This will:This also goes for loop variables:', 'It is a good coding practice to initialize variables when you declare them.This will:', 'Declaring objects with const will prevent any accidental change of type:', 'Declaring arrays with const will prevent any accidential change of type:', 'JavaScript is loosely typed.A variable can contain all data types.A variable can change its data type:Beware that numbers can accidentally be converted to strings or NaN (Not a \nNumber).When doing mathematical operations, JavaScript can convert numbers to strings:Subtracting a string from a string, does not \ngenerate an error but returns NaN (Not a Number):', 'The == comparison operator always converts (to matching types) before \ncomparison.The === operator forces comparison of values and type: ', 'If a function is called with a missing argument, the value of the missing \nargument is set to\nundefined.Undefined values can break your code. It is a good habit to assign default \nvalues to arguments.Read more about function parameters and arguments at Function Parameters', 'Always end your switch statements with a default. Even if you think there is \nno need for it.', 'Always treat numbers, strings, or booleans as primitive values. Not as \nobjects.Declaring these types as objects, slows down execution speed, \nand produces nasty side effects:Or even worse:', 'The eval() function is used to run text as code. In almost all cases, it \nshould not be necessary to use it.Because it allows arbitrary code to be run, it also represents a security \nproblem.']","['\n// Declare at the beginning\nlet firstName, lastName, price, discount, fullPrice;\n// Use laterfirstName = ""John"";lastName = ""Doe"";price = 19.90;\ndiscount = 0.10;fullPrice = price - discount;', '\nfor (let i = 0; i < 5; i++) \n {', '\n// Declare and initiate at the beginning\nlet firstName = """",\nlet lastName = """",\nlet price = 0,\nlet discount = 0,\nlet fullPrice = 0,\nconst myArray = [],\nconst myObject = {};', '\nlet car = {type:""Fiat"", model:""500"", color:""white""};\ncar = ""Fiat"";\xa0\xa0\xa0\xa0\xa0\xa0// Changes object to string\n', '\nconst car = {type:""Fiat"", model:""500"", color:""white""};\ncar = ""Fiat"";\xa0\xa0\xa0\xa0\xa0\xa0// Not possible\n', '\nlet cars = [""Saab"", ""Volvo"", ""BMW""];\ncars = 3;\xa0\xa0\xa0\xa0// Changes array to number\n', '\nconst cars = [""Saab"", ""Volvo"", ""BMW""];\ncars = 3;\xa0\xa0\xa0\xa0// Not possible\n', '\nlet x1 = """";\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new primitive string\nlet x2 = 0;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new primitive number\nlet x3 = false;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new primitive boolean\nconst x4 = {};\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new object\nconst x5 = [];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new array object\nconst x6 = /()/;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new regexp object\nconst x7 = function(){};\xa0// new function object', '\nlet x = ""Hello"";\xa0\xa0\xa0\xa0\xa0// typeof x is a string\nx = 5;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// changes typeof x to a number\n &&&&&& \nlet x = 5 + 7;\xa0\xa0\xa0\xa0\xa0\xa0 // x.valueOf() is 12,\xa0 typeof x is a number\nlet x = 5 + ""7"";\xa0\xa0\xa0\xa0 // x.valueOf() is 57,\xa0 typeof x is a string\nlet x = ""5"" + 7;\xa0\xa0\xa0\xa0 // x.valueOf() is 57,\xa0 typeof x is a string\nlet x = 5 - 7; \xa0\xa0\xa0\xa0\xa0 // x.valueOf() is -2,\xa0 typeof x is a number\nlet x = 5 - ""7""; \xa0\xa0\xa0 // x.valueOf() is -2,\xa0 typeof x is a number\nlet x = ""5"" - 7; \xa0\xa0\xa0 // x.valueOf() is -2,\xa0 typeof x is a number\nlet x = 5 - ""x"";\xa0 \xa0\xa0 // x.valueOf() is NaN, typeof x is a number\n &&&&&& \n ""Hello"" - ""Dolly"" \xa0\xa0 // returns NaN', '\n0 == """";\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // true\n1 == ""1""; \xa0\xa0\xa0\xa0\xa0 // true\n1 == true;\xa0\xa0\xa0\xa0\xa0 // true\n0 === """";\xa0\xa0\xa0\xa0\xa0\xa0 // false\n1 === ""1""; \xa0\xa0 \xa0 // false\n1 === true;\xa0\xa0\xa0\xa0 \n// false\n', '\nfunction myFunction(x, y) {\n  \xa0 if (y === undefined) {\n  \xa0\xa0\xa0 y = 0;\n  \xa0  }\n}\n', '\nfunction (a=1, b=1) {\xa0/*function code*/  }\n &&&&&& \nswitch (new Date().getDay()) {\n  \xa0\ncase 0:\n  \xa0 \xa0 day = ""Sunday"";\n  \xa0\xa0\xa0 break;\n\xa0\xa0case 1:\n  \xa0 \xa0 day = ""Monday"";\n  \xa0\xa0\xa0 break;\n\xa0\xa0case 2:\n\xa0 \xa0 day = ""Tuesday"";\n \xa0\xa0\xa0 break;\n  \xa0\ncase 3:\n\xa0 \xa0 day = ""Wednesday"";\n  \xa0\xa0\xa0 break;\n  \xa0\ncase 4:\n\xa0\xa0\xa0 day = ""Thursday"";\n \xa0\xa0\xa0 break;\n\xa0\xa0case 5:\n  \xa0 \xa0 day = ""Friday"";\n  \xa0\xa0\xa0 break;\n\xa0\xa0case 6:\n\xa0 \xa0 day = ""Saturday"";\n  \xa0\xa0\xa0 break;\n\xa0\xa0default:\xa0\xa0\xa0 day = \n ""Unknown"";}\n', '\nlet x = ""John"";\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\nlet y = new String(""John"");\n(x === y) // is false because x is a string and y is an object.\n &&&&&& \nlet x = new String(""John"");\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\nlet y = new String(""John"");\n(x == y) // is false because you cannot compare objects.\n']","['Declarations on Top###Initialize Variables###Don\'t Use new Object()###&&&|||Give cleaner code|||Provide a single place to look for local variables|||Make it easier to avoid unwanted (implied) global variables|||Reduce the possibility of unwanted re-declarations|||&&&|||Give cleaner code|||Provide a single place to initialize variables|||Avoid undefined values|||&&&|||Use """" instead of new String()|||Use 0 instead of new Number()|||Use false instead of new Boolean()|||Use {} instead of new Object()|||Use [] instead of new Array()|||Use /()/ instead of new RegExp()|||Use function (){} instead of new Function()|||']",[],[]
js||Common Mistakes,https://www.w3schools.com/js/js_mistakes.asp,This chapter points out some common JavaScript mistakes.,"['Accidentally Using the Assignment Operator ', 'Expecting Loose Comparison', 'Confusing Addition & Concatenation ', 'Misunderstanding Floats ', 'Breaking a JavaScript String', 'Misplacing Semicolon', 'Breaking a Return Statement', 'Explanation', 'Accessing Arrays with Named Indexes', 'Ending Definitions with a Comma', 'Undefined is Not Null']","['JavaScript programs may generate unexpected results if a programmer \naccidentally uses an assignment operator (=), instead of a comparison operator \n(==) in an if statement. This if statement returns false (as \nexpected) because x is \nnot equal to 10:This if statement returns true (maybe not \nas expected), because 10 is  \ntrue:This if statement returns false (maybe not \nas expected), because 0 is  \nfalse:', 'In regular comparison, data type does not matter. This if statement returns \ntrue:In strict comparison, data type does matter. This if statement returns false:It is a common mistake to forget that switch statements use strict \ncomparison:This case switch will display an alert:This case switch will not display an alert:', 'Addition is about adding numbers.Concatenation is about adding strings.In JavaScript both operations use the same + operator.Because of this, adding a number as a number will produce a different \nresult from adding a number as a string:When adding two variables, it can be difficult to anticipate the result:', 'All numbers in JavaScript are stored as 64-bits Floating point numbers \n(Floats).All programming languages, including JavaScript, have difficulties with \nprecise floating point values:To solve the problem above, it helps to multiply and divide:', 'JavaScript will allow you to break a statement into two lines:But, breaking a statement in the middle of a string will not work:You must use a ""backslash"" if you must break a statement in a string:', 'Because of a misplaced semicolon, this code block will execute regardless of \nthe value of x:', 'It is a default JavaScript behavior to close a statement automatically at the \nend of a line.Because of this, these two examples will return the same result:JavaScript will also allow you to break a statement into two lines.Because of this, example 3 will also return the same result:But, what will happen if you break the return statement in two lines like \nthis:\nThe function will return undefined!\nWhy? Because JavaScript thought you meant:', '\nIf a statement is incomplete like:\nJavaScript will try to complete the statement by reading the next line:\nBut since this statement is complete: \nJavaScript will automatically close it like this:\nThis happens because closing (ending) statements with semicolon is optional in \nJavaScript.\nJavaScript will close the return statement at the end of the line, because \nit is a complete statement.', 'Many programming languages support arrays with named indexes.Arrays with named indexes are called associative \narrays (or hashes).JavaScript does not support arrays with named indexes.In JavaScript, arrays use numbered indexes:\xa0\xa0 In JavaScript, objects use named indexes. If you use a named index, when accessing an array, JavaScript will redefine \nthe array to a standard object.After the automatic redefinition, array methods and properties will produce undefined or \nincorrect results:', 'Trailing commas in object and array definition are legal in ECMAScript 5.', 'JavaScript objects, variables, properties, and methods can be undefined.In addition, empty JavaScript objects can have the value null.This can make it a little bit difficult to test if an object is empty.You can test if an object exists by testing if the type is  undefined:But you cannot test if an object is null, because this will throw an error if the \nobject is undefined:To solve this problem, you must test if an object is not null, \nand not undefined.But this can still throw an error:Because of this, you must test for not undefined before you can \ntest for not null:']","['\nlet x = 0;if (x == 10) ', '\nlet x = 0;if (x = 10)\n', '\nlet x = 0;if (x = 0)\n', '\nlet x = 10;\nlet y = ""10"";if (x == y) ', '\nlet x = 10;\nlet y = ""10"";if (x === y) ', '\nlet x = 10;\nswitch(x) {\xa0\xa0case 10: alert(""Hello"");\n    } ', '\nlet x = 10;switch(x) {\xa0 case ""10"": alert(""Hello"");\n    } ', '\nlet x = 10;\nx = 10 + 5;\xa0\xa0\xa0\xa0\xa0\xa0 // \n    Now x is 15\n\nlet y = 10;\ny += ""5"";\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n    // Now y is ""105""', '\nlet x = 10;\nlet y = 5;\nlet z = x + y;\xa0\xa0\xa0\xa0\xa0// Now z is 15\nlet x = 10;\nlet y = ""5"";\nlet z = x + y;\xa0\xa0\xa0 \xa0// Now z is ""105""', '\nlet x = 0.1;\nlet y = 0.2;let z = x + y\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n    // the result in z will not be 0.3 &&&&&& \nlet z = (x * 10 + y * 10) / 10;\xa0\xa0\xa0\xa0\xa0\xa0 // z will be 0.3', '\nlet x =""Hello World!"";', '\nlet x = ""HelloWorld!"";', '\nlet x = ""Hello \\World!"";', '\nif (x == 19);{\n  \xa0 // code block\xa0 }', '\nfunction myFunction(a) {\n  \xa0 let power = 10\xa0 \xa0 return a * power}\n', '\nfunction myFunction(a) {\n  \xa0 let power = 10;\xa0 return a * power;}\n', '\nfunction myFunction(a) {\n  \xa0 let\xa0\xa0power = 10;\xa0 \xa0\xa0return a * power;}', '\nfunction myFunction(a) {\n  \xa0 let\xa0 power = 10;\xa0 \xa0 return\xa0 a * power;}', '\nfunction myFunction(a) {\n  \xa0 let\xa0 power = 10;\xa0 \xa0\xa0return;\xa0 a * power;}', '\nlet', '\n  power = 10;', '\n  return', '\n  return;', '\nconst person = [];\nperson[0] = ""John"";\nperson[1] = ""Doe"";\nperson[2] = 46;person.length;\xa0\xa0\xa0\xa0\xa0\xa0 \n // person.length will return 3person[0];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n // person[0] will return ""John""', '\nconst person = [];\nperson[""firstName""] = ""John"";\nperson[""lastName""] = ""Doe"";\nperson[""age""] = 46;person.length;\xa0\xa0\xa0\xa0\xa0 // person.length will \n return 0person[0];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \n // person[0] will return undefined', '\nperson = {firstName:""John"", lastName:""Doe"", age:46,}\n', '\npoints = [40, 100, 1, 5, 25, 10,];', '\nperson = {""firstName"":""John"", ""lastName"":""Doe"", ""age"":46}\n', '\npoints = [40, 100, 1, 5, 25, 10];', '\n if (typeof myObj === ""undefined"")\xa0\n', '\n if (myObj === null)\xa0 ', '\n if (myObj !== null && typeof myObj \n  !== ""undefined"")\xa0 ', '\n if (typeof myObj !== ""undefined"" && myObj !== null)\xa0\n']",[''],[],[]
js||Performance,https://www.w3schools.com/js/js_performance.asp,How to speed up your JavaScript code.,"['Reduce Activity in Loops', 'Reduce DOM Access', 'Reduce DOM Size', 'Avoid Unnecessary Variables', 'Delay JavaScript Loading', 'Avoid Using with']","['Loops are often used in programming.Each statement in a loop, including the for statement, is executed for each iteration of the \nloop.Statements or assignments that can be placed outside the loop will make the \nloop run faster. The bad code accesses the length property of an array each time the loop is \niterated.The better code accesses the length property outside the loop and makes the \nloop run faster.', 'Accessing the HTML DOM is very slow, compared to other JavaScript statements.If you expect to access a DOM element several times, access it once, and use \nit as a local variable:', 'Keep the number of elements in the HTML DOM small.This will always \nimprove page loading, and speed up rendering (page display), especially on smaller devices.Every attempt to search the DOM (like getElementsByTagName) will benefit \nfrom a smaller DOM.', ""Don't create new variables if you don't plan to save values.Often you can replace code like this:With this:"", 'Putting your scripts at the bottom of the page body lets the browser load the \npage first.While a script is downloading, the browser will not start any other \ndownloads. In addition all parsing and rendering activity might be blocked.An alternative is to use defer=""true"" in the script tag. The \ndefer attribute specifies that the script should be executed after the page has \nfinished parsing, but it only works for external scripts.If possible, you can add your script to the page by code, after the page has loaded:', 'Avoid using the with keyword. It has a negative effect on \nspeed. It also clutters up JavaScript scopes.The with keyword is not allowed in strict mode.']","['\nfor (let i = 0; i < arr.length; i++) {\n', '\nlet l = arr.length;\nfor (let i = 0; i < l; i++) {', '\nconst obj = document.getElementById(""demo"");obj.innerHTML = ""Hello"";\n', '\nlet fullName = firstName + "" "" + lastName;\ndocument.getElementById(""demo"").innerHTML = fullName;\n', '\ndocument.getElementById(""demo"").innerHTML = firstName + "" "" + lastName;\n', '\n<script>window.onload = function() {\xa0 \nconst element = document.createElement(""script"");\xa0 \nelement.src = ""myScript.js"";\xa0 \ndocument.body.appendChild(element);};</script>']",[''],[],[]
js||Reserved Words,https://www.w3schools.com/js/js_reserved.asp,,"['Removed Reserved Words ', 'JavaScript Objects, Properties, and Methods', 'Java Reserved Words', 'Other Reserved Words', 'HTML Event Handlers']","['JavaScript can be used as the programming \nlanguage in many applications.', 'In addition you should avoid using the name of all HTML event handlers.', '', '', '']","['', '', '', '', '']",[''],"['abstract|||arguments|||await*|||boolean|||&&&break|||byte|||case|||catch|||&&&char|||class*|||const|||continue|||&&&debugger|||default|||delete|||do|||&&&double|||else|||enum*|||eval|||&&&export*|||extends*|||false|||final|||&&&finally|||float|||for|||function|||&&&goto|||if|||implements|||import*|||&&&in|||instanceof|||int|||interface|||&&&let*|||long|||native|||new|||&&&null|||package|||private|||protected|||&&&public|||return|||short|||static|||&&&super*|||switch|||synchronized|||this|||&&&throw|||throws|||transient|||true|||&&&try|||typeof|||var|||void|||&&&volatile|||while|||with|||yield|||&&&', 'abstract|||boolean|||byte|||char|||&&&double|||final|||float|||goto|||&&&int|||long|||native|||short|||&&&synchronized|||throws|||transient|||volatile|||&&&', 'Array|||Date|||eval|||function|||&&&hasOwnProperty|||Infinity|||isFinite|||isNaN|||&&&isPrototypeOf|||length|||Math|||NaN|||&&&name|||Number|||Object|||prototype|||&&&String|||toString|||undefined|||valueOf|||&&&', 'getClass|||java|||JavaArray|||javaClass|||&&&JavaObject|||JavaPackage|||||||||&&&', 'alert|||all|||anchor|||anchors|||&&&area|||assign|||blur|||button|||&&&checkbox|||clearInterval|||clearTimeout|||clientInformation|||&&&close|||closed|||confirm|||constructor|||&&&crypto|||decodeURI|||decodeURIComponent|||defaultStatus|||&&&document|||element|||elements|||embed|||&&&embeds|||encodeURI|||encodeURIComponent|||escape|||&&&event|||fileUpload|||focus|||form|||&&&forms|||frame|||innerHeight|||innerWidth|||&&&layer|||layers|||link|||location|||&&&mimeTypes|||navigate|||navigator|||frames|||&&&frameRate|||hidden|||history|||image|||&&&images|||offscreenBuffering|||open|||opener|||&&&option|||outerHeight|||outerWidth|||packages|||&&&pageXOffset|||pageYOffset|||parent|||parseFloat|||&&&parseInt|||password|||pkcs11|||plugin|||&&&prompt|||propertyIsEnum|||radio|||reset|||&&&screenX|||screenY|||scroll|||secure|||&&&select|||self|||setInterval|||setTimeout|||&&&status|||submit|||taint|||text|||&&&textarea|||top|||unescape|||untaint|||&&&window||||||||||||&&&', 'onblur|||onclick|||onerror|||onfocus|||&&&onkeydown|||onkeypress|||onkeyup|||onmouseover|||&&&onload|||onmouseup|||onmousedown|||onsubmit|||&&&']",[]
js||Versions,https://www.w3schools.com/js/js_versions.asp,,"['Browser Support', 'Browser Support for ES5 (2009)', 'Browser Support for ES6 (2015)', 'Browser Support for ECMAScript 2016']","['ECMAScript 1 - 6 is fully supported in all modern browsers.', '', '', '']","['', '', '', '']",[''],"['Ver|||Official Name|||Description|||&&&ES1|||ECMAScript 1 (1997)|||First edition|||&&&ES2|||ECMAScript 2 (1998)|||Editorial changes|||&&&ES3|||ECMAScript 3 (1999)|||Added regular expressions\nAdded try/catch\nAdded switch\nAdded do-while|||&&&ES4|||ECMAScript 4|||Never released|||&&&ES5|||ECMAScript 5 (2009)\nRead More\n|||\nAdded ""strict mode""\nAdded JSON support\nAdded String.trim()\nAdded Array.isArray()\nAdded Array iteration methods\nAllows trailing commas for object literals\n|||&&&ES6|||ECMAScript 2015\nRead More|||Added let and const\nAdded default parameter values\nAdded Array.find()\nAdded Array.findIndex()\n|||&&&|||ECMAScript 2016\nRead More|||Added exponential operator (**)\nAdded Array.includes()|||&&&|||ECMAScript 2017\nRead More\n|||Added string padding\nAdded Object.entries()\nAdded Object.values()\nAdded async functions\nAdded shared memory|||&&&|||ECMAScript 2018\nRead More\n|||\nAdded rest / spread properties\nAdded asynchronous iteration\nAdded Promise.finally()\nAdditions to RegExp\n|||&&&', 'Browser|||Version|||From Date|||&&&Chrome|||23|||Nov 2012|||&&&Firefox|||21|||May 2013|||&&&IE|||9*|||Mar 2011|||&&&IE / Edge|||10|||Sep 2012|||&&&Safari|||6|||Jul 2012|||&&&Opera|||15|||Jul 2013|||&&&', 'Browser|||Version|||Date|||&&&Chrome|||51|||May 2016|||&&&Firefox|||52|||Mar 2017|||&&&Edge|||14|||Aug 2016|||&&&Safari|||10|||Sep 2016|||&&&Opera|||38|||Jun 2016|||&&&', 'Browser|||Version|||Date|||&&&Chrome|||52|||Jul 2016|||&&&Firefox|||54|||Jun 2017|||&&&Edge|||14|||Aug 2016|||&&&Safari|||10.1|||Mar 2017|||&&&Opera|||39|||Aug 2016|||&&&']",[]
js||,https://www.w3schools.com/js/js_es5.asp,,"['Browser Support', 'The ""use strict"" Directive', 'Property Access on Strings', 'Strings Over Multiple Lines', 'Reserved Words as Property Names', 'String trim()', 'Array.isArray()', 'Array forEach()', 'Array map()', 'Array filter()', 'Array reduce()', 'Array reduceRight()', 'Array every()', 'Array some()', 'Array indexOf()', 'Array lastIndexOf()', 'JSON.parse()', 'JSON.stringify()', 'Date.now()', 'Date toISOString()', 'Date toJSON()', 'Property Getters and Setters', 'Object.defineProperty()', 'E5 Object Methods', 'Function Bind()', 'Trailing Commas']","['ES5 is fully supported in all modern browsers:', '""use strict"" defines that the JavaScript code should be executed in ""strict mode"".With strict mode you can, for example, not use undeclared variables.Read more in JS Strict Mode.', 'The charAt() method returns the character at a specified \nindex (position) in a string:ES5 allows property access on strings:', 'A safer way to break up a string literal, is to use string \naddition:', 'ES5 allows reserved words as property names:', 'The trim() method removes whitespace from both sides of a string.Read more in JS String Methods.', 'The isArray() method checks whether an object is an array.Read more in JS Arrays.', 'The forEach() method calls a function once for each array element.Learn more in JS Array Iteration Methods.', 'This example multiplies each array value by 2: Learn more in JS Array Iteration Methods.', 'This example creates a new array from elements with a value larger than 18:Learn more in JS Array Iteration Methods.', 'This example finds the sum of all numbers in an array:Learn more in JS Array Iteration Methods.', 'This example also finds the sum of all numbers in an array:Learn more in JS Array Iteration Methods.', 'This example checks if all values are over 18:Learn more in JS Array Iteration Methods.', 'This example checks if some values are over 18:Learn more in JS Array Iteration Methods.', 'Search an array for an element value and returns its position.Learn more in JS Array Iteration Methods.', 'lastIndexOf() is the same as indexOf(), but searches from the end of the array.Learn more in JS Array Iteration Methods.', 'A common use of JSON is to receive data from a web server.Imagine you received this text string from a web server:The JavaScript function JSON.parse() is used to convert the text into a JavaScript object:Read more in our JSON Tutorial.', 'A common use of JSON is to send data to a web server.When sending data to a web server, the data has to be \na string.Imagine we have this object in JavaScript:Use the JavaScript function JSON.stringify() to convert it into a string.myJSON is now a string, and ready to be sent to a server:Read more in our JSON Tutorial.', 'Date.now() returns the number of milliseconds since zero date (January 1. \n1970 00:00:00 UTC).Date.now() returns the same as getTime() performed on a Date object.Learn more in JS Dates.', 'The toISOString() method converts a Date object to a string, using the ISO standard format:', 'toJSON() converts a Date object into a string, formatted as a JSON date.JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ:', 'ES5 lets you define object methods with a syntax that looks like getting or setting\na property.This example creates a getter for a property called fullName:This example creates a setter and a getter for the language property:This example uses a setter to secure upper case updates of language:Learn more about Gettes and Setters in JS Object Accessors', ""Object.defineProperty() is a new Object method in ES5.It lets you define an object property and/or change a property's value and/or \nmetadata.Next example is the same code, except it hides the language property from enumeration:This example creates a setter and a getter to secure upper case updates of language:"", 'ES5 added a lot of new Object Methods to JavaScript:Learn more in Object ECMAScript5.', 'With the bind() method, an object can borrow a method from another object.This example creates 2 objects (person and member).The member object borrows the fullname method from the person object:Learn more in Function bind().', 'ES5 allows trailing commas in object and array definitions:']","['\nvar str = ""HELLO WORLD"";\nstr.charAt(0);\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // returns H\n &&&&&& \nvar str = ""HELLO WORLD"";\nstr[0];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // returns H\n', '\n  ""Hello \\Dolly!""; &&&&&& \n  ""Hello "" + ""Dolly!"";\n', '\n  var obj = {name: ""John"", new: ""yes""}\n', '\n var str = ""\xa0\xa0\xa0\xa0\xa0\xa0 Hello World!\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "";alert(str.trim());\n', '\nfunction myFunction() {\xa0\xa0var fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\xa0\xa0var x = document.getElementById(""demo"");\n  \xa0 x.innerHTML = Array.isArray(fruits);}', '\nvar txt = """";var numbers = [45, 4, 9, 16, 25];\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\n  \xa0\ntxt = txt + value + ""<br>""; \n}\n', '\nvar numbers1 = [45, 4, 9, 16, 25];\nvar numbers2 = numbers1.map(myFunction);\n\nfunction myFunction(value) {\n\xa0\xa0return value * 2;\n}\n', '\n  var numbers = [45, 4, 9, 16, 25];var over18 = \n  numbers.filter(myFunction);function myFunction(value) {\xa0\xa0return value > 18;} ', '\n  var numbers1 = [45, 4, 9, 16, 25];var sum = numbers1.reduce(myFunction);\nfunction myFunction(total, value) {\xa0 \n  return total + value;} ', '\n  var numbers1 = [45, 4, 9, 16, 25];var sum = numbers1.reduceRight(myFunction);\nfunction myFunction(total, value) {\xa0\xa0return total + value;} ', '\n  var numbers = [45, 4, 9, 16, 25];var allOver18 = \n  numbers.every(myFunction);function myFunction(value) {\xa0 return \n  value > 18;} ', '\n  var numbers = [45, 4, 9, 16, 25];var allOver18 = \n  numbers.some(myFunction);function myFunction(value) {\xa0\xa0return \n  value > 18;} ', '\nvar fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nvar a = fruits.indexOf(""Apple"");\n', '\nvar fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nvar a = fruits.lastIndexOf(""Apple"");\n', '\n\'{""name"":""John"", ""age"":30, ""city"":""New York""}\'', '\nvar obj = JSON.parse(\'{""name"":""John"", ""age"":30, ""city"":""New \n  York""}\');', '\nvar obj = {name:""John"", age:30, city:""New York""};\n &&&&&& \nvar myJSON = JSON.stringify(obj); &&&&&& \nvar obj = {name:""John"", age:30, city:""New York""};\nvar myJSON = JSON.stringify(obj);document.getElementById(""demo"").innerHTML = myJSON;', '\nvar timInMSs = Date.now();', '\nconst d = new Date();\ndocument.getElementById(""demo"").innerHTML = d.toISOString();\n', '\nd = new Date();\ndocument.getElementById(""demo"").innerHTML = d.toJSON();\n', '\n  // Create an object:var person = {\xa0 firstName: \n  ""John"",\xa0 lastName : ""Doe"",\xa0 get \n  fullName() {\xa0\xa0\xa0 \n  return this.firstName + "" "" + this.lastName;\xa0\xa0}};// Display data from the \n  object using a getter:document.getElementById(""demo"").innerHTML = \n  person.fullName;  &&&&&& \n  var person = {\xa0 firstName: ""John"",\xa0 \n  lastName : ""Doe"",\xa0 language : ""NO"",\xa0 \n  get lang() {\xa0\xa0\xa0 return this.language;\xa0\xa0},\xa0\xa0set lang(value) {\xa0\xa0\xa0 \n  this.language = value;\xa0\xa0}};// Set an object \n  property using a setter:person.lang = ""en"";// Display data from the \n  object using a getter:document.getElementById(""demo"").innerHTML = \n  person.lang;  &&&&&& \n  var person = {\xa0 firstName: ""John"",\xa0 \n  lastName : ""Doe"",\xa0 language : ""NO"",\xa0\xa0set lang(value) {\xa0\xa0\xa0 \n  this.language = value.toUpperCase();\xa0\xa0}};// Set an object \n  property using a setter:person.lang = ""en"";// Display data from the \n  object:document.getElementById(""demo"").innerHTML = \n  person.language; ', '\n  // Create an Object:var person = {\xa0 firstName: \n  ""John"",\xa0 lastName : ""Doe"",\xa0 language : ""NO"", };\n  // Change a Property:Object.defineProperty(person, ""language"", {\n  \xa0 \n  value: ""EN"",\xa0\xa0writable : true,\xa0\xa0enumerable : true,\xa0\xa0configurable : true});// \n  Enumerate Propertiesvar txt = """";for (var x in person) {\n  \xa0 \n  txt += person[x] + ""<br>"";}document.getElementById(""demo"").innerHTML = \n  txt;  &&&&&& \n  // Create an Object:var person = {\xa0 firstName: \n  ""John"",\xa0 lastName : ""Doe"",\xa0 language : ""NO"", };\n  // Change a Property:Object.defineProperty(person, ""language"", {\n  \xa0 \n  value: ""EN"",\xa0\xa0writable : true,\xa0\xa0enumerable : false,\xa0\xa0configurable : true});// \n  Enumerate Propertiesvar txt = """";for (var x in person) {\n  \xa0 \n  txt += person[x] + ""<br>"";}document.getElementById(""demo"").innerHTML = \n  txt;  &&&&&& \n  /// Create an Object:var person = {\xa0\xa0firstName: ""John"",\n  \xa0 lastName : \n  ""Doe"",\xa0 language : ""NO""};// Change a Property:\nObject.defineProperty(person, ""language"", {\xa0 get : function() { return \n  language },\xa0 set : function(value) { language = value.toUpperCase()}});\n  // Change Languageperson.language = ""en"";// Display Language\n  document.getElementById(""demo"").innerHTML = person.language;', '\n// Create object with an existing object as prototype\nObject.create(parent, donor)\n// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing Properties\nObject.getOwnPropertyDescriptor(object, property)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)\n// Returns enumerable properties as an array\nObject.keys(object)\n', '\n// Prevents adding properties to an object\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents changes of object properties (not values)\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)\n', '\nconst person = {\n\xa0\xa0firstName:""John"",\n\xa0\xa0lastName: ""Doe"",\n  \xa0 fullName: function () {\n\xa0\xa0\xa0 return this.firstName + "" "" + this.lastName;\n  \xa0\xa0}\n}\n\nconst member = {\n\xa0\xa0firstName:""Hege"",\n\xa0\xa0lastName: ""Nilsen"",\n}\n\nlet fullName = person.fullName.bind(member);\n', '']","['ES5 Features###&&&|||""use strict""|||String[number] access|||Multiline strings|||String.trim()|||Array.isArray()|||Array forEach()|||Array map()|||Array filter()|||Array reduce()|||Array reduceRight()|||Array every()|||Array some()|||Array indexOf()|||Array lastIndexOf()|||JSON.parse()|||JSON.stringify()|||Date.now()|||Date toISOString()|||Date toJSON()|||Property getters and setters|||Reserved words as property names|||Object methods|||Object defineProperty()|||Function bind()|||Trailing commas|||']",['||||||||||||||||||&&&Chrome|||IE|||Edge|||Firefox|||Safari|||Opera|||&&&Yes|||9.0|||Yes|||Yes|||Yes|||Yes|||&&&'],[]
js||,https://www.w3schools.com/js/js_es6.asp,,"['Browser Support for ES6 (2015)', 'JavaScript let', 'JavaScript const', 'Arrow Functions', 'The For/Of Loop', 'JavaScript Map Objects', 'JavaScript Set Objects', 'JavaScript Classes', 'Using a Class', 'JavaScript Promises', 'The Symbol Type', 'Default Parameter Values', 'Function Rest Parameter', 'String.includes()', 'String.startsWith()', 'String.endsWith()', 'Array.from()', 'Array keys()', 'Array find()', 'Array findIndex()', 'New Math Methods', 'The Math.trunc() Method', 'The Math.sign() Method', 'The Math.cbrt() Method', 'The Math.log2() Method', 'The Math.log10() Method', 'New Number Properties', 'New Number Methods', 'The Number.isInteger() Method', 'The Number.isSafeInteger() Method', 'New Global Methods', 'The isFinite() Method', 'The isNaN() Method', 'Modules']","['Safari 10 and Edge 14 were the first browsers to fully support ES6:', 'The let keyword allows you to declare a variable with \nblock scope.Read more about let in the chapter: JavaScript Let.', 'The const keyword allows you to declare a constant (a \nJavaScript variable with a constant value).Constants are similar to let variables, except that the value cannot be changed.Read more about const in the chapter: JavaScript Const.', ""Arrow functions allows a short syntax for writing function expressions.You don't need the function keyword, the return keyword, and the \ncurly brackets.Arrow functions do not have their own this.\nThey are not well suited for defining object methods.Arrow functions are not hoisted. They must be defined before they are used.Using const\nis safer than using var, because a function expression is \nalways a constant value.You can only omit the return keyword and the curly brackets if the function is a single statement. \nBecause of this, it might be a good habit to always keep them:Learn more about Arrow Functions in the chapter: JavaScript Arrow Function."", 'The JavaScript for/of statement loops \nthrough the values of an iterable objects. for/of lets you loop over data structures \nthat are iterable such as Arrays, Strings, Maps, NodeLists, and more.The for/of loop has the following syntax:variable - For every iteration the value of the next property is \nassigned to the variable. Variable can be declared with\nconst, let, or var.iterable - An object that has iterable properties.Learn more in the chapter: JavaScript Loop For/In/Of.', 'Learn more about Map objects in the the chapter: JavaScript Map().', 'Learn more about Set objects in the the chapter: JavaScript Set().', 'JavaScript Classes are templates for JavaScript Objects.Use the keyword class to create a class.Always add a method named constructor():The example above creates a class named ""Car"".The class has two initial properties: ""name"" and ""year"".', 'When you have a class, you can use the class to create objects:Learn more about classes in the the chapter: JavaScript Classes.', 'A Promise is a JavaScript object that links ""Producing Code"" and ""Consuming Code"".""Producing Code"" can take some time and ""Consuming Code"" must wait for the result.Learn more about Promises in the the chapter: JavaScript Promises.', 'A JavaScript Symbol is a primitive datatype just like Number, String, or Boolean.It represents a unique ""hidden"" identifier that no other code can accidentally access.For instance, if different coders want to add a person.id property to a person object belonging to a third-party code,\nthey could mix each others values.Using Symbol() to create a unique identifiers, solves this problem:', 'ES6 allows function parameters to have default values.', 'The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:', 'The includes() method returns true if a string contains a specified value,\notherwise false:', 'The startsWith() method returns true\nif a string begins with a specified value, otherwise false:', 'The endsWith() method returns true\nif a string ends with a specified value, otherwise false:', 'The Array.from() method returns an Array object from any object with a length \nproperty or any iterable object.', 'The keys() method returns an Array Iterator object with the keys of an array.', 'The find() method returns the value of the first array element that passes a \ntest function.This example finds (returns the value of ) the first element that is larger \nthan 18:Note that the function takes 3 arguments:', 'The findIndex() method returns the index of the first array element that \npasses a test function.This example finds the index of the first element that is larger than 18:Note that the function takes 3 arguments:', 'ES6 added the following methods to the Math object:', 'Math.trunc(x) returns the integer part of x:', 'Math.sign(x) returns if x is negative, null or positive:', 'Math.cbrt(x) returns the cube root of x:', 'Math.log2(x) returns the base 2 logarithm of x:', 'Math.log10(x) returns the base 10 logarithm of x:', 'ES6 added the following properties to the Number object:', 'ES6 added 2 new methods to the Number object:', 'The Number.isInteger() method returns true if the argument is an integer.', 'A safe integer is an integer that can be exactly represented as a double precision number.The Number.isSafeInteger() method returns true if the argument is a safe integer.', 'ES6 added 2 new global number methods:', 'The global isFinite() method returns false if the argument is Infinity or NaN.Otherwise it returns true:', 'The global isNaN() method returns true if the argument is NaN. Otherwise it returns false:', 'Modules are imported i two differen ways:Learn more about Modules in: JavaScript Modules.']","['\nvar x = 10;\n// Here x is 10\n{ \n\xa0\xa0let x = 2;\n  \xa0 // Here x is 2}\n// Here x is 10\n', '\nvar x = 10;\n// Here x is 10\n{ \n\xa0\xa0const x = 2;\n  \xa0 // Here x is 2}\n// Here x is 10\n', '\n// ES5\nvar x = function(x, y) {\n   \xa0\xa0\n   return x * y;\n}\n// ES6\nconst x = (x, y) => x * y;\n &&&&&& \nconst x = (x, y) => { return x * y };\n', '\nconst cars = [""BMW"", ""Volvo"", ""Mini""];\nlet text = """";\nfor (let x of cars) {\n\xa0 text += x + "" "";\n}\n &&&&&& \nlet language = ""JavaScript"";\nlet text = """";\n\nfor (let x of language) {\xa0 \n\xa0 text += x + "" "";\n}\n  ', ""\n// Create Objects\nconst apples = {name: 'Apples'};\nconst bananas = {name: 'Bananas'};\nconst oranges = {name: 'Oranges'};\n\n// Create a new Map\nconst fruits = new Map();\n\n// Add new Elements to the Map\nfruits.set(apples, 500);\nfruits.set(bananas, 300);\nfruits.set(oranges, 200);\n"", '\n// Create a Set\nconst letters = new Set();\n\n// Add some values to the Set\nletters.add(""a"");\nletters.add(""b"");\nletters.add(""c"");\n', '\nclass ClassName {\n\xa0  constructor() { ... }\n}\n &&&&&& \nclass Car {\n\xa0  constructor(name, year) {\n\xa0\xa0\xa0 this.name = name;\n\xa0\xa0\xa0 this.year = year;\n\xa0 }\n}\n', '\nconst myCar1 = new Car(""Ford"", 2014);\nconst myCar2 = new Car(""Audi"", 2019);\n', '\nconst myPromise = new Promise(function(myResolve, myReject) {\n// ""Producing Code"" (May take some time)\n\n\xa0 myResolve(); // when successful\n\xa0 myReject(); \xa0// when error\n});\n// ""Consuming Code"" (Must wait for a fulfilled Promise).\nmyPromise.then(\n\xa0 function(value) { /* code if successful */ },\n\xa0 function(error) { /* code if some error */ }\n);\n', '\nconst myPromise = new Promise(function(myResolve, myReject) {\n\xa0 setTimeout(function() { myResolve(""I love You !!""); }, 3000);});\nmyPromise.then(function(value) {\n\xa0 document.getElementById(""demo"").innerHTML = value;\n});\n', '\nconst person = {\n\xa0 firstName: ""John"",\n\xa0 lastName: ""Doe"",\n\xa0 age: 50,\n\xa0 eyeColor: ""blue""\n};\nlet id = Symbol(\'id\');\nperson[id] = 140353;\n// Now person[id] = 140353\n// but person.id is still undefined\n', '\nfunction myFunction(x, y = 10) {\xa0\n  // y is 10 if not passed or undefined\xa0\n  return x + y;}myFunction(5); // will return 15', '\nfunction sum(...args) {\n\xa0 let sum = 0;\n\xa0 for (let arg of args) sum += arg;\n\xa0 return sum;\n}\nlet x = sum(4, 9, 16, 25, 29, 100, 66, 77);\n', '\nlet text = ""Hello world, welcome to the universe."";\ntext.includes(""world"")\xa0\xa0\xa0\xa0// Returns true\n', '\nlet text = ""Hello world, welcome to the universe."";\n\ntext.startsWith(""Hello"")\xa0\xa0\xa0// Returns true\n', '\nvar text = ""John Doe"";\ntext.endsWith(""Doe"")\xa0\xa0\xa0\xa0// Returns true\n', '\nArray.from(""ABCDEFG"")\xa0\xa0\xa0// Returns [A,B,C,D,E,F,G]\n', '\nconst fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];\nconst keys = fruits.keys();\nlet text = """";\nfor (let x of keys) {\n\xa0 text += x + ""<br>"";}\n', '\n  const numbers = [4, 9, 16, 25, 29];let first = \n  numbers.find(myFunction);function myFunction(value, index, array) {\n  \xa0 return \n  value > 18;} ', '\n  const numbers = [4, 9, 16, 25, 29];let first = \n  numbers.findIndex(myFunction);function myFunction(value, index, array) {\n  \xa0 return \n  value > 18;} ', '\nMath.trunc(4.9);\xa0\xa0\xa0\xa0// returns 4\nMath.trunc(4.7);\xa0\xa0\xa0\xa0// returns 4\nMath.trunc(4.4);\xa0\xa0\xa0\xa0// returns 4\nMath.trunc(4.2);\xa0\xa0\xa0\xa0// returns 4\nMath.trunc(-4.2);\xa0\xa0\xa0\xa0// returns -4\n', '\nMath.sign(-4);\xa0\xa0\xa0\xa0// returns -1\nMath.sign(0);\xa0\xa0\xa0\xa0// returns 0\nMath.sign(4);\xa0\xa0\xa0\xa0// returns 1\n', '\nMath.cbrt(8);\xa0\xa0\xa0\xa0// returns 2\nMath.cbrt(64);\xa0\xa0\xa0\xa0// returns 4\nMath.cbrt(125);\xa0\xa0\xa0\xa0// returns 5\n', '\nMath.log2(2);\xa0\xa0\xa0\xa0// returns 1\n', '\nMath.log10(10);\xa0\xa0\xa0\xa0// returns 1\n', '\nlet x = Number.EPSILON;\n &&&&&& \nlet x = Number.MIN_SAFE_INTEGER;\n &&&&&& \nlet x = Number.MAX_SAFE_INTEGER;\n', '\nNumber.isInteger(10);\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // returns true\nNumber.isInteger(10.5);\xa0\xa0\xa0\xa0\xa0 // returns false\n', '\nNumber.isSafeInteger(10);\xa0\xa0\xa0\xa0// returns true\nNumber.isSafeInteger(12345678901234567890);\xa0 // returns false\n', '\nisFinite(10/0);\xa0\xa0\xa0\xa0\xa0\xa0 // returns false\nisFinite(10/1);\xa0\xa0\xa0\xa0\xa0\xa0 // returns true\n', '\nisNaN(""Hello"");\xa0\xa0\xa0\xa0\xa0\xa0 // returns true\n', '', '', '', '']",['New Features in ES6###Array find()###Array findIndex()###New Math Methods###New Number Properties###New Number Methods###New Global Methods###&&&|||The let keyword|||The const keyword|||Arrow Functions|||For/of|||Map Objects|||Set Objects|||Classes|||Promises|||Symbol|||Default Parameters|||Function Rest Parameter|||String.includes()|||String.startsWith()|||String.endsWith()|||Array.from()|||Array keys()|||Array find()|||Array findIndex()|||New Math Methods|||New Number Properties|||New Number Methods|||New Global Methods|||Iterables Object.entries|||JavaScript Modules|||&&&|||The item value|||The item index |||The array itself|||&&&|||The item value|||The item index |||The array itself|||&&&|||Math.trunc()|||Math.sign()|||Math.cbrt()|||Math.log2()|||Math.log10()|||&&&|||EPSILON|||MIN_SAFE_INTEGER|||MAX_SAFE_INTEGER|||&&&|||Number.isInteger()|||Number.isSafeInteger()|||&&&|||isFinite()|||isNaN()|||'],['|||||||||||||||&&&Chrome 58|||Edge 14|||Firefox 54|||Safari 10|||Opera 55|||&&&Jan 2017|||Aug 2016|||Mar 2017|||Jul 2016|||Aug 2018|||&&&'],[]
js||,https://www.w3schools.com/js/js_2016.asp,,"['Exponentiation Operator', 'Exponentiation Assignment', 'JavaScript Array.includes()']","['The exponentiation operator (**) raises the first operand to the power of the second operand.x ** y produces the same result as Math.pow(x, y):', 'Chrome 52 and Edge 14 was the first browsers to fully support the Exponentiation Operator:', 'ECMAScript 2016 introduced Array.prototype.includes to arrays.\nThis allows us to check if an element is present in an array:All modern browsers support Array.prototype.includes:']","['\nlet x = 5;\nlet z = x ** 2;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // result is 25\n &&&&&& \nlet x = 5;\nlet z = Math.pow(x,2);\xa0\xa0 // result is 25\n', '\nlet x = 5;\nx **= 2; // result 25\n', '']",['New Features in ECMAScript 2016###&&&|||JavaScript Exponentiation (**)|||JavaScript Exponentiation assignment (**=)|||JavaScript Array.prototype.includes|||'],"['|||||||||||||||&&&Chrome 52|||Edge 14|||Firefox 52|||Safari 10.1|||Opera 39|||&&&Jul 2016|||Aug 2016|||Mar 2017|||Mar 2017|||Aug 2016|||&&&', '|||||||||||||||&&&Chrome 47|||Edge 14|||Firefox 43|||Safari 9|||Opera 34|||&&&Dec 2015|||Aug 2016|||Dec 2015|||Oct 2015|||Dec 2015|||&&&']",[]
js||,https://www.w3schools.com/js/js_2017.asp,,"['JavaScript String Padding', 'JavaScript Object Entries', 'JavaScript Object Values', 'JavaScript Async Functions']","['ECMAScript 2017 added two String methods: padStart\nand padEnd to support padding at the beginning and at the end of a string.String Padding is not supported in Internet Explorer.Firefox and Safari were the first browsers with support for JavaScript string padding:', 'ECMAScript 2017 adds a new Object.entries method to objects.The Object.entries() method returns an array of the key/value pairs in an object:Object.entries() makes it simple to use objects in loops:Object.entries() also makes it simple to convert objects to maps:Chrome and Firefox were the first browsers with support for\nObject.entries:', 'Object.values are similar to Object.entries,\nbut returns a single dimension array of the object values:Firefox and Chrome were the first browsers with support for\nObject.values:', 'Firefox and Chrome were the first browsers with support for async JavaScript functions:']","['\nlet str = ""5"";\nstr = str.padStart(4,0);\n// result is 0005\n &&&&&& \nlet str = ""5"";\nstr = str.padEnd(4,0);\n// result is 5000\n', '\n  const person = {\xa0 firstName : ""John"",\xa0 lastName : ""Doe"",\xa0 \n  age : 50,\xa0 eyeColor : ""blue""};document.getElementById(""demo"").innerHTML = \n  Object.entries(person);\n &&&&&& \nconst fruits = {Bananas:300, Oranges:200, Apples:500};\n\nlet text = """";\nfor (let [fruit, value] of Object.entries(fruits)) {\n  text += fruit + "": "" + value + """";\n}\n &&&&&& \nconst fruits = {Bananas:300, Oranges:200, Apples:500};\n\nconst myMap = new Map(Object.entries(fruits));\n', '\n  const person = {\xa0 firstName : ""John"",\xa0 lastName : ""Doe"",\xa0 \n  age : 50,\xa0 eyeColor : ""blue""};document.getElementById(""demo"").innerHTML = \n  Object.values(person);\n', '']",['New Features in ECMAScript 2017###&&&|||JavaScript String padding|||JavaScript Object.entries|||JavaScript Object.values|||JavaScript async functions|||JavaScript shared memory|||'],"['|||||||||||||||&&&Chrome 57|||Edge 15|||Firefox 48|||Safari 10|||Opera 44|||&&&Mar 2017|||Apr 2017|||Aug 2016|||Sep 2016|||Mar 2017|||&&&', '|||||||||||||||&&&Chrome 47|||Edge 14|||Firefox 47|||Safari 10.1|||Opera 41|||&&&Jun 2016|||Aug 2016|||Jun 2016|||Mar 2017|||Oct 2016|||&&&', '|||||||||||||||&&&Chrome 54|||Edge 14|||Firefox 47|||Safari 10.1|||Opera 41|||&&&Oct 2016|||Aug 2016|||Jun 2016|||Mar 2017|||Oct 2016|||&&&', '|||||||||||||||&&&Chrome 55|||Edge 15|||Firefox 52|||Safari 11|||Opera 42|||&&&Dec 2016|||Apr 2017|||Mar 2017|||Sep 2017|||Dec 2016|||&&&']",[]
js||,https://www.w3schools.com/js/js_2018.asp,,['JavaScript Asynchronous Iteration'],"['ECMAScript 2018 added asynchronous iterators and iterables.With asynchronous iterables, we can use the await\nkeyword in for/of loops.\n\n\nExample\n\nfor await () {}\n\n\nFirefox and Safari were the first browsers with support for JavaScript asynchronous iteration:\n\n\n\n\n\n\n\n\n\n\nChrome 63\nEdge 79\nFirefox 57\nSafari 11\nOpera 50\n\n\nDec 2017\nJan 2020\nNov 2017\nSep 2017\nJan 2018\n\n\n\n\n\nJavaScript Promise.finally\nECMAScript 2018 finalizes the full implementation of the Promise object with Promise.finally:\n\nExample\n\nlet myPromise = new Promise();\n\nmyPromise.then();\nmyPromise.catch();\nmyPromise.finally();\n\n\nChrome and Firefox were the first browsers with support for Promise.finally:\n\n\n\n\n\n\n\n\n\n\nChrome 63\nEdge 18\nFirefox 58\nSafari 11.1\nOpera 50\n\n\nDec 2017\nNov 2018\nJan 2018\nMar 2018\nJan 2018\n\n\n\n\n\n\n\n\n\n\n\nJavaScript Object Rest Properties\nECMAScript 2018 added rest properties.\nThis allows us to destruct an object and collect the leftovers onto a new object:\n\nExample\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\ny; // 2\nz; // { a: 3, b: 4 }\n\n\nChrome, Firefox, ans Opera were the first browsers with support for object rest properties:\n\n\n\n\n\n\n\n\n\n\nChrome 60\nEdge 79\nFirefox 55\nSafari 11.1\nOpera 47\n\n\nJul 2017\nJan 2020\nAug 2017\nMar 2018\nAug 2017\n\n\n\n\n\nNew JavaScript RegExp Features\nECMAScript 2018 added 4 new RegExp features:\n\nUnicode Property Escapes (\\p{...})\nLookbehind Assertions (?<= ) and (?<! )\nNamed Capture Groups\ns (dotAll) Flag\n\nChrome and Firefox were the first browsers with support for all the new RegExp features:\n\n\n\n\n\n\n\n\n\n\nChrome 64\nEdge 79\nFirefox 78\nSafari 12\nOpera 51\n\n\nJan 2018\nJan 2020\nJun 2020\nSep 2018\nFeb 2018\n\n\n\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'ECMAScript 2018 finalizes the full implementation of the Promise object with Promise.finally:Chrome and Firefox were the first browsers with support for Promise.finally:', 'ECMAScript 2018 added rest properties.This allows us to destruct an object and collect the leftovers onto a new object:Chrome, Firefox, ans Opera were the first browsers with support for object rest properties:', 'ECMAScript 2018 added 4 new RegExp features:Chrome and Firefox were the first browsers with support for all the new RegExp features:']","['\nfor await () {}\n', '\nlet myPromise = new Promise();\n\nmyPromise.then();\nmyPromise.catch();\nmyPromise.finally();\n', '\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\ny; // 2\nz; // { a: 3, b: 4 }\n']",['New Features in ECMAScript 2018###New JavaScript RegExp Features###&&&|||Asynchronous Iteration|||Promise Finally|||Object Rest Properties|||New RegExp Features|||&&&|||Unicode Property Escapes (\\p{...})|||Lookbehind Assertions (?<= ) and (?<! )|||Named Capture Groups|||s (dotAll) Flag|||'],"['|||||||||||||||&&&Chrome 63|||Edge 79|||Firefox 57|||Safari 11|||Opera 50|||&&&Dec 2017|||Jan 2020|||Nov 2017|||Sep 2017|||Jan 2018|||&&&', '|||||||||||||||&&&Chrome 63|||Edge 18|||Firefox 58|||Safari 11.1|||Opera 50|||&&&Dec 2017|||Nov 2018|||Jan 2018|||Mar 2018|||Jan 2018|||&&&', '|||||||||||||||&&&Chrome 60|||Edge 79|||Firefox 55|||Safari 11.1|||Opera 47|||&&&Jul 2017|||Jan 2020|||Aug 2017|||Mar 2018|||Aug 2017|||&&&', '|||||||||||||||&&&Chrome 64|||Edge 79|||Firefox 78|||Safari 12|||Opera 51|||&&&Jan 2018|||Jan 2020|||Jun 2020|||Sep 2018|||Feb 2018|||&&&']",[]
js||,https://www.w3schools.com/js/js_ie_edge.asp,,"['The New Edge', 'Developers Support?', 'Older Applications', 'Government Recommendations']","['The new Microsoft Edge is Chromium based with Blink and V8 engines.It was released in January 2020, and is available for Windows 7, 8, and 10.It can also be downloaded for macOS, iOS, and Android.The new Edge follows the Modern Lifecycle Policy (updates on an approx. six-week cycle).', 'IE 11 is still a component of many Windows operating system and follows the Lifecycle Policy\nfor the product on which it is installed:', 'Many older PCs (like in public libraries) are still using Internet Explorer.Many legacy web applications are using Internet Explorer.Many legacy web applications are using Internet Explorer runtime DLLs.Many AJAX based applications are using Microsoft ActiveX components.In order to ease the migration from Internet Explorer,\nMicrosoft Edge offers Internet Explorer Mode, providing backward compatibility\nand enabling customers to continue to run legacy web applications.', 'Furthermore, some governments recommends continuing to support IE11:\nwww.gov.uk //// designing-for-different-browsers-and-devices']","['', '', '', '']",[''],"['Reported 24-06-2021:\nInternet Explorer is disabled in Windows 11\nSource: \nWindows 11 specifications|||&&&', 'Reported 15-06-2020:\nInternet Explorer is ""replaced"" by Edge in Windows 10\n\nSource ...\n|||&&&', 'Reported 15-06-2020:\nIE 11 goes out of support on June 15 2022\n\nSource ...\n|||&&&', '30-11-2020|||MS Teams ends support for IE 11|||&&&31-12-2020|||Azure DevOps Services ends support for IE 11|||&&&31-03-2021|||Azure Portal ends support for IE 11|||&&&17-08-2021|||Microsoft ends support for IE 11 across web services:\nOffice 365 - OneDrive Outlook|||&&&15-06-2022|||Microsoft ends all support for IE 11|||&&&', '31-12-2020|||Azure DevOps Services stops supporting Edge Legacy|||&&&09-03-2021|||End of Windows updates for Edge Legacy|||&&&13-04-2021|||Future Windows updates will remove Edge Legacy|||&&&', 'System|||Default Browser|||&&&Windows Embedded Compact 7|||Internet Explorer 7|||&&&Windows Embedded Compact 2013|||Internet Explorer 7|||&&&Windows 7|||Internet Explorer 11|||&&&Windows 8.X|||Internet Explorer 11|||&&&Windows 10|||Internet Explorer 11|||&&&Windows Server 2012|||Internet Explorer 11|||&&&Windows Server 2012 R2|||Internet Explorer 11|||&&&Windows Server 2016|||Internet Explorer 11|||&&&Windows Embedded Standard 7|||Internet Explorer 11|||&&&Windows Embedded POSReady 7|||Internet Explorer 11|||&&&Windows Thin PC|||Internet Explorer 11|||&&&Windows Embedded 8 Standard|||Internet Explorer 11|||&&&Windows 8.1 Industry Update|||Internet Explorer 11|||&&&']",['img_m365_ProductTeam.png']
js||,https://www.w3schools.com/js/js_history.asp,,"['JavaScript / ECMAScript', 'The ECMA Technical Committee 39', 'From ES4 to ES6']","[""JavaScript was invented by Brendan Eich in 1995.It was developed for Netscape 2, and became the ECMA-262 standard in 1997.After Netscape handed JavaScript over to ECMA, the Mozilla foundation \ncontinued to develop JavaScript for the Firefox browser.\nMozilla's latest version was 1.8.5. (Identical to ES5).Internet Explorer (IE4) was the first browser to support ECMA-262 Edition 1 (ES1)."", 'In 1996, Netscape and Brendan Eich took JavaScript to the ECMA international standards organization,\nand a technical committee (TC39) was created to develop the language.ECMA-262 Edition 1 was released in June 1997.', 'When the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into\n2 very different camps:\nThe ECMAScript 3.1 Camp:\nMicrosoft and Yahoo who wanted an incremental upgrade from ES3.\nThe ECMAScript 4 Camp:\nAdobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.\nAugust 13 2008, Brendan Eich wrote an\nemail:\nIt\'s no secret that the JavaScript standards body, Ecma\'s Technical  \nCommittee 39, has been split for over a year, with some members  \nfavoring ES4, a major fourth edition to ECMA-262, and others  \nadvocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3)  \nspecification. Now, I\'m happy to report, the split is over.\nThe solution was to work together:\n\nECMAScript 4 was renamed to ES5\nES5 should be an incremental upgrade of ECMAScript 3.\nFeatures of ECMAScript 4 should be picked up in later versions.\nTC39 should develop a new major release, bigger in scope than ES5.\n\nThe planned new release (ES6) was codenamed ""Harmony"" (Because of the split it created?).\nES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully\ncompliant by July 2013:\n\n\n\n\n\n\n\n\n\n\nChrome 23\nIE10 / Edge\nFirefox 21\nSafari 6\nOpera 15\n\n\nNov 2012\nSep 2012\nMay 2013\nJul 2012\nJul 2013\n\n\n\nES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March  2017:\n\n\n\n\n\n\n\n\n\n\nChrome 51\nEdge 14\nFirefox 52\nSafari 10\nOpera 38\n\n\nMay 2016\nAug 2016\nMar 2017\nSep 2016\nJun 2016\n\n\n\n\n\n❮ Previous\nNext ❯\n\n\n\n']","['', '', '']",[''],"['Year|||ECMA|||Browser|||&&&1995|||\xa0|||JavaScript was invented by Brendan Eich|||&&&1996|||\xa0|||Netscape 2 was released with JavaScript 1.0|||&&&1997|||\xa0|||JavaScript became an ECMA standard (ECMA-262)|||&&&1997|||ES1|||ECMAScript 1 was released|||&&&1997|||ES1|||IE 4 was the first browser to support ES1|||&&&1998|||ES2|||ECMAScript 2 was released|||&&&1998|||\xa0|||Netscape 42 was released with JavaScript 1.3|||&&&1999|||ES2|||IE 5 was the first browser to support ES2|||&&&1999|||ES3|||ECMAScript 3 was released|||&&&2000|||ES3|||IE 5.5 was the first browser to support ES3|||&&&2000|||\xa0|||Netscape 62 was released with JavaScript 1.5|||&&&2000|||\xa0|||Firefox 1 was released with JavaScript 1.5|||&&&2008|||ES4|||ECMAScript 4 was abandoned|||&&&2009|||ES5|||ECMAScript 5 was released|||&&&2011|||ES5|||IE 9 was the first browser to support ES5 *|||&&&2011|||ES5|||Firefox 4 was released with JavaScript 1.8.5|||&&&2012|||ES5|||Full support for ES5 in Safari 6|||&&&2012|||ES5|||Full support for ES5 in IE 10|||&&&2012|||ES5|||Full support for ES5 in Chrome 23|||&&&2013|||ES5|||Full support for ES5 in Firefox 21|||&&&2013|||ES5|||Full support for ES5 in Opera 15|||&&&2014|||ES5|||Full support for ES5 in all browsers|||&&&2015|||ES6|||ECMAScript 6 was released|||&&&2016|||ES6|||Full support for ES6 in Chrome 51|||&&&2016|||ES6|||Full support for ES6 in Opera 38|||&&&2016|||ES6|||Full support for ES6 in Edge 14|||&&&2016|||ES6|||Full support for ES6 in Safari 10|||&&&2015|||ES6|||Full support for ES6 in Firefox 52|||&&&2018|||ES6|||Full support for ES6 in all browsers **|||&&&', '|||||||||||||||&&&Chrome 23|||IE10 / Edge|||Firefox 21|||Safari 6|||Opera 15|||&&&Nov 2012|||Sep 2012|||May 2013|||Jul 2012|||Jul 2013|||&&&', '|||||||||||||||&&&Chrome 51|||Edge 14|||Firefox 52|||Safari 10|||Opera 38|||&&&May 2016|||Aug 2016|||Mar 2017|||Sep 2016|||Jun 2016|||&&&']",[]
js||Objects,https://www.w3schools.com/js/js_object_definition.asp,,"['JavaScript Primitives', 'Objects are Variables', 'Object Properties', 'Object Methods', 'Creating a JavaScript Object', 'Using an Object Literal', 'Using the JavaScript Keyword new', 'JavaScript Objects are Mutable']","['In JavaScript, almost ""everything"" is an object.All JavaScript values, except primitives, are objects.', 'A primitive value is a value that has no properties or methods.A primitive data type is data that has a primitive value.JavaScript defines 5 types of primitive data types:Primitive values are immutable (they are hardcoded and therefore cannot be changed).', 'JavaScript variables can contain single values:JavaScript variables can also contain many values.Objects are variables too. But objects can contain many \nvalues. Object values are written as name : value pairs (name and value separated by a \ncolon).It is a common practice to declare objects with the const keyword.', 'The named values, in JavaScript objects, are called properties.Objects written as name value pairs are similar to:', 'Methods are actions that can be performed on objects.Object properties can be both primitive values, other objects, and functions.An object method is an object property containing a function \ndefinition.You will learn more about methods in the next chapters.', 'With JavaScript, you can define and create your own objects.There are different ways to create new objects:', 'This is the easiest way to create a JavaScript Object.Using an object literal, you both define and create an object in one \nstatement.An object literal is a list of name:value pairs (like age:50) inside curly braces {}.The following example creates a new JavaScript object with four properties:Spaces and line breaks are not important. An object definition can span multiple lines:This example creates an empty JavaScript object, \nand then adds 4 properties:', 'The following example create a new JavaScript object\nusing new Object(), \nand then adds 4 properties:', 'Objects are mutable: They are addressed by reference, not by value.If person is an object, the following statement will not create a copy of person:The object x is not a copy of person. It is \nperson. \nBoth x and person are the same object.Any changes to x will also change person, because x and person are the same object. ']","['\nlet person = ""John Doe"";\n &&&&&& \nlet person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};\n &&&&&& \nconst person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};\n', '\nconst person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};\n &&&&&& \nconst person = {\xa0\xa0firstName: ""John"",\xa0\xa0lastName: ""Doe"",\xa0\xa0age: 50,\xa0\xa0eyeColor: ""blue""};\n &&&&&& \nconst person = {};\nperson.firstName = ""John"";\nperson.lastName = ""Doe"";\nperson.age = 50;\nperson.eyeColor = ""blue"";\n', '\nconst person = new Object();\nperson.firstName = ""John"";\nperson.lastName = ""Doe"";\nperson.age = 50;\nperson.eyeColor = ""blue"";\n', '', '', '', '', '']",[''],"['Value|||Type|||Comment|||&&&""Hello""|||string|||""Hello"" is always ""Hello""|||&&&3.14|||number|||3.14 is always 3.14|||&&&true|||boolean|||true is always true|||&&&false|||boolean|||false is always false|||&&&null|||null (object)|||null is always null|||&&&undefined|||undefined|||undefined is always undefined|||&&&', 'Property|||Value|||&&&firstName|||John|||&&&lastName|||Doe|||&&&age|||50|||&&&eyeColor|||blue|||&&&', 'Property|||Value|||&&&firstName|||John|||&&&lastName|||Doe|||&&&age|||50|||&&&eyeColor|||blue|||&&&fullName|||function() {return this.firstName + "" "" + this.lastName;}|||&&&']",[]
js||Object Properties,https://www.w3schools.com/js/js_object_properties.asp,Properties are the most important part of any JavaScript object.,"['JavaScript Properties', 'Accessing JavaScript Properties', 'JavaScript for...in Loop', 'Adding New Properties', 'Deleting Properties']","['Properties are the values associated with a JavaScript object.A JavaScript object is a collection of unordered properties.Properties can usually be changed, added, and deleted, but some are read only.', 'The syntax for accessing the property of an object is:oror', 'The JavaScript for...in statement loops through the properties of an object.The block of code inside of the for...in loop will be executed once for each property.Looping through the properties of an object:', 'You can add new properties to an existing object by simply giving it a value. Assume that the person object already exists -\nyou can then give it new properties:', 'The delete keyword deletes a property from an object:or delete person[""age""];The delete keyword deletes both the value of the property and the property itself.After deletion, the property cannot be used before it is added back again.The \ndelete operator is designed to be used on object properties. It has no effect on \nvariables or functions. \nThe delete operator should not be used on predefined JavaScript object \nproperties. It can crash your application.\n\n\nNested Objects\nValues in an object can be another object:\n\nExample\n\nmyObj = {\n\xa0\xa0name:""John"",\xa0 age:30,\n  \xa0 \n  cars: {\xa0\xa0\xa0 car1:""Ford"",\n  \xa0\xa0\xa0 \n  car2:""BMW"",\xa0\xa0\xa0 car3:""Fiat""\n  \xa0\xa0}}\n  \n\nYou can access nested objects using the dot notation or the bracket notation:\n\nExample\n\nmyObj.cars.car2;\n\nTry it Yourself »\n\nor:\n\nExample\n\nmyObj.cars[""car2""];\n\nTry it Yourself »\n\nor:\n\nExample\n\nmyObj[""cars""][""car2""];\n\nTry it Yourself »\n\nor:\n\nExample\n\nlet p1 = ""cars"";\nlet p2 = ""car2"";\nmyObj[p1][p2];\n\nTry it Yourself »\n\n\nNested Arrays and Objects\nValues in objects can be arrays, and values in arrays can be objects:\n\nExample\n\nconst myObj =\n  {\xa0\xa0name: ""John"",\xa0 age: 30,\n  \xa0 \n  cars: [\xa0\xa0\xa0\xa0{name:""Ford"", \n  models:[""Fiesta"", ""Focus"", ""Mustang""]},\xa0\xa0\xa0 \n  {name:""BMW"", models:[""320"", ""X3"", ""X5""]},\n  \xa0\xa0\xa0 \n  {name:""Fiat"", models:[""500"", ""Panda""]}\n  \xa0 ]}\n\nTo access arrays inside arrays, use a for-in loop for each array:\n\nExample\n\nfor (let i in myObj.cars) {\xa0 x += ""<h1>"" + myObj.cars[i].name \n  + ""</h1>"";\xa0 for (let j in myObj.cars[i].models) {\xa0\xa0\xa0 \n  x += myObj.cars[i].models[j];\xa0 }}\nTry it Yourself »\n\n\nProperty Attributes\nAll properties have a name. In addition they also have a value.\nThe value is one of the property\'s attributes.\nOther attributes are: enumerable, configurable, and writable.\nThese attributes define how the property can be accessed (is it readable?, is \nit writable?)\nIn JavaScript, all attributes can be read, but only the value attribute can \nbe changed (and only if the property is writable).\n( ECMAScript 5 has methods for both getting and setting all property \nattributes)\n\nPrototype Properties\nJavaScript objects inherit the properties of their prototype. \nThe delete keyword does not delete inherited properties, but if you delete a \nprototype property, it will affect all objects \ninherited from the prototype.\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'Values in an object can be another object:You can access nested objects using the dot notation or the bracket notation:or:or:or:', 'Values in objects can be arrays, and values in arrays can be objects:To access arrays inside arrays, use a for-in loop for each array:', ""All properties have a name. In addition they also have a value.The value is one of the property's attributes.Other attributes are: enumerable, configurable, and writable.These attributes define how the property can be accessed (is it readable?, is \nit writable?)In JavaScript, all attributes can be read, but only the value attribute can \nbe changed (and only if the property is writable).( ECMAScript 5 has methods for both getting and setting all property \nattributes)"", 'JavaScript objects inherit the properties of their prototype. The delete keyword does not delete inherited properties, but if you delete a \nprototype property, it will affect all objects \ninherited from the prototype.']","['\nperson.firstname + "" is "" + person.age + "" years old."";', '\nperson[""firstname""] + "" is "" + person[""age""] + "" years old."";', '\nconst person = {\n\xa0 fname:"" John"",\n\xa0 lname:"" Doe"",\n\xa0 age: 25\n};\n\nfor (let x in person) {\n  \xa0 txt += person[x];\n }', '\n person.nationality = ""English"";', '\nconst person = {\n\xa0 firstName: ""John"",\n\xa0 lastName: ""Doe"",\n\xa0 age: 50,\n\xa0 eyeColor: ""blue""\n};\ndelete person.age;\n &&&&&& \nconst person = {\n\xa0 firstName: ""John"",\n\xa0 lastName: ""Doe"",\n\xa0 age: 50,\n\xa0 eyeColor: ""blue""\n};\ndelete person[""age""];\n &&&&&& \nmyObj = {\n\xa0\xa0name:""John"",\xa0 age:30,\n  \xa0 \n  cars: {\xa0\xa0\xa0 car1:""Ford"",\n  \xa0\xa0\xa0 \n  car2:""BMW"",\xa0\xa0\xa0 car3:""Fiat""\n  \xa0\xa0}}\n   &&&&&& \nmyObj.cars.car2;\n &&&&&& \nmyObj.cars[""car2""];\n &&&&&& \nmyObj[""cars""][""car2""];\n &&&&&& \nlet p1 = ""cars"";\nlet p2 = ""car2"";\nmyObj[p1][p2];\n', '\nconst myObj =\n  {\xa0\xa0name: ""John"",\xa0 age: 30,\n  \xa0 \n  cars: [\xa0\xa0\xa0\xa0{name:""Ford"", \n  models:[""Fiesta"", ""Focus"", ""Mustang""]},\xa0\xa0\xa0 \n  {name:""BMW"", models:[""320"", ""X3"", ""X5""]},\n  \xa0\xa0\xa0 \n  {name:""Fiat"", models:[""500"", ""Panda""]}\n  \xa0 ]} &&&&&& \nfor (let i in myObj.cars) {\xa0 x += ""<h1>"" + myObj.cars[i].name \n  + ""</h1>"";\xa0 for (let j in myObj.cars[i].models) {\xa0\xa0\xa0 \n  x += myObj.cars[i].models[j];\xa0 }}']",[''],[],[]
js||Object Methods,https://www.w3schools.com/js/js_object_methods.asp,,[''],"['In JavaScript, the this keyword refers to an object.Which object depends on how this is being invoked (used or called).The this keyword refers to different objects depending on how it is used:', 'JavaScript methods are actions that can be performed on objects.A JavaScript method is a property containing a function \ndefinition.', 'You access an object method with the following syntax:You will typically describe fullName() as a method of the person object, and \nfullName as a property. The fullName property will execute (as a function) when it is invoked with ().This example accesses the fullName() method of a person object:If you access the fullName property, without (), it \nwill return the function definition:', 'Adding a new method to an object is easy: ', 'This example uses the toUpperCase() method of the String object, to convert a text \nto uppercase:The value of x, after execution of the code above will be:']","['\nconst person = {\n  \xa0 firstName: ""John"",\n\xa0\xa0lastName: ""Doe"",\n\xa0\xa0id: 5566,\n\xa0\xa0fullName: function() {\n\xa0\xa0\xa0 return this.firstName + "" "" + \nthis.lastName;\xa0\xa0}\n};\n', '\nname = person.fullName(); &&&&&& \nname = person.fullName;', '\n  person.name = function () {\xa0\xa0return this.firstName + "" "" + this.lastName;};\n']",[''],"['In an object method, this refers to the object.|||&&&Alone, this refers to the global object.|||&&&In a function, this refers to the global object.|||&&&In a function, in strict mode, this is undefined.|||&&&In an event, this refers to the element that received the event.|||&&&Methods like call(), apply(),\nand bind() can refer this to any object.|||&&&', 'Property|||Value|||&&&firstName|||John|||&&&lastName|||Doe|||&&&age|||50|||&&&eyeColor|||blue|||&&&fullName|||function() {return this.firstName + "" "" + this.lastName;}|||&&&']",[]
js||,https://www.w3schools.com/js/js_object_display.asp,,"['How to Display JavaScript Objects?', 'Displaying Object Properties', 'Displaying the Object in a Loop', 'Using Object.values()', 'Using JSON.stringify()', 'Stringify Dates', 'Stringify Functions', 'Stringify Arrays']","['Displaying a JavaScript object will output [object Object].Some common solutions to display JavaScript objects are:\n\nDisplaying the Object Properties by name\nDisplaying the Object Properties in a Loop\nDisplaying the Object using Object.values()\nDisplaying the Object using JSON.stringify()\n\n', 'The properties of an object can be displayed as a string:', 'The properties of an object can be collected in a loop:', 'Any JavaScript object can be converted to an array using Object.values():myArray is now a JavaScript array, ready to be displayed:Object.values() is supported in all major browsers since 2016.', 'Any JavaScript object can be stringified (converted to a string) with the JavaScript function\nJSON.stringify():myString is now a JavaScript string, ready to be displayed:JSON.stringify() is included in JavaScript and supported in all major browsers.', 'JSON.stringify converts dates into strings:', 'JSON.stringify will not stringify functions:This can be ""fixed"" if you convert the functions into strings before stringifying.', 'It is also possible to stringify JavaScript arrays:']","['\nconst person = {\n\xa0 name: ""John"",\n\xa0 age: 30,\n\xa0 city: ""New York""\n};\n\ndocument.getElementById(""demo"").innerHTML = person;\n', '\nconst person = {\n\xa0 name: ""John"",\n\xa0 age: 30,\n\xa0 city: ""New York""\n};\n\ndocument.getElementById(""demo"").innerHTML =\nperson.name + "","" + person.age + "","" + person.city;\n', '\nconst person = {\n\xa0 name: ""John"",\n\xa0 age: 30,\n\xa0 city: ""New York""\n};\n\nlet txt = """";\nfor (let x in person) {\ntxt += person[x] + "" "";\n};\ndocument.getElementById(""demo"").innerHTML = txt;\n', '\nconst person = {\n\xa0 name: ""John"",\n\xa0 age: 30,\n\xa0 city: ""New York""\n};\n\nconst myArray = Object.values(person); &&&&&& \nconst person = {\n\xa0 name: ""John"",\n\xa0 age: 30,\n\xa0 city: ""New York""\n};\n\nconst myArray = Object.values(person);\ndocument.getElementById(""demo"").innerHTML = myArray;\n', '\nconst person = {\n\xa0 name: ""John"",\n\xa0 age: 30,\n\xa0 city: ""New York""\n};\n\nlet myString = JSON.stringify(person); &&&&&& \nconst person = {\n\xa0 name: ""John"",\n\xa0 age: 30,\n\xa0 city: ""New York""\n};\n\nlet myString = JSON.stringify(person);\ndocument.getElementById(""demo"").innerHTML = myString;\n', '\nconst person = {\n\xa0 name: ""John"",\n\xa0 today: new Date()\n};\n\nlet myString = JSON.stringify(person);\ndocument.getElementById(""demo"").innerHTML = myString;\n', '\nconst person = {\n\xa0 name: ""John"",\n\xa0 age: function () {return 30;}\n};\n\nlet myString = JSON.stringify(person);\ndocument.getElementById(""demo"").innerHTML = myString;\n &&&&&& \nconst person = {\n\xa0 name: ""John"",\n\xa0 age: function () {return 30;}\n};\nperson.age = person.age.toString();\nlet myString = JSON.stringify(person);\ndocument.getElementById(""demo"").innerHTML = myString;\n', '\nconst arr = [""John"", ""Peter"", ""Sally"", ""Jane""];\nlet myString = JSON.stringify(arr);\ndocument.getElementById(""demo"").innerHTML = myString;\n']",[''],['|||||||||||||||&&&54 (2016)|||14 (2016)|||47 (2016)|||10 (2016)|||41 (2016)|||&&&'],[]
js||,https://www.w3schools.com/js/js_object_accessors.asp,,"['JavaScript Accessors (Getters and Setters)', 'JavaScript Getter (The get Keyword)', 'JavaScript Setter (The set Keyword)', 'JavaScript Function or Getter?', 'Data Quality', 'Why Using Getters and Setters?', 'Object.defineProperty()']","['ECMAScript 5 (ES5 2009) introduced Getter and Setters.Getters and setters allow you to define Object Accessors (Computed \nProperties).', 'This example uses a lang property to get \nthe value of the language property.', 'This example uses a lang property to set \nthe value of the language property.', 'What is the differences between these two examples?Example 1 access fullName as a function: person.fullName().Example 2 access fullName as a property: person.fullName.The second example provides a simpler syntax.', 'JavaScript can secure better data quality when using getters and setters.Using the lang property, in this example, returns the value \nof the language property in upper case:Using the lang property, in this example, stores an upper case \nvalue in the language property:', 'The Object.defineProperty() method can also be used to add Getters and \nSetters:', '']","['\n// Create an object:\nconst person = {\n\xa0 firstName: ""John"",\n\xa0 lastName: ""Doe"",\n\xa0 language: ""en"",\n\xa0 get lang() {\n\xa0\xa0\xa0 return this.language;\n  \xa0 }};\n// Display data from the object using a getter:\ndocument.getElementById(""demo"").innerHTML = person.lang;\n', '\nconst person = {\n\xa0 firstName: ""John"",\n\xa0\xa0lastName: ""Doe"",\n\xa0\xa0language: """",\n  \xa0 set lang(lang) {\n\xa0\xa0\xa0\xa0this.language = lang;\n  \xa0\xa0}};\n// Set an object \nproperty using a setter:\nperson.lang = ""en"";\n// Display data from the object:\ndocument.getElementById(""demo"").innerHTML = person.language;\n', '\nconst person = {\n\xa0 firstName: ""John"",\n\xa0 lastName: ""Doe"",\n\xa0 fullName: function() {\n\xa0\xa0\xa0 return this.firstName + "" "" + \nthis.lastName;\xa0\xa0}\n};// Display data from the object using a method:\n  document.getElementById(""demo"").innerHTML = person.fullName();', '\nconst person = {\n\xa0 firstName: ""John"",\n\xa0 lastName: ""Doe"",\n\xa0 get fullName() {\n\xa0\xa0\xa0 return this.firstName + "" "" + \nthis.lastName;\xa0 }\n};// Display data from the object using a getter:\n  document.getElementById(""demo"").innerHTML = person.fullName;', '\n// Create an object:\nconst person = {\n\xa0\xa0firstName: ""John"",\n\xa0\xa0lastName: ""Doe"",\n\xa0 language: ""en"",\n\xa0 get lang() {\n\xa0\xa0\xa0 return this.language.toUpperCase();\n  \xa0\xa0}};\n// Display data from the object using a getter:\ndocument.getElementById(""demo"").innerHTML = person.lang;\n &&&&&& \nconst person = {\n\xa0 firstName: ""John"",\n\xa0\xa0lastName: ""Doe"",\n\xa0 language: """",\n\xa0\xa0set lang(lang) {\n  \xa0\xa0\xa0 this.language = lang.toUpperCase();\n  \xa0 }};\n// Set an object \nproperty using a setter:\nperson.lang = ""en"";\n// Display data from the object:\ndocument.getElementById(""demo"").innerHTML = person.language;\n', '', '']",['Why Using Getters and Setters?###&&&|||It gives simpler syntax|||It allows equal syntax for properties and methods|||It can secure better data quality|||It is useful for doing things behind-the-scenes|||'],[],[]
js||Object Constructors,https://www.w3schools.com/js/js_object_constructors.asp,,"['Object Types (Blueprints) (Classes)', '']","['The examples from the previous chapters are limited. They only create single objects.Sometimes we need a ""blueprint"" for creating many objects of the same ""type"".The way to create an ""object type"", is to use an object constructor function.In the example above, function Person() is an object constructor function.Objects of the same type are created by calling the constructor function with the new keyword:', 'In JavaScript, the this keyword refers to an object.Which object depends on how this is being invoked (used or called).The this keyword refers to different objects depending on how it is used:', 'Adding a new property to an existing object is easy: The property will be added to myFather. Not to myMother. (Not to any other person objects).', 'Adding a new method to an existing object is easy: The method will be added to myFather. Not to myMother. (Not to any other person objects).', 'You cannot add a new property to an object constructor the same way you \nadd a new property to an existing object:To add a new property to a constructor, you must add it to the \nconstructor function:', 'Your constructor function can also define methods:You cannot add a new method to an object constructor the same way you add a \nnew method to an existing object.Adding methods to an object constructor must be done inside the \nconstructor function:The changeName() function assigns the value of name to the person\'s \nlastName property.JavaScript knows which person you are \ntalking about by ""substituting"" this with myMother.', 'JavaScript has built-in constructors for native objects:', 'As you can see above, JavaScript has object versions of the primitive \ndata types String, Number, and Boolean. But there is no reason to create complex objects. Primitive values \nare much faster:Use string literals """" instead of new String().Use number literals 50 instead of new Number().Use boolean literals true / false instead of new Boolean().Use object literals {} instead of new Object().Use array literals [] instead of new Array().Use pattern literals /()/ instead of new RegExp().Use function expressions () {} instead of new Function().', 'Normally, strings are created as primitives: firstName = ""John""But strings can also be created as objects using the new keyword:\nfirstName = new String(""John"")Learn why strings should not be created as object in the chapter\nJS Strings. ', 'Normally, numbers are created as primitives: x = 30But numbers can also be created as objects using the new keyword:\nx = new \nNumber(30)Learn why numbers should not be created as object in the chapter\nJS Numbers. ', 'Normally, booleans are created as primitives: x = \nfalseBut booleans can also be created as objects using the new keyword:\nx = new Boolean(false)Learn why booleans should not be created as object in the chapter\nJS Booleans. ']","['\nfunction Person(first, last, age, eye) {\n\xa0\xa0this.firstName = first;\n\xa0\xa0this.lastName = last;\n\xa0\xa0this.age = age;\n\xa0\xa0this.eyeColor = eye;\n}\n', '\nconst myFather = new Person(""John"", ""Doe"", 50, ""blue"");\nconst myMother = new Person(""Sally"", ""Rally"", 48, ""green"");\n', '\nmyFather.nationality = ""English"";\n', '\nmyFather.name = function () {\xa0\xa0return this.firstName + "" "" + this.lastName;};\n', '\n Person.nationality = ""English"";\n &&&&&& \nfunction Person(first, last, age, eyecolor) {\n  \xa0\nthis.firstName = first;\n  \xa0\nthis.lastName = last;\n  \xa0\nthis.age = age;\n\xa0\xa0this.eyeColor = eyecolor;\xa0\xa0this.nationality = ""English"";\n}\n', '\nfunction Person(first, last, age, eyecolor) {\n  \xa0\nthis.firstName = first;\n  \xa0\nthis.lastName = last;\n  \xa0\nthis.age = age;\n  \xa0\nthis.eyeColor = eyecolor;\xa0\xa0this.name = function() {\n\xa0\xa0\xa0\xa0return this.firstName + "" "" + this.lastName;\n\xa0\xa0};\n}\n &&&&&& \nfunction Person(firstName, lastName, age, eyeColor) {\n\xa0\xa0this.firstName = firstName;\xa0 \n  \xa0\nthis.lastName = lastName;\n  \xa0\nthis.age = age;\n\xa0\xa0this.eyeColor = eyeColor;\n\xa0\xa0this.changeName = function (name) {\n  \xa0\xa0\xa0\nthis.lastName = name;\n\xa0\xa0};\n}', '\nmyMother.changeName(""Doe"");', '\nnew String()\xa0\xa0\xa0 // A new String object\nnew Number()\xa0\xa0\xa0 // A new Number object\nnew Boolean()\xa0\xa0 // A new Boolean object\nnew Object()\xa0\xa0\xa0 // A new Object object\nnew Array()\xa0\xa0\xa0\xa0 // A new Array object\nnew RegExp()\xa0\xa0\xa0 // A new RegExp object\nnew Function()\xa0 // A new Function object\nnew Date()\xa0\xa0\xa0\xa0\xa0 // A new Date object\n', '\nlet x1 = """";\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new primitive string\nlet x2 = 0;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new primitive number\nlet x3 = false;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new primitive boolean\n\nconst x4 = {};\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new Object object\nconst x5 = [];\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new Array object\nconst x6 = /()/\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // new RegExp object\nconst x7 = function(){};\xa0// new function']",[''],"['In an object method, this refers to the object.|||&&&Alone, this refers to the global object.|||&&&In a function, this refers to the global object.|||&&&In a function, in strict mode, this is undefined.|||&&&In an event, this refers to the element that received the event.|||&&&Methods like call(), apply(),\nand bind() can refer this to any object.|||&&&']",[]
js||Object Prototypes,https://www.w3schools.com/js/js_object_prototypes.asp,"All JavaScript objects inherit properties and methods 
from a prototype.","['Prototype Inheritance', 'Adding Properties and Methods to Objects', '']","['In the previous chapter we learned how to use an object constructor:We also learned that you can not add a new property to an existing object constructor:To add a new property to a constructor, you must add it to the \nconstructor function:', 'All JavaScript objects inherit properties and methods from a prototype:The Object.prototype is on the top of the prototype inheritance chain:Date objects, Array objects, and Person objects inherit from Object.prototype.', 'Sometimes you want to add new properties (or methods) to all existing objects of a given type.Sometimes you want to add new properties (or methods) to an object \nconstructor.', 'The JavaScript prototype property allows you to add new properties to object \nconstructors:The JavaScript prototype property also allows you to add new methods to objects \nconstructors:']","['\nfunction Person(first, last, age, eyecolor) {\n  \xa0\nthis.firstName = first;\n\xa0\xa0this.lastName = last;\n  \xa0\nthis.age = age;\n  \xa0\nthis.eyeColor = eyecolor;\n}\nconst myFather = new Person(""John"", ""Doe"", 50, ""blue"");\nconst myMother = new Person(""Sally"", ""Rally"", 48, ""green"");\n &&&&&& \n Person.nationality = ""English"";\n &&&&&& \nfunction Person(first, last, age, eyecolor) {\n  \xa0\nthis.firstName = first;\n  \xa0\nthis.lastName = last;\n  \xa0\nthis.age = age;\n  \xa0\nthis.eyeColor = eyecolor;\xa0\xa0this.nationality = ""English"";\n}\n', '', '']",['Prototype Inheritance###&&&|||Date objects inherit from Date.prototype|||Array objects inherit from Array.prototype|||Person objects inherit from Person.prototype|||'],[],[]
js||,https://www.w3schools.com/js/js_object_iterables.asp,,"['Iterating Over an Array', 'JavaScript Iterators']","['You can use a for..of loop to iterate over the elements of an Array:', 'The iterator protocol defines how to produce a sequence of values from an object.An object becomes an iterator when it implements a next() method.The next() method must return an object with two properties:\n\nvalue (the next value)\ndone (true or false)\n\n\n\nvalue\nThe value returned by the iterator\n(Can be omitted if done is true)\n\n\ndone\n\ntrue if the iterator has completed\nfalse if the iterator has produced a new value\n\n\n\n\n\n\n\n\n\nHome Made Iterable\nThis iterable returns never ending: 10,20,30,40,.... Everytime \nnext() is called:\n\nExample\n\n// Home Made Iterable\nfunction myNumbers() {\n\xa0\xa0let n = 0;\n\xa0\xa0return {\n\xa0\xa0\xa0\xa0next: function() {\n\xa0\xa0\xa0\xa0\xa0\xa0n += 10;\n\xa0\xa0\xa0\xa0\xa0\xa0return {value:n, done:false};\n\xa0\xa0\xa0\xa0}\n\xa0\xa0};\n}\n\n// Create Iterable\nconst n = myNumbers();\nn.next(); // Returns 10\nn.next(); // Returns 20\nn.next(); // Returns 30\n\nTry it Yourself »\n\n\nThe problem with a home made iterable:\nIt does not support the JavaScript for..of statement.\n\nA JavaScript iterable is an object that has a Symbol.iterator.\nThe Symbol.iterator is a function that returns a next() function.\nAn iterable can be iterated over with the code: for (const x of iterable) { }\n\nExample\n\n// Create an Object\nmyNumbers = {};\n\n// Make it Iterable\nmyNumbers[Symbol.iterator] = function() {\n\xa0\xa0let n = 0;\n\xa0\xa0done = false;\n\xa0\xa0return {\n\xa0\xa0\xa0\xa0next() {\n\xa0\xa0\xa0\xa0\xa0\xa0n += 10;\n\xa0\xa0\xa0\xa0\xa0\xa0if (n == 100) {done = true}\n\xa0\xa0\xa0\xa0\xa0\xa0return {value:n, done:done};\n\xa0\xa0\xa0\xa0}\n\xa0\xa0};\n}\n\nNow you can use for..of\n\nfor (const num of myNumbers) {\n\xa0\xa0// Any Code Here\n}\n\nTry it Yourself »\n\nThe Symbol.iterator method is called automatically by for..of.\nBut we can also do it ""manually"":\n\nExample\n\nlet iterator = myNumbers[Symbol.iterator]();\n\nwhile (true) {\n\xa0\xa0const result = iterator.next();\n\xa0\xa0if (result.done) break;\n\xa0\xa0// Any Code Here\n}\n\nTry it Yourself »\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'This iterable returns never ending: 10,20,30,40,.... Everytime \nnext() is called:A JavaScript iterable is an object that has a Symbol.iterator.The Symbol.iterator is a function that returns a next() function.An iterable can be iterated over with the code: for (const x of iterable) { }\n\nExample\n\n// Create an Object\nmyNumbers = {};\n\n// Make it Iterable\nmyNumbers[Symbol.iterator] = function() {\n\xa0\xa0let n = 0;\n\xa0\xa0done = false;\n\xa0\xa0return {\n\xa0\xa0\xa0\xa0next() {\n\xa0\xa0\xa0\xa0\xa0\xa0n += 10;\n\xa0\xa0\xa0\xa0\xa0\xa0if (n == 100) {done = true}\n\xa0\xa0\xa0\xa0\xa0\xa0return {value:n, done:done};\n\xa0\xa0\xa0\xa0}\n\xa0\xa0};\n}\n\nNow you can use for..of\n\nfor (const num of myNumbers) {\n\xa0\xa0// Any Code Here\n}\n\nTry it Yourself »\n\nThe Symbol.iterator method is called automatically by for..of.\nBut we can also do it ""manually"":\n\nExample\n\nlet iterator = myNumbers[Symbol.iterator]();\n\nwhile (true) {\n\xa0\xa0const result = iterator.next();\n\xa0\xa0if (result.done) break;\n\xa0\xa0// Any Code Here\n}\n\nTry it Yourself »\n\n\n\n❮ Previous\nNext ❯\n\n\n\n']","['\nfor (const x of ""W3Schools"") {\n\xa0\xa0// code block to be executed\n}\n', '\nfor (const x of [1,2,3,4,5] {\n\xa0\xa0// code block to be executed\n}\n']",[''],['value|||&&&done|||&&&'],[]
js||,https://www.w3schools.com/js/js_object_sets.asp,,"['How to Create a Set', 'The new Set() Method', 'The add() Method', 'The forEach() Method', 'The values() Method', 'The keys() Method', 'The entries() Method', 'Sets are Objects']","['You can create a JavaScript Set by:', 'Pass an Array to the new Set() constructor:Create a Set and add literal values:Create a Set and add variables:', 'If you add equal elements, only the first will be saved:', 'The forEach() method invokes a function for each Set element:', 'The values() method returns an Iterator object containing all the values in a Set:Now you can use the Iterator object to access the elements:', '', '', '']","['\n// Create a Set\nconst letters = new Set([""a"",""b"",""c""]);\n &&&&&& \n// Create a Set\nconst letters = new Set();\n\n// Add Values to the Set\nletters.add(""a"");\nletters.add(""b"");\nletters.add(""c"");\n &&&&&& \n// Create Variables\nconst a = ""a"";\nconst b = ""b"";\nconst c = ""c"";\n\n// Create a Set\nconst letters = new Set();\n\n// Add Variables to the Set\nletters.add(a);\nletters.add(b);\nletters.add(c);\n', '\nletters.add(""d"");\nletters.add(""e"");\n &&&&&& \nletters.add(""a"");\nletters.add(""b"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\nletters.add(""c"");\n', '\n// Create a Set\nconst letters = new Set([""a"",""b"",""c""]);\n\n// List all entries\nlet text = """";\nletters.forEach (function(value) {\n\xa0\xa0text += value;\n})\n', '\nletters.values()\xa0\xa0\xa0// Returns [object Set Iterator]\n &&&&&& \n// Create an Iterator\nconst myIterator = letters.values();\n\n// List all Values\nlet text = """";\nfor (const entry of myIterator) {\n\xa0\xa0text += entry;\n}\n', '\nletters.keys()\xa0\xa0\xa0// Returns [object Set Iterator]\n', '\n// Create an Iterator\nconst myIterator = letters.entries();\n\n// List all Entries\nlet text = """";\nfor (const entry of myIterator) {\n\xa0\xa0text += entry;\n}\n', '', '']",['How to Create a Set###&&&|||Passing an Array to new Set()|||Create a new Set and use add() to add values|||Create a new Set and use add() to add variables|||'],"['Method|||Description|||&&&new Set()|||Creates a new Set|||&&&add()|||Adds a new element to the Set|||&&&delete()|||Removes an element from a Set|||&&&has()|||Returns true if a value exists|||&&&clear()|||Removes all elements from a Set|||&&&forEach()|||Invokes a callback for each element|||&&&values()|||Returns an Iterator with all the values in a Set|||&&&keys()|||Same as values()|||&&&entries()|||Returns an Iterator with the [value,value] pairs from a Set|||&&&', 'Property|||Description|||&&&size|||Returns the number elements in a Set|||&&&']",[]
js||,https://www.w3schools.com/js/js_object_maps.asp,,"['How to Create a Map', 'new Map()', 'Map.set()', 'Map.get()', 'Map.size', 'Map.delete()', 'Map.clear()', 'Map.has()', 'Maps are Objects', 'JavaScript Objects vs Maps', 'Map.forEach()', 'Map.keys()', 'Map.values()', 'Map.entries()', 'Objects as Keys', 'Browser Support']","['You can create a JavaScript Map by:', 'You can create a Map by passing an Array to the new Map() constructor:', 'You can add elements to a Map with the set() method:The set() method can also be used to change existing Map values:', 'The get() method gets the value of a key in a Map:', 'The size property returns the number of elements in a Map:', 'The delete() method removes a Map element:', 'The clear() method removes all the elements from a Map:', 'The has() method returns true if a key exists in a Map:', 'typeof returns object:instanceof Map returns true:', 'The forEach() method invokes a callback for each key/value pair in a Map:', 'The keys() method returns an iterator object with the keys in a Map:', 'The values method returns an iterator object with the values in a Map:', 'The entries() method returns an iterator object with the [key,values] in a Map:', 'Remember: The key is an object (apples), not a string (""apples""):', 'JavaScript Maps are supported in all browsers, except Internet Explorer:', '']","['\n// Create a Map\nconst fruits = new Map([\n\xa0 [""apples"", 500],\n\xa0 [""bananas"", 300],\n\xa0 [""oranges"", 200]\n]);\n', '\n// Create a Map\nconst fruits = new Map();\n\n// Set Map Values\nfruits.set(""apples"", 500);\nfruits.set(""bananas"", 300);\nfruits.set(""oranges"", 200);\n &&&&&& \nfruits.set(""apples"", 500);\n', '\nfruits.get(""apples"");\xa0\xa0\xa0\xa0// Returns 500\n', '\nfruits.size;\n', '\nfruits.delete(""apples"");\n', '\nfruits.clear();\n', '\nfruits.has(""apples"");\n', '\nfruits.delete(""apples"");\nfruits.has(""apples"");\n', '\n// Returns object:\ntypeof fruits;\n &&&&&& \n// Returns true:\nfruits instanceof Map;\n', '\n// List all entries\nlet text = """";\nfruits.forEach (function(value, key) {\n\xa0\xa0text += key + \' = \' + value;\n})\n', '\n// List all keys\nlet veggies = """";\nfor (const x of fruits.keys()) {\n\xa0\xa0veggies += x;\n}\n', '\n// Sum all values\nlet total = 0;\nfor (const x of fruits.values()) {\n\xa0\xa0total += x;\n}\n', '\n// List all entries\nlet text = """";\nfor (const x of fruits.entries()) {\n\xa0\xa0text += x;\n}\n', '\n// Create Objects\nconst apples = {name: \'Apples\'};\nconst bananas = {name: \'Bananas\'};\nconst oranges = {name: \'Oranges\'};\n\n// Create a Map\nconst fruits = new Map();\n\n// Add new Elements to the Map\nfruits.set(apples, 500);\nfruits.set(bananas, 300);\nfruits.set(oranges, 200);\n &&&&&& \nfruits.get(""apples"");\xa0\xa0// Returns undefined\n', '', '']",['How to Create a Map###&&&|||Passing an Array to new Map()|||Create a Map and use Map.set()|||'],"['Method|||Description|||&&&new Map()|||Creates a new Map object|||&&&set()|||Sets the value for a key in a Map|||&&&get()|||Gets the value for a key in a Map|||&&&clear()|||Removes all the elements from a Map|||&&&delete()|||Removes a Map element specified by a key|||&&&has()|||Returns true if a key exists in a Map|||&&&forEach()|||Invokes a callback for each key/value pair in a Map|||&&&entries()|||Returns an iterator object with the [key, value] pairs in a Map|||&&&keys()|||Returns an iterator object with the keys in a Map|||&&&values()|||Returns an iterator object of the values in a Map|||&&&', 'Property|||Description|||&&&size|||Returns the number of Map elements|||&&&', '|||Object|||Map|||&&&Iterable|||&&&Size|||&&&Key Types|||&&&Key Order|||&&&Defaults|||&&&', '|||||||||||||||&&&Chrome|||Edge|||Firefox|||Safari|||Opera|||&&&']",[]
js||,https://www.w3schools.com/js/js_object_es5.asp,ECMAScript 5 (2009) added a lot of new Object Methods to JavaScript.,"['Changing a Property Value', 'Changing Meta Data', 'Listing All Properties', 'Listing Enumerable Properties', 'Adding a Property', 'Adding Getters and Setters', 'A Counter Example']","['This example changes a property value:', 'ES5 allows the following property meta data to be changed:ES5 allows getters and setters to be changed:This example makes language read-only:This example makes language not enumerable:', 'This example list all properties of an object:', 'This example list only the enumerable properties of an object:', 'This example adds a new property to an object:', 'The Object.defineProperty() method can also be used to add Getters and \nSetters:', '']","['\n// Create object with an existing object as prototype\nObject.create()\n// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing Properties\nObject.getOwnPropertyDescriptor(object, property)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)\n// Returns enumerable properties as an array\nObject.keys(object)\n', '\n// Prevents adding properties to an object\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents changes of object properties (not values)\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)\n', '\nObject.defineProperty(object, property, {value : value}) &&&&&& \nconst person = {\xa0\xa0firstName: ""John"",\xa0 \n  lastName : ""Doe"",\xa0 language : ""EN"" };// Change a propertyObject.defineProperty(person, ""language"", \n  {value : ""NO""});', '\nwritable : true\xa0 \xa0\xa0\xa0\xa0// Property value can be changed\nenumerable : true\xa0 \xa0 // Property can be enumerated\nconfigurable : true\xa0 // Property can be reconfigured ', '\nwritable : false\xa0\xa0\xa0\xa0 // Property value can not be changed\nenumerable : false\xa0\xa0 // Property can be not enumerated\nconfigurable : false // Property can be not reconfigured\n', '\n// Defining a getter\nget: function() { return language }\n// Defining a setter\nset: function(value) { language = value }\n', '\nObject.defineProperty(person, ""language"", {writable:false});\n', '\nObject.defineProperty(person, ""language"", {enumerable:false});\n', '\nconst person = {\xa0 firstName: ""John"",\xa0 \n  lastName : ""Doe"",\xa0 language : ""EN"" };\n  Object.defineProperty(person, ""language"", {enumerable:false});Object.getOwnPropertyNames(person);\xa0 // Returns an array of \n  properties', '\nconst person = {\xa0\xa0firstName: ""John"",\xa0 \n  lastName : ""Doe"",\xa0\xa0language : ""EN"" };\n  Object.defineProperty(person, ""language"", {enumerable:false});Object.keys(person);\xa0 // Returns an array \n  of enumerable  \n  properties', '\n  // Create an object:const person = {\xa0\xa0firstName: ""John"",\xa0\xa0lastName : \n  ""Doe"",\xa0 language : ""EN""};// Add a propertyObject.defineProperty(person, ""year"", \n  {value:""2008""});', '\n//Create an objectconst person = {firstName:""John"", lastName:""Doe""};\n// Define a getterObject.defineProperty(person, ""fullName"", {\xa0\xa0get: \nfunction () {return this.firstName + "" "" + this.lastName;}});']",[''],[],[]
js||Function Definitions,https://www.w3schools.com/js/js_function_definition.asp,"JavaScript functions are defined with the
function keyword.","['Function Declarations', 'Function Expressions', 'The Function() Constructor', 'Function Hoisting', 'Self-Invoking Functions', 'Functions Can Be Used as Values', 'Functions are Objects', 'Arrow Functions']","['You can use a function declaration or a \nfunction expression.', 'Earlier in this tutorial, you learned that functions are declared with the \nfollowing syntax:Declared functions are not executed immediately. They are ""saved for later use"", \nand will be executed later, when they are invoked (called upon).', 'A JavaScript function can also be defined using an expression.A function expression can be stored in a variable:After a function expression has been stored in a variable, the variable can \nbe used as a function:The function above is actually an anonymous function (a function without a \nname).Functions stored in variables do not need function names. They are always \ninvoked (called) using the variable name.', ""As you have seen in the previous examples, JavaScript functions are defined \nwith the function keyword.Functions can also be defined with a built-in JavaScript function constructor called \nFunction().You actually don't have to use the function constructor. The example above is the same as writing:"", 'Earlier in this tutorial, you learned about ""hoisting"" (JavaScript Hoisting).Hoisting is JavaScript\'s default behavior of moving declarations to the top of the \ncurrent scope.Hoisting applies to variable declarations and to function declarations.Because of this, JavaScript functions can be called before they are declared:Functions defined using an expression are not hoisted.', 'Function expressions can be made ""self-invoking"".A self-invoking expression is invoked (started) automatically, without being called.Function expressions will execute automatically if the expression is followed \nby ().You cannot self-invoke a function declaration.You have to add \nparentheses around the function to indicate that it is a function expression:The function above is actually an anonymous self-invoking function (function \nwithout name).', 'JavaScript functions can be used as values:JavaScript functions can be used in expressions:', 'The typeof operator in JavaScript returns ""function"" for \nfunctions.But, JavaScript functions can best be described as objects.JavaScript functions have both properties and \nmethods.The arguments.length property returns the number of arguments received when \nthe function was invoked:The toString() method returns the function as a string:', ""Arrow functions allows a short syntax for writing function expressions.You don't need the function keyword, the return keyword, and the \ncurly brackets.Arrow functions do not have their own this.\nThey are not well suited for defining object methods.Arrow functions are not hoisted. They must be defined before they are used.Using const\nis safer than using var, because a function expression is \nalways constant value.You can only omit the return keyword and the curly brackets if the function is a single statement. \nBecause of this, it might be a good habit to always keep them:""]","['\nfunction myFunction(a, b) {\n \xa0 return a * b;}\n', '\nconst x = function (a, b) {return a * b};\n &&&&&& \nconst x = function (a, b) {return a * b};\nlet z = x(4, 3);', '\nconst myFunction = new Function(""a"", ""b"", ""return a * b"");\nlet x = myFunction(4, 3); &&&&&& \nconst myFunction = function (a, b) {return a * b};\nlet x = myFunction(4, 3);', '\n(function () {\n\xa0\xa0let x = ""Hello!!""; \xa0// I will invoke myself\n})();\n', '\nfunction myFunction(a, b) {\xa0 return a * b;}\nlet x = myFunction(4, 3); &&&&&& \nfunction myFunction(a, b) {\xa0 return a * b;}\nlet x = myFunction(4, 3) * 2;', '\nfunction myFunction(a, b) {\xa0\xa0return arguments.length;} &&&&&& \nfunction myFunction(a, b) {\xa0 return a * b;}let text = myFunction.toString();', '', '']",[''],[],[]
js||Function Parameters,https://www.w3schools.com/js/js_function_parameters.asp,"A JavaScript function does not perform any checking on 
parameter values (arguments).","['Function Parameters and Arguments', 'Parameter Rules', 'Default Parameters', 'The Arguments Object', 'Arguments are Passed by Value', 'Objects are Passed by Reference']","['Earlier in this tutorial, you learned that functions can have \nparameters:Function parameters are the names listed in \nthe function definition.Function arguments are the real values \npassed to (and received by) the function.', 'JavaScript function definitions do not specify data types for \nparameters.JavaScript functions do not perform type checking on the passed \narguments.JavaScript functions do not check the number of arguments received.', 'If a function is called with missing arguments (less than declared), the missing values are set to\nundefined.Sometimes this is acceptable, but sometimes it is better to assign a default \nvalue to the parameter:', 'JavaScript functions have a built-in object called the arguments \nobject.The argument object contains an array of the arguments used when the function \nwas called (invoked).This way you can simply use a function to find (for instance) the highest \nvalue in a list of numbers:Or create a function to sum all input values:', ""The parameters, in a function call, are the function's arguments.JavaScript arguments are passed by value: The function only \ngets to know the values, not the argument's locations.If a function changes an argument's value, it does not change the parameter's \noriginal value.Changes to arguments are not visible (reflected) outside the function."", 'In JavaScript, object references are values.Because of this, objects will behave like they are passed by reference:If a function changes an object property, it changes the original value.Changes to object properties are visible (reflected) outside the function.']","['\n function functionName(parameter1, parameter2, parameter3) {\n  \xa0 // code to be executed\n}\n', '\nfunction myFunction(x, y) {\n  \xa0 if (y === undefined) {\n\xa0\xa0\xa0 y = 2;\n  \xa0  }\n\n}\n', '\nfunction myFunction(x, y = 2) {\xa0 // function code}\n &&&&&& \nx = findMax(1, 123, 500, 115, 44, 88);function findMax() {\n\xa0\xa0let max = -Infinity;\n  \xa0 for (let i = 0; i < arguments.length; i++) {\n  \xa0\xa0\xa0 if (arguments[i] > max) {\n\xa0\xa0\xa0\xa0\xa0\xa0max = arguments[i];\n  \xa0\xa0\xa0\xa0}\n  \xa0\xa0}\n  \xa0 return max;\n}\n &&&&&& \nx = sumAll(1, 123, 500, 115, 44, 88);\n\nfunction sumAll() {\n\xa0 let sum = 0;\n  \xa0 for (let i = 0; i < arguments.length; i++) {\n\xa0\xa0\xa0 sum += arguments[i];\n  \xa0 }\n  \xa0 return sum;\n}\n', '', '', '']",[''],[],[]
js||Function Invocation,https://www.w3schools.com/js/js_function_invocation.asp,"The code inside a JavaScript function will execute when ""something"" invokes it.","['Invoking a JavaScript Function', 'Invoking a Function as a Function', '']","['The code inside a function is not executed when the function is defined.The code inside a function is executed when the function is invoked.It is common to use the term ""call a function"" instead of ""invoke \na function"".It is also common to say ""call upon a function"", ""start a function"", or \n""execute a function"".In this tutorial, we will use invoke, because a \nJavaScript function can be invoked without being called.', 'The function above does not belong to any object. But in JavaScript there \nis always a default global object.In HTML the default global object is the HTML page itself, so the function above ""belongs"" to the \nHTML page.In a browser the page object is the browser window. The function above \nautomatically becomes a window function.myFunction() and window.myFunction() is the same function:', 'In JavaScript, the this keyword refers to an object.Which object depends on how this is being invoked (used or called).The this keyword refers to different objects depending on how it is used:', 'When a function is called without an owner object, the value of this \nbecomes the global object.In a web browser the global object is the browser window.This example returns the window object as the value of this:', 'In JavaScript you can define functions as object methods.The following example creates an object (myObject), with two \nproperties (firstName and lastName), and a \nmethod (fullName):The fullName method is a function. The function belongs to \nthe object. myObject is the owner of the function.The thing called this, is the object that \n""owns"" the JavaScript code. In this case the value of this \nis myObject. Test it! Change the fullName method to return the value of this:', 'If a function invocation is preceded with the new keyword, \nit is a constructor invocation.It looks like you create a new function, but since JavaScript functions are \nobjects you actually create a new object:A constructor invocation creates a new object. The new object inherits the \nproperties and methods from its constructor. ']","['\nfunction myFunction(a, b) {\n\xa0 \n  return a * b;\n}\nmyFunction(10, 2);\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // \n  Will return 20\n &&&&&& \nfunction myFunction(a, b) {\n  \xa0 return a * b;\n}window.myFunction(10, 2);\xa0\xa0\xa0  // Will also return 20\n', '\nlet x = myFunction();\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // x will be the window object\nfunction myFunction() {\n\xa0\xa0return this;\n}\n', '\nconst myObject = {\n\xa0\xa0firstName:""John"",\n  \xa0 lastName: ""Doe"",\n  \xa0 fullName: function () {\n\xa0 \xa0 return this.firstName + "" "" + this.lastName;\n  \xa0\xa0}\n}\nmyObject.fullName();\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Will return ""John Doe""\n &&&&&& \nconst myObject = {\xa0 firstName:""John"",\n  \xa0 lastName: ""Doe"",\n  \xa0 fullName: function () {\n  \xa0 \xa0 return this;\n  \xa0\xa0}}\n\n// This will return [object Object] (the owner object)\nmyObject.fullName();\n']",[''],"['In an object method, this refers to the object.|||&&&Alone, this refers to the global object.|||&&&In a function, this refers to the global object.|||&&&In a function, in strict mode, this is undefined.|||&&&In an event, this refers to the element that received the event.|||&&&Methods like call(), apply(),\nand bind() can refer this to any object.|||&&&']",[]
js||,https://www.w3schools.com/js/js_function_call.asp,,"['Method Reuse', 'All Functions are Methods', '']","['With the call() method, you can write a method that can be used on different \nobjects. ', 'In JavaScript all functions are object methods.If a function is not a method of a JavaScript object, it is a function of the \nglobal object (see previous chapter). The example below creates an object with 3 \nproperties, firstName, lastName, fullName.In the example above, this refers to the person object.I.E. this.firstName means the firstName property of this.I.E. this.firstName means the firstName property of person.', 'In JavaScript, the this keyword refers to an object.Which object depends on how this is being invoked (used or called).The this keyword refers to different objects depending on how it is used:', 'The call() method is a predefined \nJavaScript method.It can be used to invoke (call) a method \nwith an owner object as an argument (parameter).This example calls the fullName method of person, using it on \nperson1:This example calls the fullName method of person, using it on\nperson2:The call() method can accept arguments:']","['\nconst myObject = {\n\xa0\xa0firstName:""John"",\n\xa0\xa0lastName: ""Doe"",\n  \xa0 fullName: function () {\n\xa0\xa0\xa0 return this.firstName + "" "" + this.lastName;\n  \xa0\xa0}\n}\n\n// This will return ""John Doe"":\nmyObject.fullName();\xa0\xa0\n', '', '']",[''],"['In an object method, this refers to the object.|||&&&Alone, this refers to the global object.|||&&&In a function, this refers to the global object.|||&&&In a function, in strict mode, this is undefined.|||&&&In an event, this refers to the element that received the event.|||&&&Methods like call(), apply(),\nand bind() can refer this to any object.|||&&&']",[]
js||,https://www.w3schools.com/js/js_function_apply.asp,,"['Method Reuse', 'The JavaScript apply() Method', 'The Difference Between call() and apply()', 'The apply() Method with Arguments', 'Simulate a Max Method on Arrays', 'JavaScript Strict Mode']","['With the apply() method, you can write a method that can be used on different \nobjects.', 'The apply() method is similar to the call() method (previous chapter).In this example the fullName method of person is applied on person1:', 'The difference is:The call() method takes arguments separately.The apply() method takes arguments as an array.', 'The apply() method accepts arguments in an array:Compared with the call() method:', 'You can find the largest number (in a list of numbers) using the Math.max() method:Since JavaScript arrays do not have a max() method, you can apply the \nMath.max() method instead.The first argument (null) does not matter. It is not used in this example.These examples will give the same result:', 'In JavaScript strict mode, if the first argument of the apply() method is not an object,\nit becomes the owner (object) of the invoked function.\nIn ""non-strict"" mode, it becomes the global object.']","['\nconst person = {\n  \xa0 fullName: function() {\n  \xa0\xa0\xa0 return this.firstName + "" "" + this.lastName;\n  \xa0\xa0}}\n\nconst person1 = {\n\xa0\xa0firstName: ""Mary"",\n\xa0\xa0lastName: ""Doe""}\n\n// This will return ""Mary Doe"":\nperson.fullName.apply(person1);\n', '\nconst person = {\n  \xa0 fullName: function(city, country) {\n\xa0\xa0\xa0\xa0return this.firstName + "" "" + this.lastName \n  + "","" + city + "","" + country;\n  \xa0\xa0}}\n\nconst person1 = {\n\xa0\xa0firstName:""John"",\n  \xa0 lastName: ""Doe""\n}\n\nperson.fullName.apply(person1, [""Oslo"", ""Norway""]);\n &&&&&& \nconst person = {\n\xa0\xa0fullName: function(city, country) {\n\xa0\xa0\xa0\xa0return this.firstName + "" "" + this.lastName \n  + "","" + city + "","" + country;\n  \xa0\xa0}}\n\nconst person1 = {\n  \xa0 firstName:""John"",\n  \xa0 lastName: ""Doe""\n}\n\nperson.fullName.call(person1, ""Oslo"", ""Norway"");\n', '\nMath.max(1,2,3);\xa0 // Will return 3\n &&&&&& \nMath.max.apply(null, [1,2,3]); // Will also return 3\n &&&&&& \nMath.max.apply(Math, [1,2,3]); // Will also return 3\n &&&&&& \nMath.max.apply("" "", [1,2,3]); // Will also return 3\n &&&&&& \nMath.max.apply(0, [1,2,3]); // Will also return 3\n', '', '', '']",[''],[],[]
js||Closures,https://www.w3schools.com/js/js_function_closures.asp,"JavaScript variables can belong to the local or
global scope.","['Global Variables', 'Variable Lifetime', 'A Counter Dilemma', 'JavaScript Nested Functions', 'JavaScript Closures', 'Example Explained']","['Global variables can be made local (private) with closures.', 'A function can access all variables defined inside the function, like this:But a function can also access variables defined outside the function, like this:In the last example, a is a global \nvariable. In a web page, global variables belong to the window object.Global variables can be used \n(and changed) by all scripts in the page (and in the window). In the first example, a is a local \nvariable.A local variable can only be used inside the function where it is defined. It \nis hidden from other functions and other scripting code.Global \nand local variables with the same name are  \ndifferent variables. Modifying one, does not modify the other. ', 'Global variables live until the page is discarded, like when you navigate \nto another page or close the window.Local \nvariables have short lives. They are created when the function is \ninvoked, and deleted when the function is finished.', 'Suppose you want to use a variable for counting something, and you want this \ncounter to be available to all functions.You could use a global variable, and a function to increase the counter:There is a problem with the solution above: Any code on the page can change the counter, without \ncalling add().The counter should be local to the add() function, to prevent other code from changing \nit:It did not work because we display the global counter instead of the local \ncounter.We can remove the global counter and access the local counter by letting the \nfunction return it:It did not work because we reset the local counter every time we call the \nfunction.\xa0A JavaScript inner function can solve this.', 'All functions have access to the global scope.\xa0\xa0 In fact, in JavaScript, all functions have access to the scope ""above"" them.JavaScript supports nested functions. Nested functions have access to the \nscope ""above"" them. In this example, the inner function plus() has access \nto the counter variable in the parent function:This could have solved the counter dilemma, if we could reach the plus() \nfunction from the outside.We also need to find a way to execute counter = 0 only once.We need a closure.', 'Remember self-invoking functions? What does this function do?The variable add is assigned to the return value of a self-invoking \nfunction.The self-invoking function only runs once. It sets the counter to zero (0), \nand returns a function expression.This way add becomes a function. The ""wonderful"" part is that it can access \nthe counter in the parent scope. This is called a JavaScript closure. It makes it possible \nfor a function to have ""private"" variables.The counter is protected by the scope of the anonymous function, \nand can only be changed using the add function.']","['\nfunction myFunction() {\n  \xa0 let a = 4;\n  \xa0 return a * a;\n}\n &&&&&& \nlet a = 4;function myFunction() {\n  \xa0 return a * a;\n}\n', '\nfunction myFunction() {\n\xa0 a = 4;\n}\n &&&&&& \n  // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\n\xa0\xa0counter += 1;\n}// Call add() 3 times\nadd();\nadd();\nadd();// The counter should now be 3 &&&&&& \n  // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\xa0 let counter = 0; \xa0 \n  counter += 1;}// \n  Call add() 3 timesadd();add();add();//The counter should \n  now be 3. But it is 0 &&&&&& \n  // Function to increment \n  counterfunction add() {\xa0 let counter = 0; \xa0 \n  counter += 1;\xa0\xa0return counter;}// \n  Call add() 3 timesadd();add();add();//The counter should \n  now be 3. But it is 1.', '\n function add() {\n  \xa0 let counter = 0;\n  \xa0 function plus() {counter += 1;}\xa0\xa0plus();\xa0\xa0\xa0\n \xa0\xa0return counter; }', '', '', '']",[''],[],[]
js||,https://www.w3schools.com/js/js_class_intro.asp,,"['Using a Class', 'The Constructor Method', 'Class Methods', 'Browser Support', '""use strict""']","['When you have a class, you can use the class to create objects:The example above uses the Car class to create two Car objects.', 'The constructor method is a special method:If you do not define a constructor method, JavaScript \nwill add an empty constructor method.\n', 'Class methods are created with the same syntax as object methods.Use the keyword class to create a class.Always add a constructor() method.Then add any number of methods.Create a Class method named ""age"", that returns the Car age:You can send parameters to Class methods:', 'The following table defines the first browser version with full support for \nClasses in JavaScript: ', 'The syntax in classes must be written in ""strict mode"".You will get an \nerror if you do not follow the ""strict mode"" rules.Learn more about ""strict mode"" in: JS Strict Mode.']","['\nclass ClassName {\n\xa0  constructor() { ... }\n}\n &&&&&& \nclass Car {\n\xa0  constructor(name, year) {\n\xa0\xa0\xa0 this.name = name;\n\xa0\xa0\xa0 this.year = year;\n\xa0 }\n}\n', '\nlet myCar1 = new Car(""Ford"", 2014);\nlet myCar2 = new Car(""Audi"", 2019);\n', '\nclass ClassName {\n\xa0  constructor() { ... }\n\xa0\xa0method_1() { ... }\n\xa0\xa0method_2() { ... }\n\xa0\xa0method_3() { ... }\n}\n &&&&&& \nclass Car {\n\xa0  constructor(name, year) {\n\xa0\xa0\xa0 this.name = name;\n\xa0\xa0\xa0 this.year = year;\n\xa0  }\xa0 age() {\n\xa0\xa0\xa0 let date = new Date();\n\xa0\xa0\xa0 return date.getFullYear() - this.year;\n\xa0  }}\nlet myCar = new Car(""Ford"", 2014);\ndocument.getElementById(""demo"").innerHTML =\n""My car is "" + myCar.age() + "" years old."";\n &&&&&& \nclass Car {\xa0 constructor(name, year) {\xa0\xa0\xa0 \n  this.name = name;\xa0\xa0\xa0 this.year = year;\xa0 }\xa0 \n  age(x) {\xa0\xa0\xa0 return x - this.year;\xa0 }}\n  let date = new Date();\n  let year = date.getFullYear();let myCar = new \n  Car(""Ford"", 2014);document.getElementById(""demo"").innerHTML=""My car is \n  "" + myCar.age(year) + "" years old.""; ', '', '']","['The Constructor Method###&&&|||It has to have the exact name ""constructor""|||It is executed automatically when a new object is created|||It is used to initialize object properties|||']","['|||||||||||||||&&&Chrome 49|||Edge 12|||Firefox 45|||Safari 9|||Opera 36|||&&&Mar, 2016|||Jul, 2015|||Mar, 2016|||Oct, 2015|||Mar, 2016|||&&&']",[]
js||,https://www.w3schools.com/js/js_class_inheritance.asp,,"['Class Inheritance', 'Getters and Setters']","[""To create a class inheritance, use the extends \nkeyword.A class created with a class inheritance inherits all the methods from \nanother class:The super() method refers to the parent \nclass.By calling the super() method in the \nconstructor method, we call the parent's constructor method and gets access to \nthe parent's properties and methods."", 'Classes also allows you to use getters and setters.It can be smart to use getters and setters for your properties, especially if \nyou want to do something special with the value before returning them, or before \nyou set them.To add getters and setters in the class, use the \nget and set keywords.The name of the getter/setter method cannot be the same as the name of the \nproperty, in this case carname.\nMany programmers use an underscore character _ \nbefore the property name to separate the getter/setter from the actual property:\n\nExample\nYou can use the underscore character to separate the getter/setter from the \nactual property:\n\n  class Car {\xa0 constructor(brand) {\xa0\xa0\xa0 this._carname \n  = brand;\xa0 }\xa0 get carname() {\xa0\xa0\xa0 \n  return this._carname;\xa0 }\xa0 set carname(x) {\xa0\xa0\xa0 \n  this._carname = x;\xa0 }}let myCar = new Car(""Ford"");\n  document.getElementById(""demo"").innerHTML = myCar.carname;\n\nTry it Yourself »\n\n\nTo use a setter, use the same syntax as when you set a property value, without parentheses:\n\nExample\nUse a setter to change the carname to ""Volvo"":\n\n  class Car {\xa0 constructor(brand) {\xa0\xa0\xa0 this._carname \n  = brand;\xa0 }\xa0 get carname() {\xa0\xa0\xa0 \n  return this._carname;\xa0 }\xa0 set carname(x) {\xa0\xa0\xa0 \n  this._carname = x;\xa0 }}let myCar = new Car(""Ford"");\n  myCar.carname = ""Volvo"";\n  document.getElementById(""demo"").innerHTML = myCar.carname;\n\nTry it Yourself »\n\n\n\nHoisting\nUnlike functions, and other JavaScript declarations, class declarations are not hoisted.\nThat means that you must declare a class before you can use it:\n\nExample\n\n  //You cannot use the class yet.//myCar = new Car(""Ford"")//This would \n  raise an error.class Car {\xa0\n  constructor(brand) {\xa0\xa0\xa0 this.carname = brand;\xa0\n  }}//Now you can use the class:let myCar = new Car(""Ford"")\nTry it Yourself »\n\n\nNote: For other declarations, like functions, you will NOT get an \nerror when you try to use it before it is declared, because the default behavior \nof JavaScript declarations are hoisting (moving the declaration to the top).\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'Unlike functions, and other JavaScript declarations, class declarations are not hoisted.That means that you must declare a class before you can use it:']","['\nclass Car {\xa0 constructor(brand) {\xa0\xa0\xa0 this.carname = \n  brand;\xa0\n  }\xa0 present() {\xa0\xa0\xa0 return \'I have a \' + this.carname;\xa0\n  }}class Model extends Car {\xa0\n  constructor(brand, mod) {\xa0\xa0\xa0 super(brand);\xa0\xa0\xa0 this.model = mod;\xa0\n  }\xa0 show() {\xa0\xa0\xa0\n      return this.present() + \', it is a \' + this.model;\xa0\n  }}let myCar = new Model(""Ford"", ""Mustang"");document.getElementById(""demo"").innerHTML \n  = myCar.show();\n', '\n  class Car {\xa0 constructor(brand) {\xa0\xa0\xa0 this.carname \n  = brand;\xa0 }\xa0 get cnam() {\xa0\xa0\xa0 \n  return this.carname;\xa0 }\xa0 set cnam(x) {\xa0\xa0\xa0 \n  this.carname = x;\xa0 }}let myCar = new Car(""Ford"");\n  document.getElementById(""demo"").innerHTML = myCar.cnam; &&&&&& \n  class Car {\xa0 constructor(brand) {\xa0\xa0\xa0 this._carname \n  = brand;\xa0 }\xa0 get carname() {\xa0\xa0\xa0 \n  return this._carname;\xa0 }\xa0 set carname(x) {\xa0\xa0\xa0 \n  this._carname = x;\xa0 }}let myCar = new Car(""Ford"");\n  document.getElementById(""demo"").innerHTML = myCar.carname; &&&&&& \n  class Car {\xa0 constructor(brand) {\xa0\xa0\xa0 this._carname \n  = brand;\xa0 }\xa0 get carname() {\xa0\xa0\xa0 \n  return this._carname;\xa0 }\xa0 set carname(x) {\xa0\xa0\xa0 \n  this._carname = x;\xa0 }}let myCar = new Car(""Ford"");\n  myCar.carname = ""Volvo"";\n  document.getElementById(""demo"").innerHTML = myCar.carname;', '\n  //You cannot use the class yet.//myCar = new Car(""Ford"")//This would \n  raise an error.class Car {\xa0\n  constructor(brand) {\xa0\xa0\xa0 this.carname = brand;\xa0\n  }}//Now you can use the class:let myCar = new Car(""Ford"")']",[''],[],[]
js||,https://www.w3schools.com/js/js_class_static.asp,,[],[],"['\nclass Car {\xa0 constructor(name) {\xa0\xa0\xa0 this.name = \n  name;\xa0\n  }\xa0 static hello() {\xa0\xa0\xa0 return ""Hello!!"";\xa0\n  }}let myCar = new Car(""Ford"");// You can call \'hello()\' on \n  the Car Class:document.getElementById(""demo"").innerHTML \n  = Car.hello();// But NOT on a Car Object:// document.getElementById(""demo"").innerHTML \n  = myCar.hello();// this will raise an error. &&&&&& \nclass Car {\xa0 constructor(name) {\xa0\xa0\xa0 this.name = \n  name;\xa0\n  }\xa0 static hello(x) {\xa0\xa0\xa0 return ""Hello "" + \n  x.name;\xa0\n  }}let myCar = new Car(""Ford"");document.getElementById(""demo"").innerHTML \n  = Car.hello(myCar);']",[''],[],[]
js||,https://www.w3schools.com/js/js_callback.asp,,"['Sequence Control', 'JavaScript Callbacks', 'When to Use a Callback?']","['Sometimes you would like to have better control over when to execute a function.Suppose you want to do a calculation, and then display the result.You could call a calculator function (myCalculator), save the result,\nand then call another function (myDisplayer) to display the result:Or, you could call a calculator function (myCalculator),\nand let the calculator function call the display function (myDisplayer):The problem with the first example above, is that you have to call two functions to display the result.The problem with the second example, is that you cannot prevent the calculator function from \ndisplaying the result.Now it is time to bring in a callback.', 'Using a callback, you could call the calculator function (myCalculator)\nwith a callback, and let the calculator function run the callback after the calculation is finished:In the example above, myDisplayer is the name of a function.It is passed to myCalculator() as an argument.', 'The examples above are not very exciting.They are simplified to teach you the callback syntax.Where callbacks really shine are in asynchronous functions, \nwhere one function has to wait for another function (like waiting for a file to load).Asynchronous functions are covered in the next chapter.']","['\n  function myFirst() {\xa0 myDisplayer(""Hello"");}function \n  mySecond() {\xa0 \n  myDisplayer(""Goodbye"");}myFirst();mySecond();\n &&&&&& \n  function myFirst() {\xa0 myDisplayer(""Hello"");}function \n  mySecond() {\xa0 \n  myDisplayer(""Goodbye"");}mySecond();myFirst();', '\nfunction myDisplayer(some) {\n\xa0 document.getElementById(""demo"").innerHTML = some;}\nfunction myCalculator(num1, num2) {\n\xa0 let sum = num1 + num2;\n\xa0 return sum;\n\n}let result = myCalculator(5, 5);\nmyDisplayer(result); &&&&&& \n  function myDisplayer(some) {\xa0 document.getElementById(""demo"").innerHTML \n  = some;}function myCalculator(num1, num2) {\xa0 \n  let sum = num1 + num2;\xa0 \n  myDisplayer(sum);}myCalculator(5, 5);\n', '\n  function myDisplayer(some) {\xa0 document.getElementById(""demo"").innerHTML \n  = some;}function myCalculator(num1, num2, myCallback) {\xa0 \n  let sum = num1 + num2;\xa0 \n  myCallback(sum);}myCalculator(5, 5, myDisplayer);\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_asynchronous.asp,,"['Waiting for a Timeout', 'Waiting for Intervals:', 'Waiting for Files']","['When using the JavaScript function setTimeout(),\nyou can specify a callback function to be executed on time-out:In the example above, myFunction is used as a callback.myFunction is passed to setTimeout() as an argument.3000 is the number of milliseconds before time-out, so\nmyFunction() will be called after 3 seconds.Instead of passing the name of a function as an argument to another function,\nyou can always pass a whole function instead:In the example above, function(){ myFunction(""I love You !!!""); }\nis used as a callback. It is a complete function.\nThe complete function is passed to setTimeout() as an argument.3000 is the number of milliseconds before time-out, so\nmyFunction() will be called after 3 seconds.', 'When using the JavaScript function setInterval(),\nyou can specify a callback function to be executed for each interval:In the example above, myFunction is used as a callback.myFunction is passed to setInterval() as an argument.1000 is the number of milliseconds between intervals, so\nmyFunction() will be called every second.', 'If you create a function to load an external resource (like a script or a file),\nyou cannot use the content before it is fully loaded.This is the perfect time to use a callback.This example loads an HTML file (mycar.html), and displays the HTML file in a web page,\nafter the file is fully loaded:In the example above, myDisplayer is used as a callback.myDisplayer is passed to getFile() as an argument.Below is a copy of mycar.html:']","['\n  function myDisplayer(something) {\xa0 document.getElementById(""demo"").innerHTML \n  = something;}function myCalculator(num1, num2, myCallback) {\xa0 let sum = num1 + num2;\xa0 \n  myCallback(sum);}myCalculator(5, 5, myDisplayer);\n', '\nsetTimeout(myFunction, 3000);\n\nfunction myFunction() {\n\xa0 document.getElementById(""demo"").innerHTML = ""I love You !!"";\n}\n &&&&&& \nsetTimeout(function() { myFunction(""I love You !!!""); }, 3000);\n\nfunction myFunction(value) {\n\xa0 document.getElementById(""demo"").innerHTML = value;\n}\n', '\nsetInterval(myFunction, 1000);\n\nfunction myFunction() {\n\xa0 let d = new Date();\n\xa0 document.getElementById(""demo"").innerHTML=\n\xa0 d.getHours() + "":"" +\n\xa0 d.getMinutes() + "":"" + \n\xa0 d.getSeconds();\n}\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_promise.asp,,"['Promise Object Properties', 'Promise How To', 'JavaScript Promise Examples', 'Waiting for a Timeout', 'Waiting for a file', 'Browser Support']","['A JavaScript Promise object can be:The Promise object supports two properties: state and result.While a Promise object is ""pending"" (working), the result is undefined.When a Promise object is ""fulfilled"", the result is a value.When a Promise object is ""rejected"", the result is an error object.', 'Here is how to use a Promise:', 'To demonstrate the use of promises, we will use the callback examples from the previous chapter:', 'ECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.The following table defines the first browser version with full support for Promise objects:', '', '']","['\nlet myPromise = new Promise(function(myResolve, myReject) {\n// ""Producing Code"" (May take some time)\n\n\xa0 myResolve(); // when successful\n\xa0 myReject(); \xa0// when error\n});\n// ""Consuming Code"" (Must wait for a fulfilled Promise)\nmyPromise.then(\n\xa0 function(value) { /* code if successful */ },\n\xa0 function(error) { /* code if some error */ }\n);\n &&&&&& \nmyPromise.then(\n\xa0 function(value) { /* code if successful */ },\n\xa0 function(error) { /* code if some error */ }\n);\n &&&&&& \nfunction myDisplayer(some) {\n\xa0 document.getElementById(""demo"").innerHTML = some;}\nlet myPromise = new Promise(function(myResolve, myReject) {\n\xa0 let x = 0;\n// The producing code (this may take some time)\n\xa0 if (x == 0) {\n\xa0\xa0\xa0 myResolve(""OK"");\n\xa0 } else {\n\xa0\xa0\xa0 myReject(""Error"");\n\xa0 }\n});\nmyPromise.then(\n\xa0 function(value) {myDisplayer(value);},\n\xa0 function(error) {myDisplayer(error);});\n', '\nsetTimeout(function() { myFunction(""I love You !!!""); }, 3000);\n\nfunction myFunction(value) {\n\xa0 document.getElementById(""demo"").innerHTML = value;\n}\n', '\nlet myPromise = new Promise(function(myResolve, myReject) {\n\xa0 setTimeout(function() { myResolve(""I love You !!""); }, 3000);});\nmyPromise.then(function(value) {\n\xa0 document.getElementById(""demo"").innerHTML = value;\n});\n', '\nfunction getFile(myCallback) {\n\xa0 let req = new XMLHttpRequest();\n\xa0 req.open(\'GET\', ""mycar.html"");\n\xa0 req.onload = function() {\n\xa0\xa0\xa0 if (req.status == 200) {\n\xa0\xa0\xa0\xa0\xa0 myCallback(req.responseText);\n\xa0\xa0\xa0 } else {\n\xa0\xa0\xa0\xa0\xa0 myCallback(""Error: "" + req.status);\n\xa0\xa0\xa0 }\n\xa0 }\n\xa0 req.send();\n}\ngetFile(myDisplayer);\n', '\nlet myPromise = new Promise(function(myResolve, myReject) {\n  \xa0\n  let req = new XMLHttpRequest();\n  \xa0\n  req.open(\'GET\', ""mycar.htm"");\n  \xa0\n  req.onload = function() {\n    \xa0\xa0\xa0\n    if (req.status == 200) {\n      \xa0\xa0\xa0\xa0\xa0\n      myResolve(req.response);\n    \xa0\xa0\xa0\n    } else {\n      \xa0\xa0\xa0\xa0\xa0\n      myReject(""File not Found"");\n    \xa0\xa0\xa0\n    }\n\xa0 };\n\xa0 req.send();\n});\n\nmyPromise.then(\n  \xa0\n  function(value) {myDisplayer(value);},\n  \xa0\n  function(error) {myDisplayer(error);}\n);\n', '']",['Promise Object Properties###JavaScript Promise Examples###&&&|||Pending|||Fulfilled|||Rejected|||&&&|||Waiting for a Timeout|||Waiting for a File|||'],"['Result|||Call|||&&&Success|||myResolve(result value)|||&&&Error|||myReject(error object)|||&&&', 'myPromise.state|||myPromise.result|||&&&""pending""|||undefined|||&&&""fulfilled""|||a result value|||&&&""rejected""|||an error object|||&&&', '|||||||||||||||&&&Chrome 33|||Edge 12|||Firefox 29|||Safari 7.1|||Opera 20|||&&&Feb, 2014|||Jul, 2015|||Apr, 2014|||Sep, 2014|||Mar, 2014|||&&&']",[]
js||,https://www.w3schools.com/js/js_async.asp,,"['Await Syntax', 'Example', 'Browser Support']","['The keyword  await before a function makes the function wait for a promise:The await keyword can only be used inside an\nasync function.', ""Let's go slowly and learn how to use it."", 'ECMAScript 2017 introduced the JavaScript keywords\nasync and await.The following table defines the first browser version with full support for both:']","['\nasync function myFunction() {\n\xa0 return ""Hello"";\n}\n &&&&&& \nfunction myFunction() {\n\xa0 return Promise.resolve(""Hello"");\n}\n &&&&&& \nmyFunction().then(\n\xa0 function(value) { /* code if successful */ },\n\xa0 function(error) { /* code if some error */ }\n);\n &&&&&& \nasync function myFunction() {\n\xa0 return ""Hello"";\n}myFunction().then(\xa0 function(value) {myDisplayer(value);},\n  \xa0 function(error) {myDisplayer(error);});\n &&&&&& \nasync function myFunction() {\n\xa0 return ""Hello"";\n}myFunction().then(\xa0 function(value) {myDisplayer(value);}\n);\n', '\nlet value = await promise;\n', '\nasync function myDisplay() {\n\xa0 let myPromise = new Promise(function(resolve,  reject) {\n\xa0\xa0\xa0 resolve(""I love You !!"");\n\xa0 });\n\xa0 document.getElementById(""demo"").innerHTML = await myPromise;}\n myDisplay();\n', '\nasync function myDisplay() {\n\xa0 let myPromise = new Promise(function(resolve) {\n\xa0\xa0\xa0 resolve(""I love You !!"");\n\xa0 });\n\xa0 document.getElementById(""demo"").innerHTML = await myPromise;}\n myDisplay();\n', '\nasync function myDisplay() {\n\xa0 let myPromise = new Promise(function(resolve) {\n\xa0\xa0\xa0 setTimeout(function() {resolve(""I love You !!"");}, 3000);\n\xa0 });\n\xa0 document.getElementById(""demo"").innerHTML = await myPromise;}\n myDisplay();\n', '\nasync function getFile() {\n\xa0 let myPromise = new Promise(function(resolve) {\n\xa0\xa0\xa0 let req = new XMLHttpRequest();\n\xa0\xa0\xa0 req.open(\'GET\', ""mycar.html"");\n\xa0\xa0\xa0 req.onload = function() {\n\xa0\xa0\xa0\xa0\xa0 if (req.status == 200) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 resolve(req.response);\n\xa0\xa0\xa0\xa0\xa0 } else {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0 resolve(""File not Found"");\n\xa0\xa0\xa0\xa0\xa0 }\n\xa0\xa0\xa0 };\n\xa0\xa0\xa0 req.send();\n\xa0 });\n\xa0 document.getElementById(""demo"").innerHTML = await myPromise;\n}\n\ngetFile();\n']",[''],"['|||||||||||||||&&&Chrome 55|||Edge 15|||Firefox 52|||Safari 11|||Opera 42|||&&&Dec, 2016|||Apr, 2017|||Mar, 2017|||Sep, 2017|||Dec, 2016|||&&&']",[]
js||HTML DOM,https://www.w3schools.com/js/js_htmldom.asp,"With the HTML DOM, JavaScript can access and change all the elements of an HTML 
document.","['The HTML DOM (Document Object Model)', 'What You Will Learn']","['When a web page is loaded, the browser creates a Document\nObject Model of the page. The HTML DOM model is constructed as a tree of Objects:With the object model, JavaScript gets all the power it needs to create \ndynamic HTML: ', 'In the next chapters of this tutorial you will learn:']","['\n\n', '']",['The HTML DOM (Document Object Model)###What You Will Learn###What is the DOM?###What is the HTML DOM?###&&&|||JavaScript can change all the HTML elements in the page|||JavaScript can change all the HTML attributes in the page|||JavaScript can change all the CSS styles in the page|||JavaScript can remove existing HTML elements and attributes|||JavaScript can add new HTML elements and attributes|||JavaScript can react to all existing HTML events in the page|||JavaScript can create new HTML events in the page|||&&&|||How to change the content of HTML elements|||How to change the style (CSS) of HTML elements|||How to react to HTML DOM events|||How to add and delete HTML elements|||&&&|||Core DOM - standard model for all document types|||XML DOM - standard model for XML documents|||HTML DOM - standard model for HTML documents|||&&&|||The HTML elements as objects|||The properties of all HTML elements|||  The methods to access all HTML elements|||The events for all HTML elements|||'],[],['pic_htmltree.gif']
js||HTML DOM Methods,https://www.w3schools.com/js/js_htmldom_methods.asp,"HTML DOM methods are actions you can perform (on HTML 
Elements).","['The DOM Programming Interface', 'Example', 'The getElementById Method', 'The innerHTML Property']","['HTML DOM properties are values (of HTML Elements) that you can \nset or change.', 'The HTML DOM can be accessed with JavaScript \n(and with other programming languages). In the DOM, all HTML elements are defined as objects.The programming interface is \nthe properties and methods of each object.A property is a value that you can get or set (like changing the \ncontent of an HTML element).A method is an action you can do (like add \nor deleting an HTML element).', 'The following example changes the content (the innerHTML) of the <p> element with id=""demo"":In the example above, getElementById is a method, while innerHTML is a \nproperty.', 'The most common way to access an HTML element is to use the id of the \nelement.In the example above the getElementById method used id=""demo"" to find the \nelement.', 'The easiest way to get the content of an element is by using the innerHTML property.The innerHTML property is useful for getting or replacing the content of HTML elements.']","['\n<html>\n<body>\n<p id=""demo""></p>\n<script>\n document.getElementById(""demo"").innerHTML = ""Hello World!"";\n</script>\n</body>\n</html>', '', '', '']",[''],[],[]
js||HTML DOM Document,https://www.w3schools.com/js/js_htmldom_document.asp,The HTML DOM document object is the owner of all other objects in your web page.,"['The HTML DOM Document Object', 'Finding HTML Elements', 'Changing HTML Elements', 'Adding and Deleting Elements', 'Adding Events Handlers', 'Finding HTML Objects']","['The document object represents your web page.If you want to access any element in an HTML page, you always start with accessing the \ndocument object.Below are some examples of how you can use the document object to access and \nmanipulate HTML.', 'The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.Later, in HTML DOM Level 3, more objects, collections, and properties were added.', '', '', '', '']","['', '', '', '', '', '']",[''],"['Method|||Description|||&&&document.getElementById(id)|||Find an element by element id|||&&&document.getElementsByTagName(name)|||Find elements by tag name|||&&&document.getElementsByClassName(name)|||Find elements by class name|||&&&', 'Property|||Description|||&&&element.innerHTML =\xa0 new html content|||Change the inner HTML of an element|||&&&element.attribute = new value|||Change the attribute value of an HTML element|||&&&element.style.property = new style|||Change the style of an HTML element|||&&&Method|||Description|||&&&element.setAttribute(attribute, value)|||Change the attribute value of an HTML element|||&&&', 'Method|||Description|||&&&document.createElement(element)|||Create an HTML element|||&&&document.removeChild(element)|||Remove an HTML element|||&&&document.appendChild(element)|||Add an HTML element|||&&&document.replaceChild(new, old)|||Replace an HTML element|||&&&document.write(text)|||Write into the HTML output stream|||&&&', 'Method|||Description|||&&&document.getElementById(id).onclick = function(){code}|||Adding event handler code to an onclick event|||&&&', ""Property|||Description|||DOM|||&&&document.anchors|||Returns all <a> elements that have a name attribute|||1|||&&&document.applets|||Deprecated|||1|||&&&document.baseURI|||Returns the absolute base URI of the document|||3|||&&&document.body|||Returns the <body> element |||1|||&&&document.cookie|||Returns the document's cookie|||1|||&&&document.doctype|||Returns the document's doctype|||3|||&&&document.documentElement|||Returns the <html> element |||3|||&&&document.documentMode|||Returns the mode used by the browser|||3|||&&&document.documentURI|||Returns the URI of the document |||3|||&&&document.domain|||Returns the domain name of the document server |||1|||&&&document.domConfig|||Obsolete.|||3|||&&&document.embeds|||Returns all <embed> elements|||3|||&&&document.forms|||Returns all <form> elements |||1|||&&&document.head|||Returns the <head> element|||3|||&&&document.images|||Returns all <img> elements |||1|||&&&document.implementation|||Returns the DOM implementation|||3|||&&&document.inputEncoding|||Returns the document's encoding (character set)|||3|||&&&document.lastModified|||Returns the date and time the document was updated|||3|||&&&document.links|||Returns all <area> and <a> elements that have a href attribute|||1|||&&&document.readyState|||Returns the (loading) status of the document|||3|||&&&document.referrer|||Returns the URI of the referrer (the linking document)|||1|||&&&document.scripts|||Returns all <script> elements|||3|||&&&document.strictErrorChecking|||Returns if error checking is enforced|||3|||&&&document.title|||Returns the <title> element |||1|||&&&document.URL|||Returns the complete URL of the document |||1|||&&&""]",[]
js||HTML DOM Elements,https://www.w3schools.com/js/js_htmldom_elements.asp,"This page teaches you how to find and access HTML elements in 
an HTML page.","['Finding HTML Elements', 'Finding HTML Element by Id', 'Finding HTML Elements by Tag Name', 'Finding HTML Elements by Class Name', 'Finding HTML Elements by CSS Selectors', 'Finding HTML Elements by HTML Object Collections']","['Often, with JavaScript, you want to manipulate HTML elements.To do so, you have to find the elements first. There are several ways to do this:', 'The easiest way to find an HTML element in the DOM, is by using the element id.This example finds the element with id=""intro"":If the element is found, the method will return the element as an object (in element).If the element is not found, element will contain null.', 'This example finds all <p> elements:This example finds the element with id=""main"", and then finds all <p> elements \ninside ""main"":', 'If you want to find all HTML elements with the same class name, use \ngetElementsByClassName().\nThis example returns a list of all elements with class=""intro"".', 'If you want to find all HTML elements that match a specified CSS selector \n(id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.\nThis example returns a list of all <p> elements with class=""intro"".', 'This example finds the form element with id=""frm1"", in the forms \ncollection, and displays all element \nvalues:The following HTML objects (and object collections) are also accessible:']","['\nconst element = document.getElementById(""intro"");\n', '\nconst element = document.getElementsByTagName(""p""); &&&&&& \nconst x = document.getElementById(""main"");\nconst y = x.getElementsByTagName(""p"");\n', '\nconst x = document.getElementsByClassName(""intro"");', '\nconst x = document.querySelectorAll(""p.intro"");', '\nconst x = document.forms[""frm1""];\nlet text = """";\nfor (let i = 0; i < x.length; i++) {\xa0 text += x.elements[i].value + ""<br>"";}document.getElementById(""demo"").innerHTML = text;', '']",['Finding HTML Elements###Finding HTML Elements by HTML Object Collections###&&&|||Finding HTML elements by id|||Finding HTML elements by tag name |||Finding HTML elements by class name|||Finding HTML elements by CSS selectors|||Finding HTML elements by HTML object collections|||&&&|||document.anchors|||document.body|||document.documentElement|||document.embeds|||document.forms|||document.head|||document.images|||document.links|||document.scripts|||document.title|||'],[],[]
js||HTML DOM - Changing HTML,https://www.w3schools.com/js/js_htmldom_html.asp,The HTML DOM allows JavaScript to change the content of HTML elements.,"['Changing HTML Content', 'Changing the Value of an Attribute', 'Dynamic HTML content', 'document.write()']","['The easiest way to modify the content of an HTML element is by using the innerHTML property.To change the content of an HTML element, use this syntax:This example changes the content of a <p> element:Example explained:This example changes the content of an <h1> element:Example explained:', 'To change the value of an HTML attribute, use this syntax: This example changes the value of the src attribute of an <img> element:Example explained:', 'JavaScript can create dynamic HTML content:', 'In JavaScript, document.write() can be used to write directly to the HTML \noutput stream:']","['\n<html>\n<body>\n<p id=""p1"">Hello World!</p>\n<script>\ndocument.getElementById(""p1"").innerHTML = ""New text!"";\n</script>\n</body>\n</html>\n &&&&&& \n<!DOCTYPE html><html>\n<body>\n\n<h1 id=""id01"">Old Heading</h1>\n\n<script>\nconst element = document.getElementById(""id01"");element.innerHTML = ""New Heading"";\n</script>\n\n</body>\n</html>\n', '\n <!DOCTYPE html><html>\n<body>\n\n<img id=""myImage"" src=""smiley.gif"">\n\n<script>\ndocument.getElementById(""myImage"").src = ""landscape.jpg"";\n</script>\n\n</body>\n</html>\n', '\n <!DOCTYPE html><html>\n<body>\n\n<script>\ndocument.getElementById(""demo"").innerHTML = ""Date : "" + Date();\n</script>\n\n</body>\n</html>\n', '\n <!DOCTYPE html><html>\n<body>\n\n<p>Bla bla bla</p>\n\n<script>\ndocument.write(Date());\n</script>\n\n<p>Bla bla bla</p>\n\n</body>\n</html>\n']","['Changing HTML Content###Changing HTML Content###Changing the Value of an Attribute###&&&|||The HTML document above contains a <p> element with id=""p1""|||We use the HTML DOM to get the element with id=""p1""|||A JavaScript changes the content (innerHTML) of that element to ""New |||  text!""|||&&&|||The HTML document above contains an <h1> element with id=""id01""|||We use the HTML DOM to get the element with id=""id01""|||A JavaScript changes the content (innerHTML) of that element to ""New |||  Heading""|||&&&|||The HTML document above contains an <img> element with id=""myImage""|||We use the HTML DOM to get the element with id=""myImage""|||A JavaScript changes the src attribute of that element from ""smiley.gif"" to ""landscape.jpg""|||']",[],[]
js||Forms,https://www.w3schools.com/js/js_validation.asp,,"['JavaScript Form Validation', 'JavaScript Can Validate Numeric Input', 'Automatic HTML Form Validation', 'Data Validation', 'HTML Constraint Validation', 'Constraint Validation HTML Input Attributes', 'Constraint Validation CSS Pseudo Selectors']","['HTML form validation can be done by JavaScript.If a form field (fname) is empty, this function alerts a message, and returns \nfalse, to prevent the form from being submitted:The function can be called when the form is submitted:', 'JavaScript is often used to validate numeric input:', 'HTML form validation can be performed automatically by the browser:If a form field (fname) is empty, the required attribute prevents this form from being \nsubmitted: ', 'Data validation is the process of ensuring that user input is clean, \ncorrect, and useful.Typical validation tasks are:Most often, the purpose of data validation is to ensure correct user input.Validation can be defined by many different methods, and deployed in many \ndifferent ways.Server side validation is performed by a web server, after input has been sent to the \nserver.Client side validation is performed by a web browser, before input is sent to a web server.', 'HTML5 introduced a new HTML validation concept called constraint \nvalidation.HTML constraint validation is based on:', 'For a full list, go to HTML \nInput Attributes.', 'For a full list, go to CSS \nPseudo Classes.']","['\nfunction validateForm() {\n\xa0\xa0let\nx = document.forms[""myForm""][""fname""].value;\n  \xa0\nif (x == """") {\n  \xa0\xa0\xa0 alert(""Name must be filled out"");\n  \xa0\xa0\xa0 return false;\n  \xa0\xa0}\n}', '\n<form name=""myForm"" action=""/action_page.php"" onsubmit=""return validateForm()"" \nmethod=""post"">\n Name: <input type=""text"" name=""fname"">\n<input type=""submit"" value=""Submit"">\n</form>', '\n<form action=""/action_page.php"" method=""post"">\n\xa0 <input type=""text"" name=""fname"" required>\n\xa0\n<input type=""submit"" value=""Submit"">\n</form>', '', '', '', '']",['Data Validation###HTML Constraint Validation###&&&|||has the user filled in all required fields?|||has the user entered a valid date?|||has the user entered text in a numeric field?|||&&&|||Constraint validation HTML Input Attributes|||Constraint validation CSS Pseudo Selectors|||Constraint validation DOM Properties and Methods|||'],"['Attribute|||Description|||&&&disabled|||Specifies that the input element should be disabled|||&&&max|||Specifies the maximum value of an input element|||&&&min|||Specifies the minimum value of an input element|||&&&pattern|||Specifies the value pattern of an input element|||&&&required|||Specifies that the input field requires an element|||&&&type\xa0|||Specifies the type of an input element|||&&&', 'Selector|||Description|||&&&:disabled|||Selects input elements with the ""disabled"" attribute specified|||&&&:invalid|||Selects input elements with invalid values|||&&&:optional|||Selects input elements with no ""required"" attribute specified|||&&&:required|||Selects input elements with the ""required"" attribute specified|||&&&:valid|||Selects input elements with valid values|||&&&']",[]
js||HTML DOM - Changing CSS,https://www.w3schools.com/js/js_htmldom_css.asp,The HTML DOM allows JavaScript to change the style of HTML elements.,"['Changing HTML Style', 'Using Events', 'More Examples', 'HTML DOM Style Object Reference']","['To change the style of an HTML element, use this syntax:The following example changes the style of a <p> element:', 'The HTML DOM allows you to execute code when an event occurs.Events are generated by the browser when ""things happen"" to HTML elements:You will learn more about events in the next chapter of this tutorial.This example changes the style of the HTML element with id=""id1"", when the \nuser clicks a button:', 'Visibility\nHow to make an element invisible. Do you want to show the element or not?', 'For all HTML DOM style properties, look at our complete\nHTML DOM Style Object Reference.']","['\n<html>\n<body>\n<p id=""p2"">Hello World!</p>\n\n<script>\ndocument.getElementById(""p2"").style.color = ""blue"";\n</script>\n\n</body>\n</html>\n', '\n<!DOCTYPE html><html><body><h1 id=""id1"">My Heading 1</h1>\n<button type=""button"" onclick=""document.getElementById(\'id1\').style.color = \'red\'"">\nClick Me!</button></body></html>', '', '']",['Using Events###&&&|||An element is clicked on|||The page has loaded|||Input fields are changed|||'],[],[]
js||,https://www.w3schools.com/js/js_htmldom_animate.asp,Learn to create HTML animations using JavaScript.,"['A Basic Web Page', 'Create an Animation Container', 'Style the Elements', 'Animation Code', 'Create the Full Animation Using JavaScript']","['To demonstrate how to create HTML animations with JavaScript, we will use a simple \nweb page:', 'All animations should be relative to a container element.', 'The container element should be created with style = ""position: relative"".The animation element should be created with style = ""position: absolute"".', ""JavaScript animations are done by programming gradual changes in an element's \nstyle.The changes are called by a timer. When the timer interval is small, the \nanimation looks continuous.The basic code is:"", '']","['\n<!DOCTYPE html><html><body><h1>My First \n JavaScript Animation</h1>\n<div id=""animation"">My animation will go here</div>\n</body></html>', '\n<div id =""container"">\xa0\xa0<div id =""animate"">My \n animation will go here</div></div>', '\n #container {\xa0\xa0width: 400px;\xa0\xa0height: \n 400px;\xa0 position: relative;\xa0 \n background: yellow;\n }#animate {\xa0 width: 50px;\xa0 height: \n 50px;\xa0 position: absolute;\xa0 \n background: red;}\n', '\nid = setInterval(frame, 5);function frame() {\xa0 if (/* \n test for finished */) {\xa0\xa0\xa0\xa0clearInterval(id);\xa0\xa0} else {\n  \xa0\xa0\xa0 \n /* code to change the element style */\xa0 \xa0\xa0}}\n', '']",[''],[],[]
js||HTML DOM Events,https://www.w3schools.com/js/js_htmldom_events.asp,HTML DOM allows JavaScript to react to HTML events:,"['Reacting to Events', 'HTML Event Attributes', 'Assign Events Using the HTML DOM', 'The onload and onunload Events', 'The onchange Event', 'The onmouseover and onmouseout Events', 'The onmousedown, onmouseup and onclick Events', 'More Examples', 'HTML DOM Event Object Reference']","['A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:Examples of HTML events:In this example, the content of the <h1> element is changed when a user clicks on it:In this example, a function is called from the event handler:', 'To assign events to HTML elements you can use event attributes.In the example above, a function named displayDate will be executed \nwhen the button is clicked.', 'The HTML DOM allows you to assign events to HTML elements using JavaScript: In the example above, a function named displayDate is assigned to \nan HTML element with the id=""myBtn"".The function will be executed \nwhen the button is clicked.', ""The onload and onunload events are triggered when the user enters or leaves the page.The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.The onload and onunload events can be used to deal with cookies."", 'The onchange event is often used in combination with validation of input fields.Below is an example of how to use the onchange. The upperCase() \nfunction will be called when a user changes the content of an input field.', 'The onmouseover and onmouseout events can be used to trigger a function when the user mouses \nover, or out of, an HTML element:\nTry it Yourself »\n', 'The onmousedown, onmouseup, and onclick events are all parts of a \nmouse-click. First when a mouse-button is clicked, the onmousedown event is \ntriggered, then, when the mouse-button \nis released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.\nTry it Yourself »\n', 'onmousedown and onmouseup\nChange an image when a user holds down the mouse button.onload\nDisplay an alert box when the page has finished loading.onfocus\nChange the background-color of an input field when it gets focus.Mouse Events\nChange the color of an element when the cursor moves over it.', 'For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference.']","['\n<!DOCTYPE html><html>\n<body>\n<h1 onclick=""this.innerHTML = \'Ooops!\'"">Click on this text!</h1>\n</body></html>\n &&&&&& \n<!DOCTYPE html><html><body>\n<h1 onclick=""changeText(this)"">Click on this text!</h1>\n<script>\nfunction changeText(id) {\n\n\xa0\xa0id.innerHTML = ""Ooops!"";\n}\n</script>\n</body></html>\n', '\n<button onclick=""displayDate()"">Try it</button>\n', '\n<script>\ndocument.getElementById(""myBtn"").onclick = displayDate;\n</script>\n', '\n<body onload=""checkCookies()"">\n', '\n<input type=""text"" id=""fname""\nonchange=""upperCase()"">', '', '', '', '']",['Reacting to Events###&&&|||When a user clicks the mouse|||When a web page has loaded|||When an image has been loaded|||When the mouse moves over an element|||When an input field is changed|||When an HTML form is submitted|||When a user strokes a key |||'],[],[]
js||HTML DOM EventListener,https://www.w3schools.com/js/js_htmldom_eventlistener.asp,,"['The addEventListener() method', 'Syntax', 'Add an Event Handler to an Element', 'Add Many Event Handlers to the Same Element', 'Add an Event Handler to the window Object', 'Passing Parameters', 'Event Bubbling or Event Capturing?', 'The removeEventListener() method', 'HTML DOM Event Object Reference']","['The addEventListener() method attaches an event handler to the specified element.The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.You can add many event handlers to one element.You can add many event handlers of the same type to one element, i.e two ""click"" events.You can add event listeners to any DOM object not only HTML elements. i.e the window object.The addEventListener() method makes it easier to control how the event reacts to bubbling.When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability \nand allows you to add event listeners even when you do not control the HTML markup.You can easily remove an event listener by using the removeEventListener() method.', 'The first parameter is the type of the event (like ""click"" or ""mousedown"" \nor any other HTML DOM Event.)The second parameter is the function we want to call when the event occurs. The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.', 'You can also refer to an external ""named"" function:', 'The addEventListener() method allows you to add many events to the same \nelement, without overwriting existing events:You can add events of different types to the same element:', 'The addEventListener() method allows you to add event listeners on any HTML \nDOM object such as HTML elements, the HTML document, the window object, or other \nobjects that support events, like the xmlHttpRequest object.', 'When passing parameter values, use \nan ""anonymous function"" that calls the specified function with the parameters:', 'There are two ways of event propagation in the HTML DOM, bubbling and capturing.Event propagation is a way of defining the element order when an event occurs.\nIf you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element\'s \n""click"" event should be handled first?In bubbling the inner most element\'s event is handled first and then the outer:\nthe <p> element\'s click event is handled first, then the <div> element\'s click event.In capturing the outer most element\'s event is handled first and then the inner:\nthe <div> element\'s click event will be handled first, then the <p> element\'s click event.With the addEventListener() method you can specify the propagation type by using the ""useCapture"" parameter:The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.', 'The removeEventListener() method removes event handlers that have been \nattached with the addEventListener() method:', 'For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference.']","['\n document.getElementById(""myBtn"").addEventListener(""click"", displayDate);', '\nelement.addEventListener(""click"", function(){ alert(""Hello World!""); }); &&&&&& \nelement.addEventListener(""click"",  myFunction);function myFunction() {\xa0\xa0alert (""Hello World!"");}', '\nelement.addEventListener(""click"", myFunction);\nelement.addEventListener(""click"", mySecondFunction);\n &&&&&& \nelement.addEventListener(""mouseover"", myFunction);\nelement.addEventListener(""click"", mySecondFunction);\nelement.addEventListener(""mouseout"", myThirdFunction);', '\nwindow.addEventListener(""resize"", function(){\n\xa0\xa0document.getElementById(""demo"").innerHTML = sometext;\n});\n', '\nelement.addEventListener(""click"", function(){ myFunction(p1, p2); });\n', '\ndocument.getElementById(""myP"").addEventListener(""click"", myFunction, true);\ndocument.getElementById(""myDiv"").addEventListener(""click"", myFunction, true);\n', '\nelement.removeEventListener(""mousemove"", myFunction);', '', '']",[''],[],[]
js||HTML DOM Navigation,https://www.w3schools.com/js/js_htmldom_navigation.asp,"With the HTML DOM, you can navigate the node tree using node 
relationships.","['DOM Nodes', 'Node Relationships', 'Navigating Between Nodes', 'Child Nodes and Node Values']","['According to the W3C HTML DOM standard, everything in an HTML document is a node:With the HTML DOM, all nodes in the node tree can be accessed by JavaScript.New nodes can be created, and all \nnodes can be modified or deleted. ', 'The nodes in the node tree have a hierarchical relationship to each other.The terms parent, child, and sibling are used to describe the relationships. From the HTML above you can read:and:', 'You can use the following node properties to navigate between nodes with \nJavaScript:', 'The element node \n<title> (in the example above) does not contain text.It contains a text node with the value ""DOM Tutorial"". The value of the text node can be accessed by the \nnode\'s \ninnerHTML property:\n\n\nmyTitle = document.getElementById(""demo"").innerHTML;\n\n\nAccessing the innerHTML property is the same as accessing the nodeValue \nof the first child:\n\n\nmyTitle = document.getElementById(""demo"").firstChild.nodeValue;\n\n\nAccessing the first child can also be done like this:\n\n\nmyTitle = document.getElementById(""demo"").childNodes[0].nodeValue;\n\n\nAll the (3) following examples retrieves the text of an <h1> element and copies it \ninto a <p> element:\n\nExample\n\n<html>\n<body><h1 id=""id01"">My First Page</h1><p id=""id02""></p>\n<script>\n document.getElementById(""id02"").innerHTML \n = document.getElementById(""id01"").innerHTML;\n</script>\n</body>\n</html>\nTry it Yourself »\n\n\nExample\n\n<html>\n<body><h1 id=""id01"">My First Page</h1><p id=""id02""></p>\n<script>\n document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").firstChild.nodeValue;\n</script>\n</body>\n</html>\nTry it Yourself »\n\n\nExample\n\n<html>\n<body><h1 id=""id01"">My First Page</h1><p id=""id02"">Hello!</p>\n<script>\n document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").childNodes[0].nodeValue;\n</script>\n</body>\n</html>\nTry it Yourself »\n\n\nInnerHTML\nIn this tutorial we use the innerHTML property to retrieve the content of an \nHTML element.\nHowever, learning \nthe other methods above is useful for understanding the tree structure and the \nnavigation of the DOM.\n\nDOM Root Nodes\nThere are two special properties that allow access to the full document:\n\ndocument.body - The body of the document\ndocument.documentElement - The full document\n\n\nExample\n\n<html>\n<body>\n\n<h2>JavaScript HTMLDOM</h2><p>Displaying document.body</p><p \nid=""demo""></p><script>document.getElementById(""demo"").innerHTML \n= document.body.innerHTML;</script>\n\n</body>\n</html>\nTry it Yourself »\n\n\nExample\n\n<html>\n<body>\n\n<h2>JavaScript HTMLDOM</h2><p>Displaying document.documentElement</p>\n<p id=""demo""></p><script>\ndocument.getElementById(""demo"").innerHTML = \ndocument.documentElement.innerHTML;</script>\n\n</body>\n</html>\nTry it Yourself »\n\n\nThe nodeName Property\nThe nodeName property specifies the name of a node.\n\nnodeName is read-only\nnodeName of an element node is the same as the tag name\nnodeName of an attribute node is the attribute name\nnodeName of a text node is always #text\nnodeName of the document node is always #document\n\n\nExample\n\n  <h1 id=""id01"">My First Page</h1>\n <p id=""id02""></p><script>document.getElementById(""id02"").innerHTML \n = document.getElementById(""id01"").nodeName;</script>\nTry it Yourself »\n\n\nNote: nodeName always contains the uppercase tag name of an HTML element.\n\n\nThe nodeValue Property\nThe nodeValue property specifies the value of a node.\n\nnodeValue for element nodes is null\nnodeValue for text nodes is the text itself\nnodeValue for attribute nodes is the attribute value\n\n\nThe nodeType Property\nThe nodeType property is read only. It returns the type of a node.\n\nExample\n\n <h1 id=""id01"">My First Page</h1>\n <p id=""id02""></p><script>document.getElementById(""id02"").innerHTML \n = document.getElementById(""id01"").nodeType;</script>\nTry it Yourself »\n\nThe most important nodeType properties are:\n\n\nNode\nType\nExample\n\n\nELEMENT_NODE\n1\n<h1 class=""heading"">W3Schools</h1>\n\n\nATTRIBUTE_NODE\n2\n\xa0class = ""heading"" (deprecated)\n\n\nTEXT_NODE\n3\nW3Schools\n\n\nCOMMENT_NODE\n8\n<!-- This is a comment -->\n\n\nDOCUMENT_NODE\n9\nThe HTML document itself (the parent of <html>)\n\n\nDOCUMENT_TYPE_NODE\n10\n<!Doctype html>\n\n\n\nType 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM.\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'In this tutorial we use the innerHTML property to retrieve the content of an \nHTML element.However, learning \nthe other methods above is useful for understanding the tree structure and the \nnavigation of the DOM.', 'There are two special properties that allow access to the full document:', 'The nodeName property specifies the name of a node.', 'The nodeValue property specifies the value of a node.', 'The nodeType property is read only. It returns the type of a node.The most important nodeType properties are:']","['\n <title \n id=""demo"">DOM Tutorial</title>\n &&&&&& \nmyTitle = document.getElementById(""demo"").innerHTML;\n &&&&&& \nmyTitle = document.getElementById(""demo"").firstChild.nodeValue;\n &&&&&& \nmyTitle = document.getElementById(""demo"").childNodes[0].nodeValue;\n &&&&&& \n<html>\n<body><h1 id=""id01"">My First Page</h1><p id=""id02""></p>\n<script>\n document.getElementById(""id02"").innerHTML \n = document.getElementById(""id01"").innerHTML;\n</script>\n</body>\n</html> &&&&&& \n<html>\n<body><h1 id=""id01"">My First Page</h1><p id=""id02""></p>\n<script>\n document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").firstChild.nodeValue;\n</script>\n</body>\n</html> &&&&&& \n<html>\n<body><h1 id=""id01"">My First Page</h1><p id=""id02"">Hello!</p>\n<script>\n document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").childNodes[0].nodeValue;\n</script>\n</body>\n</html>', '\n<html>\n<body>\n\n<h2>JavaScript HTMLDOM</h2><p>Displaying document.body</p><p \nid=""demo""></p><script>document.getElementById(""demo"").innerHTML \n= document.body.innerHTML;</script>\n\n</body>\n</html> &&&&&& \n<html>\n<body>\n\n<h2>JavaScript HTMLDOM</h2><p>Displaying document.documentElement</p>\n<p id=""demo""></p><script>\ndocument.getElementById(""demo"").innerHTML = \ndocument.documentElement.innerHTML;</script>\n\n</body>\n</html>', '\n  <h1 id=""id01"">My First Page</h1>\n <p id=""id02""></p><script>document.getElementById(""id02"").innerHTML \n = document.getElementById(""id01"").nodeName;</script>', '']","['DOM Nodes###Node Relationships###Node Relationships###Node Relationships###Navigating Between Nodes###DOM Root Nodes###The nodeName Property###The nodeValue Property###&&&|||The entire document is a document node|||Every HTML element is an element node|||The text inside HTML elements are text nodes|||Every HTML attribute is an attribute node (deprecated)|||All comments are comment nodes|||&&&|||In a node tree, the top node is called the root (or root node)|||Every node has exactly one parent, except the root (which has no parent)|||A node can have a number of children|||Siblings (brothers or sisters) are nodes with the same parent|||&&&|||<html> is the root node|||<html> has no parents |||<html> is the parent of <head> and <body>|||<head> is the first child of <html>|||<body> is the last child of <html>|||&&&|||<head> has one child: <title>|||<title> has one child (a text node): ""DOM Tutorial""|||<body> has two children: <h1> and <p>|||<h1> has one child: ""DOM Lesson one""|||<p> has one child: ""Hello world!""|||<h1> and <p> are siblings|||&&&|||parentNode|||childNodes[nodenumber]|||firstChild|||lastChild|||nextSibling|||previousSibling|||&&&|||document.body - The body of the document|||document.documentElement - The full document|||&&&|||nodeName is read-only|||nodeName of an element node is the same as the tag name|||nodeName of an attribute node is the attribute name|||nodeName of a text node is always #text|||nodeName of the document node is always #document|||&&&|||nodeValue for element nodes is null|||nodeValue for text nodes is the text itself|||nodeValue for attribute nodes is the attribute value|||']","['Node|||Type|||Example|||&&&ELEMENT_NODE|||1|||<h1 class=""heading"">W3Schools</h1>|||&&&ATTRIBUTE_NODE|||2|||\xa0class = ""heading"" (deprecated)|||&&&TEXT_NODE|||3|||W3Schools|||&&&COMMENT_NODE|||8|||<!-- This is a comment -->|||&&&DOCUMENT_NODE|||9|||The HTML document itself (the parent of <html>)|||&&&DOCUMENT_TYPE_NODE|||10|||<!Doctype html>|||&&&']","['pic_htmltree.gif', 'pic_navigate.gif']"
js||HTML DOM Elements (Nodes),https://www.w3schools.com/js/js_htmldom_nodes.asp,Adding and Removing Nodes (HTML Elements),"['Creating New HTML Elements (Nodes)', 'Example Explained\xa0', 'Creating new HTML Elements - insertBefore()', 'Removing Existing HTML Elements', 'Example Explained\xa0', 'Removing a Child Node', 'Example Explained\xa0', 'Replacing HTML Elements\xa0']","['To add a new element to the HTML DOM, you must create the element (element node) first, \nand then append it to an existing element. ', 'This code creates a new <p> element:To add text to the <p> element, you must create a text node first. This code creates a text node:Then you must append the text node to the <p> element:Finally you must append the new element to an existing element.This code finds an existing element:This code appends the new element to the existing element:', ""The appendChild() method in the previous example, appended the new element as \nthe last child of the parent.If you don't want that you can use the insertBefore() method: "", 'To remove an HTML element, use the remove() \nmethod:The HTML document contains a <div> element with two child nodes (two <p> \nelements):Find the element you want to remove:Then execute the remove() method on that element:', 'For browsers that does not support the remove() method, you have to find the \nparent node to remove an element:', 'This HTML document contains a <div> element with two child nodes (two <p> \nelements):Find the element with id=""div1"":Find the <p> element with id=""p1"":Remove the child from the parent:Here is a common workaround: Find the child you want to remove, and use its \nparentNode property to find the parent:', 'To replace an element to the HTML DOM, use the replaceChild() method:', '']","['\n<div id=""div1"">\n\xa0\n<p id=""p1"">This is a paragraph.</p>\n\xa0\n<p id=""p2"">This is another paragraph.</p>\n</div><script>\nconst para = document.createElement(""p"");\nconst node = document.createTextNode(""This is new."");\npara.appendChild(node);\nconst element = document.getElementById(""div1"");\nelement.appendChild(para);\n</script>\n', '\n<div id=""div1"">\n\xa0\n<p id=""p1"">This is a paragraph.</p>\n\xa0\n<p id=""p2"">This is another paragraph.</p>\n</div><script>\nconst para = document.createElement(""p"");\nconst node = document.createTextNode(""This is new."");\npara.appendChild(node);\nconst element = document.getElementById(""div1"");\nconst child = document.getElementById(""p1"");element.insertBefore(para, child);\n</script>', '\n<div>\n\xa0\n<p id=""p1"">This is a paragraph.</p>\n\xa0\n<p id=""p2"">This is another paragraph.</p>\n</div><script>\nconst elmnt = document.getElementById(""p1"");\nelmnt.remove();\n</script>', '\n<div id=""div1"">\n\xa0\n<p id=""p1"">This is a paragraph.</p>\n\xa0\n<p id=""p2"">This is another paragraph.</p>\n</div><script>\nconst parent = document.getElementById(""div1"");\nconst child = document.getElementById(""p1"");\nparent.removeChild(child);\n</script>', '', '', '', '']",[''],[],[]
js||TML DOM Collections,https://www.w3schools.com/js/js_htmldom_collections.asp,,"['The HTMLCollection Object', 'HTML HTMLCollection Length']","['The getElementsByTagName() method returns an HTMLCollection object.An HTMLCollection object is \nan array-like list (collection) of HTML elements.The following code selects all <p> elements in a document:Note: The index starts at 0.', 'The length property defines the number of elements in an HTMLCollection:The length property is useful when you want to loop through the elements in a \ncollection:']","['\nconst myCollection = document.getElementsByTagName(""p"");\n', '\nmyCollection[1]\n']",[''],[],[]
js||HTML DOM Node Lists,https://www.w3schools.com/js/js_htmldom_nodelist.asp,,"['The HTML DOM NodeList Object', 'HTML DOM Node List Length', 'The Difference Between an HTMLCollection and a NodeList']","['A NodeList object is a list (collection) of nodes extracted from a \ndocument.A NodeList object is almost the same as an HTMLCollection object.Some (older) browsers return a NodeList object instead of an HTMLCollection \nfor methods like getElementsByClassName().All browsers return a NodeList object for the property childNodes.\xa0 Most browsers return a NodeList object for the method querySelectorAll().The following code selects all <p> nodes in a document:Note: The index starts at 0.', 'The length property defines the number of nodes in a node list:The length property is useful when you want to loop through the nodes in a node \nlist:', 'An HTMLCollection (previous chapter) is a collection of HTML elements.A NodeList is a collection of document nodes.A NodeList and an HTML collection is very much the same thing. Both an HTMLCollection object and a NodeList object is \nan array-like list (collection) of objects.Both have a length property defining the number of items in the list \n(collection).Both provide an index (0, 1, 2, 3, 4, ...) to access each item like an array.HTMLCollection items \ncan be accessed by their name, id, or index number.NodeList items can only be accessed by their index number.Only the NodeList object can contain attribute nodes and text nodes.']","['\nconst myNodeList = document.querySelectorAll(""p"");\n', '\nmyNodeList[1]\n', '\nmyNodelist.length\n &&&&&& \nconst myNodelist = document.querySelectorAll(""p"");\nfor (let i = 0; i < myNodelist.length; i++) {\n\xa0 myNodelist[i].style.color = ""red"";\n}\n']",[''],[],[]
js||Window - The Browser Object Model,https://www.w3schools.com/js/js_window.asp,"The Browser Object Model (BOM) allows JavaScript to ""talk to"" 
the browser.","['The Browser Object Model (BOM)', 'The Window Object', 'Window Size', 'Other Window Methods']","['There are no official standards for the Browser Object\nModel (BOM).Since modern browsers have implemented (almost) the same methods and \nproperties for JavaScript interactivity, it is often referred to, as methods and \nproperties of the BOM.', ""The window object is supported by all browsers. It represents \nthe browser's window.All global JavaScript objects, functions, and variables automatically become \nmembers of the window object.Global variables are properties of the window object.Global functions are methods of the window object.Even the document object (of the HTML DOM) is a property of the window \nobject: is the same as:"", 'Two properties can be used to determine the size of the browser \nwindow.Both properties return the sizes in \npixels:', 'Some other methods:']","['\nlet w = window.innerWidth;\nlet h = window.innerHeight;\n', '', '', '']",['Window Size###Other Window Methods###&&&|||window.innerHeight - the inner height of the browser window (in pixels)|||window.innerWidth - the inner width of the browser window (in pixels)|||&&&|||window.open() - open a new window|||window.close() - close the current window|||window.moveTo() - move the current window|||window.resizeTo() - resize the current window|||'],[],[]
js||Window Screen,https://www.w3schools.com/js/js_window_screen.asp,"The window.screen object contains information 
about the user's screen.","['Window Screen', 'Window Screen Width', 'Window Screen Height', 'Window Screen Available Width', 'Window Screen Available Height', 'Window Screen Color Depth', 'Window Screen Pixel Depth']","['The window.screen object can be written without the window prefix.Properties:', ""The screen.width property returns the width of the visitor's screen in \npixels."", ""The screen.height property returns the height of the visitor's screen in pixels."", ""The screen.availWidth property returns the width of the visitor's screen, in \npixels, \nminus interface features like the Windows Taskbar."", ""The screen.availHeight property returns the height of the visitor's screen, \nin pixels, minus interface features like the Windows Taskbar."", 'The screen.colorDepth property returns the number of bits used to display one color.All modern computers use 24 bit or 32 bit hardware for color resolution:Older computers used 16 bits: 65,536 different ""High Colors"" resolution.Very old computers, and old cell phones used 8 bits: 256 different ""VGA colors"".', 'The screen.pixelDepth property returns the pixel depth of the screen.']","['\n document.getElementById(""demo"").innerHTML =""Screen Width: "" + screen.width;\n', '\n\n\ndocument.write(""Screen Width: "" + screen.width);\n\n\n', '\n document.getElementById(""demo"").innerHTML =""Screen Height: "" + screen.height;\n', '\n\n\ndocument.write(""Screen Height: "" + screen.height);\n\n\n', '\n document.getElementById(""demo"").innerHTML =""Available Screen Width: "" + screen.availWidth;\n', '\n\n\ndocument.write(""Available Screen Width: "" + screen.availWidth);\n\n\n', '\n document.getElementById(""demo"").innerHTML =""Available Screen Height: "" + screen.availHeight;\n', '\n\n\ndocument.write(""Available Screen Height: "" + screen.availHeight);\n\n\n', '\n document.getElementById(""demo"").innerHTML = ""Screen Color Depth: "" + screen.colorDepth;\n', '\n\n\ndocument.write(""Screen Color Depth: "" + screen.colorDepth);\n\n\n']","['Window Screen###Window Screen Color Depth###&&&|||screen.width|||screen.height|||screen.availWidth|||screen.availHeight|||screen.colorDepth|||screen.pixelDepth|||&&&|||24 bits =\xa0\xa0\xa0\xa0\xa0 16,777,216 different ""True Colors""|||32 bits = 4,294,967,296 different ""Deep Colors""|||']",[],[]
js||Window Location,https://www.w3schools.com/js/js_window_location.asp,"The window.location object can be used to get 
the current page address (URL) and to redirect the browser to a new page.","['Window Location', 'Window Location Href', 'Window Location Hostname', 'Window Location Pathname', 'Window Location Protocol', 'Window Location Port', 'Window Location Assign']","['The window.location object can be written without the window prefix.Some examples:', 'The window.location.href property returns the URL of the current page.', 'The window.location.hostname property returns the name of the internet host (of the current page).', 'The window.location.pathname property returns the pathname of \nthe current page.', 'The window.location.protocol property returns the web protocol of the page.', 'The window.location.port property returns the number of the internet host \nport (of the current page).', 'The window.location.assign() method loads a new document.']","['\n document.getElementById(""demo"").innerHTML =""Page location is "" + window.location.href;\n', '\n\n\ndocument.write(""Page location is "" + location.href);\n\n\n\n', '\n document.getElementById(""demo"").innerHTML =""Page hostname is "" + window.location.hostname;', '\n\n\ndocument.write(""Page hostname is "" + location.hostname);\n\n\n', '\n  document.getElementById(""demo"").innerHTML =""Page path is "" + window.location.pathname;\n', '\n\n\ndocument.write(""Page path is "" + location.pathname);\n\n\n', '\n document.getElementById(""demo"").innerHTML =""Page protocol is "" + window.location.protocol;\n', '\n\n\ndocument.write(""Page protocol is "" + location.protocol);\n\n\n', '\n document.getElementById(""demo"").innerHTML =""Port \n  number is "" + window.location.port;', '\n\n\ndocument.write(""Port number is "" + location.port);\n\n\n']",['Window Location###&&&|||window.location.href returns the href (URL) of the current page|||window.location.hostname returns the domain name of the web host|||window.location.pathname returns the path and filename of the current page|||window.location.protocol returns the web protocol used (http: or https:)|||window.location.assign() loads a new document|||'],[],[]
js||Window History,https://www.w3schools.com/js/js_window_history.asp,"The window.history object contains the 
browsers history.","['Window History', 'Window History Back', 'Window History Forward']","['The window.history object can be written without the window prefix.To protect the privacy of the users, there are limitations to how JavaScript \ncan access this object.Some methods:', 'The history.back() method loads the previous URL in the history list.This is the same as clicking the Back button in the browser.', 'The history.forward() method loads the next URL in the history list.This is the same as clicking the Forward button in the browser.']","['\n<html>\n<head>\n<script>\nfunction goBack() {\n\xa0\xa0window.history.back()\n }\n</script>\n</head>\n<body>\n\n<input type=""button"" value=""Back"" onclick=""goBack()"">\n\n</body>\n</html>', '\n\nfunction goBack()\n  {\n  window.history.back()\n  }\n\n\n', '']",['Window History###&&&|||history.back() - same as clicking back in the browser|||history.forward() - same as clicking forward in the browser|||'],[],[]
js||Window Navigator,https://www.w3schools.com/js/js_window_navigator.asp,"The window.navigator object contains information about the 
visitor's browser.","['Window Navigator ', 'Browser Cookies', 'Browser Application Name', 'Browser Application Code Name', 'The Browser Engine', 'The Browser Version', 'The Browser Agent', 'Warning !!!', 'The Browser Platform', 'The Browser Language', 'Is The Browser Online?', 'Is Java Enabled?']","['The window.navigator object can be written without the window prefix.Some examples:', 'The cookieEnabled property returns true if cookies are enabled, otherwise \nfalse:', 'The appName property returns the application name \nof the browser:', 'The appCodeName property returns the application code name \nof the browser:', 'The product property returns \nthe product name of the browser engine:', 'The appVersion property returns \nversion information about the browser:The userAgent property returns the user-agent header sent by the browser to the server:', 'The information from the navigator object can often be misleading, and should \nnot be used to detect browser versions because:', 'The platform property returns the browser platform \n(operating system):', ""The language property returns the browser's language:"", 'The onLine property returns true if the browser is online:', 'The javaEnabled() method returns true if Java is enabled:', '']","['\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML =""cookiesEnabled is "" + navigator.cookieEnabled;\n</script>', '\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML =""navigator.appName is "" + navigator.appName;\n</script>', '\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML =\n ""navigator.appCodeName is "" + navigator.appCodeName;\n</script>', '\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML =\n ""navigator.product is "" + navigator.product;\n</script>', '\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML = navigator.appVersion;\n</script> &&&&&& \n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML = navigator.userAgent;\n</script>', '\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML = navigator.platform;\n</script>', '\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML = navigator.language;\n</script>', '\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML = navigator.onLine;\n</script>', '', '', '', '']","['Window Navigator ###Warning !!!###&&&|||navigator.appName|||navigator.appCodeName|||navigator.platform|||&&&|||Different browsers can use the same name|||The navigator data can |||be changed by the browser owner|||Some browsers misidentify themselves to bypass site tests|||Browsers cannot report new operating systems, released later than the browser|||']",[],[]
js||Popup Boxes,https://www.w3schools.com/js/js_popup.asp,"JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.","['Alert Box', 'Confirm Box', 'Prompt Box', 'Line Breaks']","['An alert box is often used if you want to make sure information comes through to the user.When an alert box pops up, the user will have to click ""OK"" to proceed. The window.alert() method can be written without the window \nprefix.', 'A confirm box is often used if you want the user to verify or accept something.When a confirm box pops up, the user will have to click either ""OK"" or ""Cancel"" to proceed. If the user clicks ""OK"", the box returns true. If the user clicks ""Cancel"", the box returns\nfalse.The window.confirm() method can be written without the window prefix.', 'A prompt box is often used if you want the user to input a value before entering a page.When a prompt box pops up, the user will have to click either ""OK"" or ""Cancel"" \nto proceed after entering an input value. If the user clicks ""OK"" the box returns the input value. If the user clicks ""Cancel"" the box returns null.The window.prompt() method can be written without the window prefix.', 'To display line breaks inside a popup box, use a back-slash followed by the character n.']","['\nalert(""I am an alert box!"");\n', '\n  if (confirm(""Press a button!"")) {\xa0\xa0txt = ""You \n  pressed OK!"";} else {\xa0 txt = ""You pressed Cancel!"";\n  }', '\n  let person = prompt(""Please enter your name"", ""Harry Potter"");\nlet text;if \n  (person == null || person == """") {\xa0\xa0text = ""User cancelled \n  the prompt."";} else {\xa0\xa0text = ""Hello "" + person + ""! \n  How are you today?"";}', '']",[''],[],[]
js||Timing Events,https://www.w3schools.com/js/js_timing.asp,JavaScript can be executed in time-intervals.,"['Timing Events', 'The setTimeout() Method', 'How to Stop the Execution?', 'The setInterval() Method', 'How to Stop the Execution?', 'More Examples']","['The window object allows execution of code at specified time intervals.These time intervals are called timing events.The two key methods to use with JavaScript are:', 'The window.setTimeout() method can be written without the window prefix.The first parameter is a function to be executed.The second parameter indicates the number of milliseconds before execution. ', 'The clearTimeout() method stops the execution of the function \nspecified in setTimeout().The window.clearTimeout() method can be written without the window prefix.The clearTimeout() method uses the variable \nreturned from setTimeout():If the function has not already been executed, you can stop the execution by calling the clearTimeout() \nmethod:', 'The setInterval() method repeats a given function at every given \ntime-interval.The window.setInterval() method can be written without the window prefix.The first parameter is the function to be executed.The second parameter indicates the length of the time-interval between each \nexecution.This example executes a function called ""myTimer"" once every second (like a digital \nwatch).', 'The clearInterval() method stops the executions of the function \nspecified in the setInterval() method.The window.clearInterval() method can be written without the window prefix.The clearInterval() method uses the variable returned from setInterval():', 'Another simple timingA clock created with a timing event']","['\n <button onclick=""setTimeout(myFunction, 3000)"">Try it</button>\n    <script>function myFunction() {\xa0\xa0alert(\'Hello\');\n    }</script>', '\n <button onclick=""myVar = setTimeout(myFunction, 3000)"">Try it</button><button onclick=""clearTimeout(myVar)"">Stop it</button>', '\nsetInterval(myTimer, 1000);\nfunction myTimer() {\xa0 const d = new Date();\xa0 document.getElementById(""demo"").innerHTML = d.toLocaleTimeString();\n}', '\n <p id=""demo""></p><button onclick=""clearInterval(myVar)"">Stop time</button>\n<script>\nlet myVar = setInterval(myTimer, 1000);\n function myTimer() {\xa0\xa0const d = new Date();\xa0 document.getElementById(""demo"").innerHTML = d.toLocaleTimeString();}</script>', '', '']","['Timing Events###&&&|||setTimeout(function, milliseconds)Executes a function, after waiting a specified number of milliseconds.|||setInterval(function, milliseconds)Same as setTimeout(), but repeats the execution |||    of the function continuously.|||']",['\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n|||\nJavaScript can be executed in time-intervals.\nThis is called timing events.\n|||&&&'],[]
js||Cookies,https://www.w3schools.com/js/js_cookies.asp,Cookies let you store user information in web pages.,"['What are Cookies?', 'Create a Cookie with JavaScript', 'Read a Cookie with JavaScript', 'Change a Cookie with JavaScript', 'Delete a Cookie with JavaScript', 'The Cookie String', 'JavaScript Cookie Example', 'A Function to Set a Cookie', 'A Function to Get a Cookie', 'A Function to Check a Cookie', 'All Together Now']","['Cookies are data, stored in small text files, on your computer.When a web server has sent a web page to a browser, the connection is \nshut down, and the server forgets everything about the user.Cookies were invented to solve the problem ""how to remember information about \nthe user"":Cookies are saved in name-value pairs like:When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server \ngets the necessary data to ""remember"" information about users.', 'JavaScript can create, read, and delete cookies with the document.cookie \nproperty.With JavaScript, a cookie can be created like this:You can also add an expiry date (in UTC time).\nBy default, the cookie is deleted when the browser is closed:With a path parameter, you can tell the browser what path the cookie belongs to.\nBy default, the cookie belongs to the current page.', 'With JavaScript, cookies can be read like this:', 'With JavaScript, you can change a cookie the same way as you create it:The old cookie is overwritten.', ""Deleting a cookie is very simple.You don't have to specify a cookie value when you delete a cookie.Just set the expires parameter to a past date:"", 'The document.cookie property looks like a normal text string. But it is not.Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the \nname-value pair of it.If you set a new cookie, older cookies are not overwritten.\nThe new cookie is added to document.cookie, so if you read document.cookie \nagain you will get something like:cookie1 = value; cookie2 = value;\nDisplay All Cookies\xa0\nCreate Cookie 1\xa0\nCreate Cookie 2\nDelete Cookie 1\xa0\nDelete Cookie 2\nIf you want to find the value of one specified cookie, you must write a JavaScript \nfunction that searches for the cookie value in the cookie string.', 'In the example to follow, we will create a cookie that stores the name of a visitor.The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.The next time the visitor arrives at the same page, he/she will get a welcome message.For the example we will create 3 JavaScript functions:', 'First, we create a function that stores the name of the visitor in a cookie variable:Example explained:The parameters of the function above are the name of the cookie (cname), the value of the cookie \n(cvalue), and the number of days until the cookie should expire (exdays).The function sets a cookie by adding together the cookiename, the cookie \nvalue, and the expires string.', 'Then, we create a function that returns the value of a specified cookie:Function explained:Take the cookiename as parameter (cname).Create a variable (name) with the text to search for (cname + ""="").Decode the cookie string, to handle cookies with special characters, e.g. \'$\'Split document.cookie on semicolons into an array called ca (ca = \ndecodedCookie.split(\';\')).Loop through the ca array (i = 0; i < ca.length; i++), and read out each value \nc = ca[i]).If the cookie is found (c.indexOf(name) == 0), return the value of the cookie \n(c.substring(name.length, c.length).If the cookie is not found, return """".', 'Last, we create the function that checks if a cookie is set.If the cookie is set it will display a greeting.If the cookie is not set, it will display a prompt box, asking for the name of the user,\nand stores the username cookie for 365 days, by calling the setCookie function:', 'The example above runs the checkCookie() function when the page loads.']","['\nusername = John Doe\n', '\ndocument.cookie = ""username=John Doe"";', '\ndocument.cookie = ""username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC"";', '\ndocument.cookie = ""username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/"";', '\nlet x = document.cookie;', '\ndocument.cookie = ""username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/"";\n', '\ndocument.cookie = ""username=; expires=Thu, 01 \nJan 1970 00:00:00 UTC; path=/;"";\n', '\n function setCookie(cname, cvalue, exdays) {\n \xa0\xa0const d = new Date();\xa0\xa0d.setTime(d.getTime() + (exdays*24*60*60*1000));\xa0\xa0let expires = ""expires=""+ d.toUTCString();\xa0\xa0document.cookie = cname + ""="" + cvalue + "";"" + expires + "";path=/"";}\n', '\nfunction getCookie(cname) {\n  \xa0\nlet name = cname + ""="";\n  \xa0\nlet decodedCookie = decodeURIComponent(document.cookie);\n\xa0\xa0let ca = decodedCookie.split(\';\');\n\xa0\xa0for(let i = 0; i <ca.length; i++) {\n  \xa0\xa0\xa0 let c = ca[i];\xa0\xa0\xa0 while (c.charAt(0) == \' \') {\xa0\xa0\xa0\xa0\xa0\xa0c = c.substring(1);\n  \xa0\xa0\xa0 \n }\n  \xa0\xa0\xa0 if (c.indexOf(name) == 0) {\xa0\xa0\xa0\xa0\xa0 return c.substring(name.length, c.length);\n  \xa0\xa0\xa0\xa0}\n  \xa0\xa0}\n  \xa0 return """";\n}\n', '\nfunction checkCookie() {\xa0\xa0let \nusername = getCookie(""username"");\xa0 if (username != """") {\n  \xa0\xa0 alert(""Welcome again "" + username);\n\xa0\xa0} else {\n\xa0\xa0\xa0\xa0username = prompt(""Please enter your name:"", """");\n  \xa0\xa0\xa0 if (username != """" \n&& username != null) {\n  \xa0\xa0\xa0\xa0\xa0 setCookie(""username"", username, 365);\n  \xa0\xa0\xa0\xa0}\xa0\xa0}}\n', '']","['What are Cookies?###&&&|||When a user visits a web page, his/her name can be stored in a cookie.|||Next time the user visits the page, the cookie ""remembers"" his/her name.|||']",[],[]
js||,https://www.w3schools.com/js/js_api_intro.asp,,"['Browser APIs', 'Third Party APIs']","['All browsers have a set of built-in Web APIs \nto support complex operations, and to help accessing data.For example, the Geolocation API can return the coordinates of where the browser is located.', 'Third party APIs are not built into your browser.To use these APIs, you will have to download the code from the Web.Examples:']","['\nconst myElement = document.getElementById(""demo"");\nfunction getLocation() {\n\xa0 if (navigator.geolocation) {\n\xa0\xa0\xa0 navigator.geolocation.getCurrentPosition(showPosition);\n\xa0 } else { \xa0\xa0\xa0 myElement.innerHTML = ""Geolocation is not supported by this browser."";\n\xa0 }\n}\nfunction showPosition(position) {\n\xa0 myElement.innerHTML = ""Latitude: "" + position.coords.latitude + \n\xa0 ""<br>Longitude: "" + position.coords.longitude; }\n', '']",[''],[],[]
js||Validation API,https://www.w3schools.com/js/js_validation_api.asp,,"['Constraint Validation DOM Methods', 'Constraint Validation DOM Properties', 'Validity Properties', 'Examples']","['If an input field contains invalid data, display a message:', 'The validity property of an input element contains a number \nof properties related to the validity of data: ', ""If the number in an input field is greater than 100 (the input's max \nattribute), display a message:If the number in an input field is less than 100 (the input's min attribute), display a message:"", '']","['\n <input id=""id1"" type=""number"" min=""100"" max=""300"" \n    required><button onclick=""myFunction()"">OK</button><p id=""demo""></p><script>\n function myFunction() {\xa0\xa0const inpObj = document.getElementById(""id1"");\xa0\xa0if (!inpObj.checkValidity()) {\xa0\xa0\xa0\xa0document.getElementById(""demo"").innerHTML = inpObj.validationMessage;\n  \xa0\xa0}}</script>', '', '', '']",[''],"['Property|||Description|||&&&checkValidity()|||Returns true if an input element contains valid data.|||&&&setCustomValidity()|||Sets the validationMessage property of an input element.|||&&&', 'Property|||Description|||&&&validity|||Contains boolean properties related to the validity of an input element.|||&&&validationMessage|||Contains the message a browser will display when the validity is false.|||&&&willValidate|||Indicates if an input element will be validated.|||&&&', ""Property|||Description|||&&&customError|||Set to true, if a custom validity message is set.|||&&&patternMismatch|||Set to true, if an element's value does not match its pattern attribute.|||&&&rangeOverflow|||Set to true, if an element's value is greater than its max attribute.|||&&&rangeUnderflow|||Set to true, if an element's value is less than its min attribute.|||&&&stepMismatch|||Set to true, if an element's value is invalid per its step attribute.|||&&&tooLong|||Set to true, if an element's value exceeds its maxLength attribute.|||&&&typeMismatch|||Set to true, if an element's value is invalid per its type attribute.|||&&&valueMissing|||Set to true, if an element (with a required attribute) has no value.|||&&&valid|||Set to true, if an element's value is valid.|||&&&""]",[]
js||,https://www.w3schools.com/js/js_api_history.asp,,"['The History back() Method', 'The History go() Method', 'History Object Properties', 'History Object Methods']","['The back() method loads the previous URL in the windows.history list.It is the same as clicking the ""back arrow"" in your browser.\nGo Back', 'The go() method loads a specific URL from the history list:Go Back 2 Pages', '', '']","['\n<button onclick=""myFunction()"">Go Back</button>\n<script>\nfunction myFunction() {\n\xa0\xa0window.history.back();\n  }\n</script>\n', '\n <button onclick=""myFunction()"">Go Back 2 Pages</button>\n<script>\nfunction myFunction() {\n\xa0\xa0window.history.go(-2);\n }\n</script>\n', '', '']",[''],"['|||||||||||||||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', 'Property|||Description|||&&&length|||Returns the number of URLs in the history list|||&&&', 'Method|||Description|||&&&back()|||Loads the previous URL in the history list|||&&&forward()|||Loads the next URL in the history list|||&&&go()|||Loads a specific URL from the history list|||&&&']",[]
js||,https://www.w3schools.com/js/js_api_web_storage.asp,,"['The localStorage Object', 'The setItem() Method', 'The getItem() Method', 'The sessionStorage Object', 'The setItem() Method', 'The getItem() Method', 'Storage Object Properties and Methods', 'Related Pages for Web Storage API']","['The Web Storage API is a simple syntax for storing and retrieving data in the browser.\nIt is very easy to use:The Web Storage API is supported in all browsers:', 'The localStorage object provides access to a local storage for a particular Web Site.\nIt allows you to store, read, add, modify, and delete data items for that domain.The data is stored with no expiration date, and will not be deleted when the browser is closed.The data will be available for days, weeks, and years.', 'The localStorage.setItem() method stores a data item in a storage.It takes a name and a value as parameters:', 'The localStorage.getItem() method retrieves a data item from the storage.It takes a name as parameter:', 'The sessionStorage object is identical to the localStorage object.The difference is that the sessionStorage object stores data for one session.The data is deleted when the browser is closed.', 'The sessionStorage.setItem() method stores a data item in a storage.It takes a name and a value as parameters:', 'The sessionStorage.getItem() method retrieves a data item from the storage.It takes a name as parameter:', '']","['\nlocalStorage.setItem(""name"", ""John Doe"");\nlocalStorage.getItem(""name"");\n', '\nlocalStorage.setItem(""name"", ""John Doe"");\n', '\nlocalStorage.getItem(""name"");\n', '\nsessionStorage.getItem(""name"");\n', '\nsessionStorage.setItem(""name"", ""John Doe"");\n', '\nsessionStorage.getItem(""name"");\n', '', '']",[''],"['|||||||||||||||&&&Chrome|||IE/Edge|||Firefox|||Safari|||Opera|||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', ""Property/Method|||Description|||&&&key(n)|||Returns the name of the nth key in the storage|||&&&length|||Returns the number of data items stored in the Storage object|||&&&getItem(keyname)|||Returns the value of the specified key name|||&&&setItem(keyname, value)|||Adds that key to the storage, or update that key's value if it already \n    exists|||&&&removeItem(keyname)|||Removes that key from the storage|||&&&clear()|||Empty all key out of the storage|||&&&"", 'Property|||Description|||&&&window.localStorage|||Allows to save key/value pairs in a web browser. Stores the data with no \n    expiration date|||&&&window.sessionStorage|||Allows to save key/value pairs in a web browser. Stores the data for one \n    session|||&&&']",[]
js||,https://www.w3schools.com/js/js_api_web_workers.asp,"A web worker is a JavaScript running in the background, without affecting the performance of the page.","['What is a Web Worker?', 'Browser Support', 'Web Workers Example', 'Check Web Worker Support', 'Create a Web Worker File', 'Create a Web Worker Object', 'Terminate a Web Worker', 'Reuse the Web Worker', 'Full Web Worker Example Code', 'Web Workers and the DOM']","['When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.A web worker is a JavaScript that runs in the background, independently \nof other scripts, without affecting the performance of the page. You can continue to do whatever you want: \nclicking, selecting things, etc., while the web worker runs in the background.The numbers in the table specify the first browser versions that fully support Web Workers:', 'The example below creates a simple web worker that count numbers in the background:', ""Before creating a web worker, check whether the user's browser supports it:"", 'Now, let\'s create our web worker in an external JavaScript.Here, we create a script that counts. The script is stored in the ""demo_workers.js"" file:The important part of the code above is the postMessage() method - which is used to post a message back to the HTML page.Note: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.', 'Now that we have the web worker file, we need to call it from an HTML page.The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in \n""demo_workers.js"":Then we can send and receive messages from the web worker.Add an ""onmessage"" event listener to the web worker.When the web worker posts a message, the code within the event listener is executed. The data \nfrom the web worker is stored in event.data.', 'When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.To terminate a web worker, and free browser/computer resources, use the \nterminate() method:', 'If you set the worker variable to undefined, after it has been terminated, \nyou can reuse the code:', 'We have already seen the Worker code in the .js file. Below is the code for the HTML page:', 'Since web workers are in external files, they do not have access to the following JavaScript objects:', '']","['\nCount numbers: \n\nStart Worker\nStop Worker\n\nvar w;\nfunction startWorker()\n{\nif(typeof(Worker)!==""undefined"") {\n  if(typeof(w)==""undefined"") {\n    w=new Worker(""demo_workers.js"");\n  }\n  w.onmessage = function (event) {\n    document.getElementById(""result"").innerHTML=event.data;\n  };\n} else {\n  document.getElementById(""result"").innerHTML=""Sorry, your browser does not support Web Workers..."";\n  }\n}\n\nfunction stopWorker()\n{ \nw.terminate();\nw = undefined;\n}\n\n', '\n<!DOCTYPE html>\n<html>\n<body>\n\n<p>Count numbers: <output id=""result""></output></p>\n<button onclick=""startWorker()"">Start Worker</button> \n<button onclick=""stopWorker()"">Stop Worker</button>\n\n<script>\nlet w;\n\nfunction startWorker()\n{\n\xa0 if (typeof(w) == ""undefined"") {\n\xa0\xa0\xa0 w = new Worker(""demo_workers.js"");\n\xa0 }\n\xa0\xa0w.onmessage = function(event) {\n\xa0\xa0\xa0 document.getElementById(""result"").innerHTML = event.data;\n\xa0\xa0};\n}\n\nfunction stopWorker()\n{ \n\xa0\xa0w.terminate();\xa0\xa0w = undefined;\n}\n</script>\n\n</body>\n</html>', '', '', '', '', '', '', '', '']",['Web Workers and the DOM###&&&|||The window object|||The document object|||The parent object|||'],['|||||||||||||||&&&Chrome 4|||IE 10|||Firefox 3.5|||Safari 4|||Opera 11.5|||&&&Jan 2010|||Sep 2012|||Jun 2009|||Jun 2009|||Jun 2011|||&&&'],[]
js||,https://www.w3schools.com/js/js_api_fetch.asp,,['A Fetch API Example'],"['The example below fetches a file and displays the content:Since Fetch is based on async and await, the example above might be easier to understand like this:Or even bettter: Use understandable names instead of x and y:']",[''],[''],['|||||||||||||||&&&Chrome 42|||Edge 14|||Firefox 40|||Safari 10.1|||Opera 29|||&&&Apr 2015|||Aug 2016|||Aug 2015|||Mar 2017|||Apr 2015|||&&&'],[]
js||,https://www.w3schools.com/js/js_api_geolocation.asp,,"[""Locate the User's Position"", 'Using the Geolocation API', 'Handling Errors and Rejections', 'Displaying the Result in a Map', 'Location-specific Information', 'The getCurrentPosition() Method - Return Data', 'Geolocation Object - Other interesting Methods']","['The HTML Geolocation API is used to get the geographical position of a user.Since this can compromise privacy, the position is not available unless the user approves it.Try It', 'The Geolocation API is supported in all browsers:', ""The getCurrentPosition() method is used to return the user's position.The example below returns the latitude and longitude of the user's position:Example explained:The example above is a very basic Geolocation script, with no error handling."", ""The second parameter of the getCurrentPosition() method is used to handle \nerrors. It specifies a function to run if it fails to get the user's location:"", 'To display the result in a map, you need access to a map service, like Google \nMaps.In the example below, the returned latitude and longitude is used to show the location in a Google \nMap (using a static image):', ""This page has demonstrated how to show a user's position on a map.Geolocation is also very useful for location-specific information, like:"", 'The getCurrentPosition() method returns an object on success. The latitude, \nlongitude and accuracy properties are always returned. The other properties are returned \nif available:', 'The Geolocation object also has other interesting methods:The example below shows the watchPosition() method. You need an accurate GPS device to test this (like \nsmartphone): ']","['\n <script>const x = document.getElementById(""demo"");function getLocation() {\xa0\xa0if (navigator.geolocation) {\n  \xa0\xa0\xa0 navigator.geolocation.getCurrentPosition(showPosition);\xa0\xa0} else {\n  \xa0\xa0\xa0 x.innerHTML = ""Geolocation is not supported by this browser."";\n  \xa0\xa0}}\n function showPosition(position) {\xa0 x.innerHTML = ""Latitude: "" + position.coords.latitude + \xa0\xa0""<br>Longitude: "" + position.coords.longitude; \n }</script>', '\n function showError(error) {\xa0\xa0switch(error.code) {\xa0\xa0\xa0 case error.PERMISSION_DENIED:\n  \xa0\xa0\xa0\xa0\xa0 x.innerHTML = ""User denied the request for Geolocation.""\n  \xa0\xa0\xa0\xa0\xa0 break;\xa0\xa0\xa0\xa0case error.POSITION_UNAVAILABLE:\n  \xa0\xa0\xa0\xa0\xa0 x.innerHTML = ""Location information is unavailable.""\xa0\xa0\xa0\xa0\xa0 break;\xa0\xa0\xa0\xa0case error.TIMEOUT:\n  \xa0\xa0\xa0\xa0\xa0 x.innerHTML = ""The request to get user location timed out.""\n  \xa0\xa0\xa0\xa0\xa0 break;\xa0\xa0\xa0 case error.UNKNOWN_ERROR:\xa0\xa0\xa0\xa0\xa0\xa0x.innerHTML = ""An unknown error occurred.""\xa0\xa0\xa0\xa0\xa0\xa0break;\n  \xa0\xa0}\n }', '\n function showPosition(position) {\xa0\xa0let latlon = position.coords.latitude + "","" + position.coords.longitude;\n \xa0\xa0let img_url = ""https://maps.googleapis.com/maps/api/staticmap?center=\n \xa0\xa0""+latlon+""&zoom=14&size=400x300&sensor=false&key=YOUR_KEY"";\n \xa0\xa0document.getElementById(""mapholder"").innerHTML = ""<img src=\'""+img_url+""\'>"";\n }', '', '', '', '']","['Using the Geolocation API###Location-specific Information###Geolocation Object - Other interesting Methods###&&&|||Check if Geolocation is supported|||If supported, run the getCurrentPosition() method. If not, display a message to the user|||If the getCurrentPosition() method is successful, it returns a coordinates object to the function specified in the parameter (showPosition)|||The showPosition() function outputs the Latitude and Longitude|||&&&|||Up-to-date local information|||Showing Points-of-interest near the user|||Turn-by-turn navigation (GPS)|||&&&|||watchPosition() - Returns the current position of the user and continues to |||return updated position as the user moves (like the GPS in a car).|||clearWatch() - Stops the watchPosition() method.|||']","['|||||||||||||||&&&Yes|||Yes|||Yes|||Yes|||Yes|||&&&', 'Property|||Returns|||&&&coords.latitude|||The latitude as a decimal number (always returned)|||&&&coords.longitude|||The longitude as a decimal number (always returned)|||&&&coords.accuracy|||The accuracy of position (always returned)|||&&&coords.altitude|||The altitude in meters above the mean sea level (returned if available)|||&&&coords.altitudeAccuracy|||The altitude accuracy of position (returned if available)|||&&&coords.heading|||The heading as degrees clockwise from North (returned if available)|||&&&coords.speed|||The speed in meters per second (returned if available)|||&&&timestamp|||The date/time of the response (returned if available)|||&&&']",[]
js||Introduction,https://www.w3schools.com/js/js_ajax_intro.asp,,"['AJAX Example Explained', 'What is AJAX?', 'How AJAX Works', 'Modern Browsers (Fetch API)']","['The HTML page contains a <div> section and a <button>.The <div> \nsection is used to display information from a server.The <button> calls a function (if it is clicked).The function requests data from a web \nserver and displays it:', 'AJAX = Asynchronous JavaScript And\nXML.AJAX is not a programming language.AJAX just uses a combination of:AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.\nThis means that it is possible to update parts of a web page, without reloading the whole page.', 'Modern Browsers can use Fetch API instead of the XMLHttpRequest Object.The Fetch API interface allows web browser to make HTTP requests to web servers.If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.', '']","['\n\nLet AJAX change this text\nChange Content\n\n', '\n<!DOCTYPE html><html>\n<body>\n<div id=""demo"">\xa0 <h2>Let AJAX change this text</h2>\xa0\n<button type=""button"" onclick=""loadDoc()"">Change Content</button>\n </div>\n</body>\n</html>\n', '\nfunction loadDoc() {\n\xa0 const xhttp = new XMLHttpRequest();\n\xa0 xhttp.onload = function() {\xa0\xa0\xa0 \ndocument.getElementById(""demo"").innerHTML = this.responseText;\n\xa0\xa0\xa0 }\n\xa0 xhttp.open(""GET"", ""ajax_info.txt"", true);\xa0 \nxhttp.send();\n}\n', '']",[''],[],['pic_ajax.gif']
js||,https://www.w3schools.com/js/js_ajax_http.asp,,"['Create an XMLHttpRequest Object', 'Define a Callback Function', 'Send a Request', 'Access Across Domains', 'XMLHttpRequest Object Methods', 'XMLHttpRequest Object Properties', 'The onload Property', 'Multiple Callback Functions', 'The onreadystatechange Property']","['All modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-in XMLHttpRequest object.Syntax for creating an XMLHttpRequest object:', 'A callback function is a function passed as a parameter to another function.In this case, the callback function should contain the code to execute when the \nresponse is ready.', 'To send a request to a server, you can use the open() and send() methods of the\nXMLHttpRequest object:', 'For security reasons, modern browsers do not allow access across domains.This means that both the web page and the XML file it tries to load, must be located on the same server.The examples on W3Schools all open XML files located on the W3Schools domain.If you want to use the example above on one of your own web pages,\nthe XML files you load must be located on your own server.', 'With the XMLHttpRequest object you can define a callback function to be executed when \nthe request receives an answer.The function is defined in the onload property of the XMLHttpRequest object:', 'If you have more than one AJAX task in a website, you should create one function for \nexecuting the XMLHttpRequest object, and one callback function for each \nAJAX task.The function call should contain the URL and what function to call when the \nresponse is ready.', 'The readyState property holds the status of the XMLHttpRequest.The onreadystatechange property defines a callback function to be executed when the readyState changes.The status property and the statusText properties hold the status of the XMLHttpRequest object.The onreadystatechange function is called every time the readyState changes. When readyState is 4 and status is 200, the response is ready:', '', '']","['\n// Create an XMLHttpRequest object\nconst xhttp = new XMLHttpRequest();\n// Define a callback function\nxhttp.onload = function() {\n\xa0\xa0// Here you can use the Data\n}\n// Send a request\nxhttp.open(""GET"", ""ajax_info.txt"");\nxhttp.send();\n', '\n xhttp.onload = function() {\n\xa0 document.getElementById(""demo"").innerHTML = this.responseText;\n }\n xhttp.open(""GET"", ""ajax_info.txt"");\n xhttp.send();', '\nloadDoc(""url-1"", myFunction1);\n\nloadDoc(""url-2"", myFunction2);\nfunction loadDoc(url, cFunction) {\n\xa0 const xhttp = new XMLHttpRequest();\n\xa0 xhttp.onload = function() {cFunction(this);}\n\xa0\xa0xhttp.open(""GET"", url);\n\xa0\xa0xhttp.send();\n}\nfunction myFunction1(xhttp) {\n\xa0 // action goes here\n}\n\nfunction myFunction2(xhttp) {\n\xa0 // action goes here\n}\n', '', '', '', '', '', '']",[''],"['Method|||Description|||&&&new XMLHttpRequest()|||Creates a new XMLHttpRequest object|||&&&abort()|||Cancels the current request|||&&&getAllResponseHeaders()|||Returns header information|||&&&getResponseHeader()|||Returns specific header information|||&&&open(method, url, async, user, psw)|||Specifies the requestmethod: the request type GET or POST\nurl: the file location\nasync: true (asynchronous) or false (synchronous)user: optional user namepsw: optional password|||&&&send()|||Sends the request to the serverUsed for GET requests|||&&&send(string)|||Sends the request to the server.Used for POST requests|||&&&setRequestHeader()|||Adds a label/value pair to the header to be sent|||&&&', 'Property|||Description|||&&&onload|||Defines a function to be called when the request is recieved (loaded)|||&&&onreadystatechange|||Defines a function to be called when the readyState property changes|||&&&readyState|||Holds the status of the XMLHttpRequest.\n 0: request not initialized \n 1: server connection established\n 2: request received \n 3: processing request \n 4: request finished and response is ready |||&&&responseText|||Returns the response data as a string|||&&&responseXML|||Returns the response data as XML data|||&&&status|||Returns the status-number of a request200: ""OK""403: ""Forbidden""404: ""Not Found""\n    For a complete list go to the Http \n    Messages Reference|||&&&statusText|||Returns the status-text (e.g. ""OK"" or ""Not Found"")|||&&&', 'Property|||Description|||&&&onreadystatechange|||Defines a function to be called when the readyState property changes|||&&&readyState|||Holds the status of the XMLHttpRequest. \n 0: request not initialized \n 1: server connection established\n 2: request received \n 3: processing request \n 4: request finished and response is ready|||&&&status|||200: ""OK""403: ""Forbidden""\n 404: ""Page not found""For a complete list go to the\n    Http Messages Reference|||&&&statusText|||Returns the status-text (e.g. ""OK"" or ""Not Found"")|||&&&']",[]
js||,https://www.w3schools.com/js/js_ajax_http_send.asp,The XMLHttpRequest object is used to request data from a server.,"['Send a Request To a Server', 'The url - A File On a Server', 'Asynchronous - True or False?', 'GET or POST?', 'GET Requests', 'POST Requests', 'Synchronous Request']","['To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:', 'The url parameter of the open() method, is an address to a file on a server:The file can be any kind of file, like .txt and \n.xml, or server scripting files like .asp and .php (which can perform  \nactions on the server before sending the response back).', 'Server requests should be sent asynchronously.The async parameter of the open() \nmethod should be set to true:By sending asynchronously, the \nJavaScript does not have to wait for the server response, but can instead:', 'GET is simpler and faster than POST, and can be used in most cases.However, always use POST requests when:', 'A simple GET request:In the example above, you may get a cached result. To avoid this, add a unique ID to the URL:If you want to send information with the GET method, add the information to the URL:How the server uses the input and how the server responds to a request, is explained in a later chapter.', 'A simple POST request:To POST data like an HTML form, add an HTTP header with setRequestHeader(). \nSpecify the data you want to send in the send() method:', 'To execute a synchronous request, change the third parameter in the open() method to false:Sometimes async = false are used for quick testing. You will also find \nsynchronous requests in older JavaScript code.Since the code will wait for server completion, there is no need for an onreadystatechange \nfunction:']","['\n xhttp.open(""GET"", ""demo_get.asp"");\n xhttp.send(); &&&&&& \n xhttp.open(""GET"", ""demo_get.asp?t="" + Math.random());\n xhttp.send(); &&&&&& \n xhttp.open(""GET"", ""demo_get2.asp?fname=Henry&lname=Ford"");\n xhttp.send();', '\n xhttp.open(""POST"", ""demo_post.asp"");\n xhttp.send(); &&&&&& \n xhttp.open(""POST"", ""ajax_test.asp"");\n xhttp.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");\n xhttp.send(""fname=Henry&lname=Ford"");', '', '', '', '', '']","['Asynchronous - True or False?###GET or POST?###&&&|||execute other scripts while waiting for server response|||deal with the response after the response is ready|||&&&|||A cached file is not an option (update a file or database on the server).|||Sending a large amount of data to the server (POST has no size limitations).|||Sending user input (which can contain unknown characters), POST is more robust and secure than GET.|||']","['Method|||Description|||&&&open(method, url, async)|||Specifies the type of request\nmethod: the type of request: GET or POST\nurl: the server (file) location\nasync: true (asynchronous) or false (synchronous)|||&&&send()|||Sends the request to the server (used for GET)|||&&&send(string)|||Sends the request to the server (used for POST)|||&&&', 'Method|||Description|||&&&setRequestHeader(header, value)|||Adds HTTP headers to the request\nheader: specifies the header name\nvalue: specifies the header value|||&&&']",[]
js||Response,https://www.w3schools.com/js/js_ajax_http_response.asp,,"['Server Response Properties', 'The responseText Property', 'The responseXML Property', 'Server Response Methods', 'The getAllResponseHeaders() Method', 'The getResponseHeader() Method']","['The responseText property returns the server response as a \nJavaScript string, and you can use it accordingly:', 'The XMLHttpRequest object has an in-built XML parser.The responseXML property returns the server response as an XML DOM object.Using this property you can parse the response as an XML DOM object:', 'The getAllResponseHeaders() method returns all header information from the server response.', 'The getResponseHeader() method returns specific header information from the server response.', '', '']","['\ndocument.getElementById(""demo"").innerHTML = xhttp.responseText;', '\nconst xmlDoc = xhttp.responseXML;\nconst x = xmlDoc.getElementsByTagName(""ARTIST"");\n\nlet txt = """";\nfor (let i = 0; i < x.length; i++) {\n\xa0 txt += x[i].childNodes[0].nodeValue + ""<br>"";\n  }\ndocument.getElementById(""demo"").innerHTML = txt;\n\nxhttp.open(""GET"", \n ""cd_catalog.xml"");xhttp.send();', '\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\n\xa0\xa0\xa0 document.getElementById(""demo"").innerHTML =\n\xa0\xa0\xa0 this.getAllResponseHeaders();\n}\nxhttp.open(""GET"", ""ajax_info.txt"");\nxhttp.send();\n', '', '', '']",[''],"['Property|||Description|||&&&responseText|||get the response data as a string|||&&&responseXML|||get the response data as XML data|||&&&', 'Method|||Description|||&&&getResponseHeader()|||Returns specific header information from the server resource|||&&&getAllResponseHeaders()|||Returns all the header information from the server resource|||&&&']",[]
js||XML Example,https://www.w3schools.com/js/js_ajax_xmlfile.asp,AJAX can be used for interactive communication with an XML file.,"['AJAX XML Example', 'Example Explained', 'The XML File']","['The following example will demonstrate how a web page can fetch information \nfrom an XML file with AJAX:', 'When a user clicks on the ""Get CD info"" button above, the loadDoc() \nfunction is executed.The loadDoc() function creates an XMLHttpRequest object, adds the function \nto be executed when the server response is ready, and sends the request off to the server.When the server response is ready, an HTML \ntable is built, nodes (elements) are extracted from the XML file, and it finally updates the \nelement ""demo"" with the HTML table filled with XML data:', 'The XML file used in the example above looks like this: ""cd_catalog.xml"".']","['\n\nGet CD info\n\n', '\nfunction loadDoc() {\n\xa0 const xhttp = new XMLHttpRequest();\n\xa0 xhttp.onload = function() {myFunction(this);}\n\xa0 xhttp.open(""GET"", ""cd_catalog.xml"");\n\xa0 xhttp.send();\n}\nfunction myFunction(xml) { \n\xa0 const xmlDoc = xml.responseXML;\n\xa0 const x = xmlDoc.getElementsByTagName(""CD"");\n\xa0 let table=""<tr><th>Artist</th><th>Title</th></tr>"";\n\xa0 for (let i = 0; i <x.length; \n i++) { \xa0\xa0\xa0 table += ""<tr><td>"" +\xa0\xa0\xa0 x[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""</td><td>"" +\xa0\xa0\xa0 x[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""</td></tr>"";\xa0 }\xa0 \n document.getElementById(""demo"").innerHTML = table;}\n', '']",[''],[],[]
js||PHP Example,https://www.w3schools.com/js/js_ajax_php.asp,AJAX is used to create more interactive applications.,"['AJAX PHP Example', 'Example Explained', 'The PHP File - ""gethint.php""']","['The following example demonstrates how a web page can communicate with a \nweb server while a user types characters in an input field:', 'In the example above, when a user types a character in the input field, a function \ncalled showHint() is executed.The function is triggered by the onkeyup event.Here is the code:Code explanation:First, check if the input field is empty (str.length == 0). If it is, clear the \ncontent of the txtHint placeholder and exit the function.However, if the input field is not empty, do the following:', 'The PHP file checks an array of names, and returns the corresponding name(s) to the \nbrowser:']","['\nStart typing a name in the input field below:\nSuggestions: \nFirst name: \n', '\n<p>Start typing a name in the input field below:</p>\n<p>Suggestions: <span id=""txtHint""></span></p>\n<form>\nFirst name: <input type=""text"" onkeyup=""showHint(this.value)""></form>\n<script>\nfunction showHint(str) {\n\xa0\xa0if (str.length == 0) { \n\xa0\xa0\xa0\xa0document.getElementById(""txtHint"").innerHTML = """";\n\xa0\xa0\xa0\xa0return;\n\xa0\xa0} else {\n\xa0\xa0\xa0\xa0const xmlhttp = new XMLHttpRequest();\n\xa0\xa0\xa0\xa0xmlhttp.onload = function() {\n\xa0\xa0\xa0\xa0\xa0\xa0document.getElementById(""txtHint"").innerHTML = this.responseText;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0xmlhttp.open(""GET"", ""gethint.php?q="" + str);\n\xa0\xa0xmlhttp.send();\n\xa0\xa0}\n}\n</script>\n', '']","['Example Explained###&&&|||Create an XMLHttpRequest object|||Create the function to be executed when the server response is ready|||Send the request off to a PHP file (gethint.php) on the server|||Notice that q parameter is added gethint.php?q=""+str|||The str variable holds the content of the input field|||']",[],[]
js||ASP Example,https://www.w3schools.com/js/js_ajax_asp.asp,AJAX is used to create more interactive applications.,"['AJAX ASP Example', 'Example Explained', 'The ASP File - ""gethint.asp""']","['The following example will demonstrate how a web page can communicate with a \nweb server while a user type characters in an input field:', 'In the example above, when a user types a character in the input field, a function \ncalled showHint() is executed.The function is triggered by the onkeyup event.Here is the code:Code explanation:First, check if the input field is empty (str.length == 0). If it is, clear the \ncontent of the txtHint placeholder and exit the function.However, if the input field is not empty, do the following:', 'The ASP file checks an array of names, and returns the corresponding name(s) to the \nbrowser:']","['\nStart typing a name in the input field below:\nSuggestions: \nFirst name: \n', '\n<p>Start typing a name in the input field below:</p>\n<p>Suggestions: <span id=""txtHint""></span></p>\n<form>\nFirst name: <input type=""text"" onkeyup=""showHint(this.value)""></form>\n<script>\nfunction showHint(str) {\n\xa0\xa0if (str.length == 0) { \n\xa0\xa0\xa0\xa0document.getElementById(""txtHint"").innerHTML = """";\n\xa0\xa0\xa0\xa0return;\n\xa0\xa0} else {\n\xa0\xa0\xa0\xa0const xmlhttp = new XMLHttpRequest();\n\xa0\xa0\xa0\xa0xmlhttp.onload = function() {\n\xa0\xa0\xa0\xa0\xa0\xa0document.getElementById(""txtHint"").innerHTML = this.responseText;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0xmlhttp.open(""GET"", ""gethint.asp?q="" + str);\n\xa0\xa0xmlhttp.send();\n\xa0\xa0}\n}\n</script>\n', '']","['Example Explained###&&&|||Create an XMLHttpRequest object|||Create the function to be executed when the server response is ready|||Send the request off to an ASP file (gethint.asp) on the server|||Notice that q parameter is added gethint.asp?q=""+str|||The str variable holds the content of the input field|||']",[],[]
js||Database Example,https://www.w3schools.com/js/js_ajax_database.asp,AJAX can be used for interactive communication with a database.,"['AJAX Database Example', 'Example Explained - The showCustomer() Function', 'The AJAX Server Page']","['The following example will demonstrate how a web page can fetch \ninformation from a database with AJAX:', 'When a user selects a customer in the dropdown list above, a function called showCustomer() is executed. The \nfunction is triggered by the onchange event:The showCustomer() function does the following:', 'The page on the server called by the JavaScript above is a PHP file called ""getcustomer.php"".The source code in ""getcustomer.php"" runs a query against a database, and returns the result in an HTML \ntable:']","['\n\n\nSelect a customer:\nAlfreds Futterkiste\nNorth/South\nWolski Zajazd\n\n\n\nCustomer info will be listed here...\n', '\nfunction showCustomer(str) {\n\xa0 if (str == """") {\n\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML = """";\n\xa0\xa0\xa0 return;\n\xa0 }\n\xa0 const xhttp = new XMLHttpRequest();\n\xa0 xhttp.onload = function() {\n\xa0\xa0\xa0 document.getElementById(""txtHint"").innerHTML = this.responseText;\n\xa0 }\n\xa0 xhttp.open(""GET"", ""getcustomer.php?q=""+str);\n\xa0 xhttp.send();\n}\n', '']",['Example Explained - The showCustomer() Function###&&&|||Check if a customer is selected|||Create an XMLHttpRequest object|||Create the function to be executed when the server response is ready|||Send the request off to a file on the server|||Notice that a parameter (q) is added to the URL (with the content of the dropdown list)|||'],[],[]
js||Applications,https://www.w3schools.com/js/js_ajax_applications.asp,"This chapter demonstrates some HTML applications using 
XML, HTTP, DOM, and JavaScript.","['The XML Document Used', 'Display XML Data in an HTML Table', 'Display the First CD in an HTML div Element', 'Navigate Between the CDs', 'Show Album Information When Clicking On a CD']","['In this chapter we will use the XML file called ""cd_catalog.xml"".', 'This example loops through each <CD> element, and displays the values of the <ARTIST> and the \n<TITLE> elements in an HTML table:For more information about using JavaScript and the XML DOM, go to\nDOM Intro.', 'This example uses a function to display the first CD element in an HTML element with id=""showCD"":', 'To navigate between the CDs in the example above, create a \nnext() and previous() function:', '\nThe last example shows how you can show album information when the user clicks on a CD:']","['\n<table id=""demo""></table>\n\n<script>\nfunction loadXMLDoc() {\n\xa0 const xmlhttp = new XMLHttpRequest();\n\xa0 xmlhttp.onload = function() {\n\xa0\xa0\xa0 const xmlDoc = xml.responseXML;\n\xa0\xa0\xa0 const cd = xmlDoc.getElementsByTagName(""CD"");\n\xa0\xa0\xa0 myFunction(cd);\n\xa0\xa0}\n\xa0 xmlhttp.open(""GET"", ""cd_catalog.xml"");\xa0 \nxmlhttp.send();\n}\n\nfunction myFunction(cd) {\n\xa0 let table=""<tr><th>Artist</th><th>Title</th></tr>"";\n\xa0 for (let i = 0; i < cd.length; i++) {\n\xa0\xa0\xa0 table += ""<tr><td>"" +\xa0\xa0\xa0 cd[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""</td><td>"" +\xa0\xa0\xa0 cd[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue \n +\xa0\xa0\xa0 ""</td></tr>"";\xa0 }\xa0 \n document.getElementById(""demo"").innerHTML = table;}</script>\n\n</body>\n</html>', '\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\n\xa0\xa0const xmlDoc = xhttp.responseXML;\n\xa0\xa0const cd = xmlDoc.getElementsByTagName(""CD"");\n\xa0\xa0myFunction(cd, 0);\n}\nxhttp.open(""GET"", ""cd_catalog.xml"");\nxhttp.send();\n\nfunction myFunction(cd, i) {\n\n\xa0 document.getElementById(""showCD"").innerHTML =\n\xa0 ""Artist: "" +\n\xa0 cd[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue +\n\xa0 ""<br>Title: "" +\n\xa0 cd[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue +\n\xa0\xa0""<br>Year: "" + \n\xa0 cd[i].getElementsByTagName(""YEAR"")[0].childNodes[0].nodeValue;\n}\n', '\nfunction next()\n{\xa0 // display the next CD, unless you are on the last CD\n\xa0\nif (i < len-1) {\n\xa0\xa0\xa0 i++;\n\xa0\xa0\xa0 displayCD(i);\n\xa0 }\n}\n\nfunction previous()\n{\xa0 // display the previous CD, unless you are on the first CD \n\xa0\nif (i > 0) {\n\xa0\xa0\xa0 i--;\n\xa0\xa0\xa0 displayCD(i);\n\xa0\xa0}\n}\n', '', '']",[''],[],[]
js||Examples,https://www.w3schools.com/js/js_ajax_examples.asp,,[],"['Examples explained', 'Examples explained', 'Examples explained', 'Examples explained', '', 'Examples explained']",[],[''],[],[]
js||- Introduction,https://www.w3schools.com/js/js_json_intro.asp,,"['What is JSON?', 'Why Use JSON?', 'Storing Data']","['The JSON format was originally specified by\nDouglas Crockford.', 'The JSON format is syntactically similar to the code for creating \nJavaScript objects.\nBecause of this, a JavaScript program \ncan easily convert JSON data into JavaScript objects.Since the format is text only, JSON data can easily be sent between computers,\nand used by any programming language.JavaScript has a built in function for converting JSON strings into JavaScript objects:JSON.parse()JavaScript also has a built in function for converting an object into a JSON string:JSON.stringify()', 'When storing data, the data has to be a certain format, and regardless of where you choose to store it, \ntext is always one of the legal formats.JSON makes it possible to store JavaScript objects as text.']","['\n\'{""name"":""John"", ""age"":30, ""car"":null}\'\n', '\nlet personName = obj.name;\nlet personAge = obj.age; \n', '']",['JSON Example###What is JSON?###&&&|||name|||age|||car|||&&&|||JSON stands for JavaScript Object Notation|||JSON is a lightweight data-interchange format|||JSON is plain text written in JavaScript object notation|||JSON is used to send data between computers|||JSON is language independent *|||'],[],['img_json.jpg']
js||Syntax,https://www.w3schools.com/js/js_json_syntax.asp,The JSON syntax is a subset of the JavaScript syntax.,"['JSON Syntax Rules', 'JSON Data - A Name and a Value', 'JSON - Evaluates to JavaScript Objects', 'JavaScript Objects', 'JavaScript Arrays as JSON', 'JSON Files']","['JSON syntax is derived from JavaScript object notation syntax:', 'JSON data is written as name/value pairs (aka key/value pairs).A name/value pair consists of a field name (in double quotes), \nfollowed by a colon, followed by a value:', 'The JSON format is almost identical to JavaScript objects.In JSON, keys must be strings, written with double quotes:In JavaScript, keys can be strings, numbers, or identifier names:', '\nJSON Values\nIn JSON, values must be one of the following data types:In JavaScript values can be all of the above, plus any other valid JavaScript \nexpression, including:In JSON, string values must be written with double quotes:In JavaScript, you can write string values with double or single quotes:', 'Because JSON syntax is derived from JavaScript object notation, very little extra \nsoftware is needed to work with JSON within JavaScript.With JavaScript you can create an object and assign data to \nit, like this:You can access a JavaScript object like this:It can also be accessed like this:Data can be modified like this:It can also be modified like this:You will learn how to convert JavaScript objects into JSON later in this \ntutorial. ', 'The same way JavaScript objects can be written as JSON, JavaScript arrays can \nalso be written as JSON.You will learn more about objects and arrays later in this tutorial.']","['\n""name"":""John""\n', '\n{""name"":""John""}\n', '\n{name:""John""}\n\n', '\n{""name"":""John""}\n', ""\n{name:'John'}\n"", '\nperson = {name:""John"", age:31, city:""New York""};\n &&&&&& \n // returns Johnperson.name; &&&&&& \n // returns Johnperson[""name""]; &&&&&& \n  person.name = ""Gilbert""; &&&&&& \n  person[""name""] = ""Gilbert"";']","['JSON Syntax Rules###JSON - Evaluates to JavaScript Objects###JSON - Evaluates to JavaScript Objects###JSON Files###&&&|||Data is in name/value pairs|||Data is separated by commas|||Curly braces hold objects|||Square brackets hold arrays|||&&&|||a string|||a number|||an object|||an array|||a boolean|||null|||&&&|||a function|||a date|||undefined|||&&&|||The file type for JSON files is "".json""|||The MIME type for JSON text is ""application/json""|||']",[],[]
js||vs XML,https://www.w3schools.com/js/js_json_xml.asp,Both JSON and XML can be used to receive data from a web server.,"['\xa0JSON is Like XML Because', 'JSON is Unlike XML Because', 'Why JSON is Better Than XML']","['The following JSON and XML examples both define an employees object, with an array of 3 employees:', 'The biggest difference is:\xa0XML has to be parsed with an XML parser. JSON can be parsed by a \nstandard JavaScript function. ', 'For AJAX applications, JSON is faster and easier than XML:Using XMLUsing JSON']","['\n{""employees"":[\n\xa0\xa0{ ""firstName"":""John"", ""lastName"":""Doe"" },\n\xa0\xa0{ ""firstName"":""Anna"", ""lastName"":""Smith"" },\n\xa0\xa0{ ""firstName"":""Peter"", ""lastName"":""Jones"" }\n]}\n', '\n<employees>\xa0 <employee>\n\xa0\xa0\xa0 <firstName>John</firstName> <lastName>Doe</lastName>\n\xa0\xa0</employee>\n\xa0\xa0<employee>\n  \xa0\xa0\xa0 <firstName>Anna</firstName> <lastName>Smith</lastName>\n  \xa0 </employee>\n\xa0\xa0<employee>\n  \xa0\xa0\xa0 <firstName>Peter</firstName> <lastName>Jones</lastName>\n  \xa0 </employee>\n</employees>\n', '']","['\xa0JSON is Like XML Because###JSON is Unlike XML Because###Why JSON is Better Than XML###Why JSON is Better Than XML###&&&|||Both JSON and XML are ""self describing"" (human readable)|||Both JSON and XML are hierarchical (values within values)|||Both JSON and XML can be parsed and used by lots of programming languages|||Both JSON and XML can be fetched with an XMLHttpRequest |||&&&|||JSON doesn\'t use end tag|||JSON is shorter|||JSON is quicker to read and write|||JSON can use arrays|||&&&|||Fetch an XML document|||Use the XML DOM to loop through the document|||Extract values and store in variables|||&&&|||Fetch a JSON string|||JSON.Parse the JSON string|||']",[],[]
js||Data Types,https://www.w3schools.com/js/js_json_datatypes.asp,,"['Valid Data Types', 'JSON Strings', 'JSON Numbers', 'JSON Objects', 'JSON Arrays', 'JSON Booleans', 'JSON null']","['In JSON, values must be one of the following data types:', 'Strings in JSON must be written in double quotes.', 'Numbers in JSON must be an integer or a floating point.', 'Values in JSON can be objects.', 'Values in JSON can be arrays.', 'Values in JSON can be true/false.', 'Values in JSON can be null.']","['\n{""name"":""John""}\n', '\n{""age"":30}\n', '\n{""employee"":{""name"":""John"", ""age"":30, ""city"":""New York""}\n}\n', '\n{""employees"":[""John"", ""Anna"", ""Peter""]}\n', '\n  {""sale"":true}', '', '']",[''],[],[]
js||.parse(),https://www.w3schools.com/js/js_json_parse.asp,A common use of JSON is to exchange data to/from a web server.,"['Example - Parsing JSON', 'Array as JSON', 'Exceptions']","['When receiving data from a web server, the data is always a string.Parse the data with JSON.parse(), and the data becomes a JavaScript object.', 'Imagine we received this text from a web server:Use the JavaScript function JSON.parse() to convert text into a JavaScript object:Use the JavaScript object in your page:', 'When using the JSON.parse() on a JSON derived from an array, the method will \nreturn a JavaScript array, instead of a JavaScript object.', 'Date objects are not allowed in JSON.If you need to include a date, write it as a string.You can convert it back into a date object later:Or, you can use the second parameter, of the JSON.parse() function, called reviver.The reviver parameter is a function that checks each property, \nbefore returning the value.Functions are not allowed in JSON.If you need to include a function, write it as a string.You can convert it back into a function later:']","['\n\'{""name"":""John"", ""age"":30, ""city"":""New York""}\'\n &&&&&& \nconst obj = JSON.parse(\'{""name"":""John"", ""age"":30, ""city"":""New \n  York""}\');\n   &&&&&& \n\n<p id=""demo""></p>\n\n<script>\ndocument.getElementById(""demo"").innerHTML = obj.name;\n</script>', '\nconst text = \'[""Ford"", ""BMW"", ""Audi"", ""Fiat""]\';\nconst myArr = JSON.parse(text);\n', '']",[''],[],[]
js||.stringify(),https://www.w3schools.com/js/js_json_stringify.asp,A common use of JSON is to exchange data to/from a web server.,"['Stringify a JavaScript Object', 'Stringify a JavaScript Array', 'Storing Data', 'Exceptions']","['When sending data to a web server, the data has to be \na string.Convert a JavaScript object into a string with JSON.stringify().', 'Imagine we have this object in JavaScript:Use the JavaScript function JSON.stringify() to convert it into a string.myJSON is now a string, and ready to be sent to a server:You will learn how to send JSON to a server in the next chapters.', 'It is also possible to stringify JavaScript arrays:Imagine we have this array in JavaScript:Use the JavaScript function JSON.stringify() to convert it into a string.myJSON is now a string, and ready to be sent to a server:You will learn how to send a JSON string to a server in the next chapters.', 'When storing data, the data has to be a certain format, and regardless of where you choose to store it, \ntext is always one of the legal formats.JSON makes it possible to store JavaScript objects as text.', 'In JSON, date objects are not allowed. The JSON.stringify() function will convert \nany dates into strings.You can convert the string back into a date object at the receiver.', 'In JSON, functions are not allowed as object values.The JSON.stringify() function will remove any functions from a JavaScript \nobject, both the key and the value:This can be omitted if you convert your functions into strings before running \nthe JSON.stringify() function.']","['\nconst obj = {name: ""John"", age: 30, city: ""New York""};\n &&&&&& \nconst myJSON = JSON.stringify(obj); &&&&&& \nconst obj = {name: ""John"", age: 30, city: ""New York""};\nconst myJSON = \n  JSON.stringify(obj);\n  ', '\nconst arr = [""John"", ""Peter"", ""Sally"", ""Jane""];\n &&&&&& \nconst myJSON = JSON.stringify(arr); &&&&&& \nconst arr = [""John"", ""Peter"", ""Sally"", ""Jane""];\nconst myJSON = \n  JSON.stringify(arr);\n  ', '\n  // Storing data:const myObj = {name: ""John"", \n  age: 31, city: ""New York""};const myJSON = \n  JSON.stringify(myObj);localStorage.setItem(""testJSON"", myJSON);\n  // Retrieving data:let text = localStorage.getItem(""testJSON"");let obj = \n  JSON.parse(text);document.getElementById(""demo"").innerHTML = obj.name;', '\nconst obj = {name: ""John"", today: new Date(), city : ""New York""};\nconst myJSON = JSON.stringify(obj);\n', '\nconst obj = {name: ""John"", age: function () {return 30;}, city: ""New York""};\nconst myJSON = JSON.stringify(obj);\n &&&&&& \nconst obj = {name: ""John"", age: function () {return 30;}, city: ""New York""};\n  obj.age = obj.age.toString();const myJSON = JSON.stringify(obj);\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_json_objects.asp,,['JavaScript Objects'],"['This is a JSON string:Inside the JSON string there is a JSON object literal:JSON object literals are surrounded by curly braces {}.JSON object literals contains key/value pairs.Keys and values are separated by a colon.Keys must be strings, \nand values must be a valid JSON data type:\n\nstring\nnumber\nobject\narray\nboolean\nnull\n\nEach key/value pair is separated by a comma.', 'You can create a JavaScript object from a JSON object literal:\n\nExample\n\nmyObj = {""name"":""John"", ""age"":30, ""car"":null};\n\nTry it Yourself »\n\nNormally, you create a JavaScript object by parsing a JSON string:\n\nExample\n\nmyJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nmyObj = JSON.parse(myJSON);\n\nTry it Yourself »\n\n\nAccessing Object Values\nYou can access object values by using dot (.) notation:\n\nExample\n\nconst myJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nconst myObj = JSON.parse(myJSON);\n  x = myObj.name;\n\nTry it Yourself »\n\nYou can also access object values by using bracket ([]) notation:\n\nExample\n\nconst myJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nconst myObj = JSON.parse(myJSON);\n  x = myObj[""name""];\nTry it Yourself »\n\n\n\n\n\n\n\n\nLooping an Object\nYou can loop through object properties with a for-in loop:\n\nExample\n\nconst myJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nconst myObj = JSON.parse(myJSON);\n\nlet text = """";\nfor (const x in myObj) {\n\xa0\xa0text += x + "", "";\n}\n\nTry it Yourself »\n\nIn a for-in loop, use the bracket notation to access the property values:\n\nExample\n\nconst myJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nconst myObj = JSON.parse(myJSON);\n\nlet text = """";\nfor (const x in myObj) {\n\xa0\xa0text += myObj[x] + "", "";\n}\n\nTry it Yourself »\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'You can access object values by using dot (.) notation:You can also access object values by using bracket ([]) notation:', 'You can loop through object properties with a for-in loop:In a for-in loop, use the bracket notation to access the property values:']","['\n\'{""name"":""John"", ""age"":30, ""car"":null}\'\n', '\n{""name"":""John"", ""age"":30, ""car"":null}\n', '\nmyObj = {""name"":""John"", ""age"":30, ""car"":null};\n &&&&&& \nmyJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nmyObj = JSON.parse(myJSON);\n', '\nconst myJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nconst myObj = JSON.parse(myJSON);\n  x = myObj.name;\n &&&&&& \nconst myJSON = \'{""name"":""John"", ""age"":30, ""car"":null}\';\nconst myObj = JSON.parse(myJSON);\n  x = myObj[""name""];']",[''],[],[]
js||,https://www.w3schools.com/js/js_json_arrays.asp,,['JavaScript Arrays'],"['You can create a JavaScript array from a literal:\n\nExample\n\nmyArray = [""Ford"", ""BMW"", ""Fiat""];\n\nTry it Yourself »\n\nYou can create a JavaScript array by parsing a JSON string:\n\nExample\n\nmyJSON = \'[""Ford"", ""BMW"", ""Fiat""]\';\nmyArray = JSON.Parse(myJSON);\n\nTry it Yourself »\n\n\nAccessing Array Values\nYou access array values by index:\n\nExample\n\nmyArray[0];\n\nTry it Yourself »\n\n\nArrays in Objects\nObjects can contain arrays:\n\nExample\n\n{\n""name"":""John"",\n""age"":30,\n""cars"":[""Ford"", ""BMW"", ""Fiat""]\n}\n\n\nYou access array values by index:\n\nExample\n\nmyObj.cars[0];\n\nTry it Yourself »\n\n\n\n\n\n\n\n\nLooping Through an Array\nYou can access array values by using a for in loop:\n\nExample\n\nfor (let i in myObj.cars) {\xa0 \n  x \n  += myObj.cars[i];}\nTry it Yourself »\n\nOr you can use a for loop:\n\nExample\n\n  for (let i \n  = 0; i < myObj.cars.length; i++) {\xa0 x \n  += myObj.cars[i];}\nTry it Yourself »\n\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'You access array values by index:', 'Objects can contain arrays:You access array values by index:', 'You can access array values by using a for in loop:Or you can use a for loop:']","['\n\'[""Ford"", ""BMW"", ""Fiat""]\'\n', '\n[""Ford"", ""BMW"", ""Fiat""]\n', '\nmyArray = [""Ford"", ""BMW"", ""Fiat""];\n &&&&&& \nmyJSON = \'[""Ford"", ""BMW"", ""Fiat""]\';\nmyArray = JSON.Parse(myJSON);\n', '\nmyArray[0];\n', '\n{\n""name"":""John"",\n""age"":30,\n""cars"":[""Ford"", ""BMW"", ""Fiat""]\n}\n &&&&&& \nmyObj.cars[0];\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_json_server.asp,A common use of JSON is to exchange data to/from a web server.,"['Sending Data', 'Receiving Data', 'JSON From a Server', 'Array as JSON']","['When receiving data from a web server, the data is always a string.Parse the data with JSON.parse(), and the data becomes a JavaScript object.', 'If you have data stored in a JavaScript object, you can convert the object \ninto JSON, and send it to a server:', 'If you receive data in JSON format, you can easily convert it into a JavaScript \nobject:', 'You can request JSON from the server by using an AJAX requestAs long as the response from the server is written in JSON format, you can \nparse the string into a JavaScript object.', 'When using the JSON.parse() on JSON derived from an array, the method will \nreturn a JavaScript array, instead of a JavaScript object.']","['\n  const myObj = {name: ""John"", \n  age: 31, city: ""New York""};const myJSON = \n  JSON.stringify(myObj);window.location = ""demo_json.php?x="" + myJSON;\n', '\n  const myJSON =\n  \'{""name"":""John"", \n  ""age"":31, ""city"":""New York""}\';const myObj = \n  JSON.parse(myJSON);document.getElementById(""demo"").innerHTML = myObj.name;', '\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\n\xa0\xa0const myObj = JSON.parse(this.responseText);\n\xa0\xa0document.getElementById(""demo"").innerHTML = myObj.name;\n};\nxmlhttp.open(""GET"", ""json_demo.txt"");\nxmlhttp.send();\n', '']",[''],[],[]
js||PHP,https://www.w3schools.com/js/js_json_php.asp,"A common use of JSON is to read data from a web server, 
and display the data in a web page.","['The PHP File', 'The Client JavaScript', 'PHP Array', 'The Client JavaScript', 'PHP Database', 'Use the Data', 'PHP Method = POST']","['This chapter will teach you how to exchange JSON data between \nthe client and a PHP server.', 'PHP has some built-in functions to handle JSON.Objects in PHP can be converted into JSON by using the PHP function\njson_encode():Here is a JavaScript on the client, using an AJAX call to request the PHP \nfile from the example above:', 'Arrays in PHP will also be converted into JSON when using the PHP function\njson_encode():Here is a JavaScript on the client, using an AJAX call to request the PHP \nfile from the array example above:', 'PHP is a server side programming language, and can be used to access a database.Imagine you have a database on your server, and you want to send a request to \nit from the client where you ask for the 10 first rows in a table called \n""customers"".On the client, make a JSON object that describes the numbers of rows you want to return.Before you send the request to the server, convert the JSON object into a \nstring and send it as a parameter to the url of the PHP page:Take a look at the PHP file:', 'When sending data to the server, it is often best to use the HTTP POST method.To send AJAX requests using the POST method, specify the method, and the correct header.The data sent to the server must now be an argument to the send() method:The only difference in the PHP file is the method for getting the transferred data.', '', '']","['\n  <?php$myObj->name = ""John"";$myObj->age = 30;$myObj->city = ""New \n  York"";$myJSON = json_encode($myObj);echo $myJSON;?> &&&&&& \nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\n\xa0\xa0const myObj = JSON.parse(this.responseText);\n\xa0\xa0document.getElementById(""demo"").innerHTML = myObj.name;\n}\nxmlhttp.open(""GET"", ""demo_file.php"");\nxmlhttp.send();\n', '\n  <?php$myArr = array(""John"", ""Mary"", ""Peter"", ""Sally"");$myJSON = json_encode($myArr);echo $myJSON;?> &&&&&& \nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\n\xa0\xa0const myObj = JSON.parse(this.responseText);\n\xa0\xa0document.getElementById(""demo"").innerHTML = myObj[2];\n}\nxmlhttp.open(""GET"", ""demo_file_array.php"", true);\nxmlhttp.send();\n', '\nconst limit = {""limit"":10};\nconst dbParam = JSON.stringify(limit);\nxmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\n\xa0\xa0document.getElementById(""demo"").innerHTML = this.responseText;\n}\nxmlhttp.open(""GET"",""json_demo_db.php?x="" + dbParam);\nxmlhttp.send();\n', '\n  <?phpheader(""Content-Type: application/json; charset=UTF-8"");$obj = \n  json_decode($_GET[""x""], false);\n$conn = new mysqli(""myServer"", ""myUser"", ""myPassword"", ""Northwind"");\n  $stmt = $conn->prepare(""SELECT name FROM customers LIMIT ?"");$stmt->bind_param(""s"", $obj->limit);$stmt->execute();$result = $stmt->get_result();\n  $outp = $result->fetch_all(MYSQLI_ASSOC);echo json_encode($outp);?>', '\nxmlhttp.onload = function() {\n\xa0\xa0const myObj = JSON.parse(this.responseText);\n\xa0\xa0let text = """";\n\xa0\xa0for (let x in myObj) {\n\xa0\xa0\xa0\xa0text += myObj[x].name + ""<br>"";\n\xa0\xa0} \n\xa0\xa0document.getElementById(""demo"").innerHTML = text;\n}\n', '', '']","['PHP Database###PHP Database###&&&|||Define an object containing a ""limit"" property and value.|||Convert the object into a JSON string.|||Send a request to the PHP file, with the JSON string as a parameter.|||Wait until the request returns with the result (as JSON)|||Display the result received from the PHP file.|||&&&|||Convert the request into an object, using the PHP function|||  json_decode().|||Access the database, and fill an array with the requested data.|||Add the array to an object, and return the object as JSON using |||the json_encode() function.|||']",[],[]
js||HTML,https://www.w3schools.com/js/js_json_html.asp,JSON can very easily be translated into JavaScript.,"['HTML Table', 'Dynamic HTML Table', 'HTML Drop Down List']","['JavaScript can be used to make HTML in your web pages.', 'Make an HTML table with data received as JSON:', 'Make the HTML table based on the value of a drop down menu:\n\n\nChoose an option:\nCustomers\nProducts\nSuppliers\n\n', 'Make an HTML drop down list with data received as JSON:']","['\nconst dbParam = JSON.stringify({table:""customers"",limit:20});\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\n\xa0\xa0myObj = JSON.parse(this.responseText);\n\xa0\xa0let text = ""<table border=\'1\'>""\n\xa0\xa0for (let x in myObj) {\n\xa0\xa0\xa0\xa0text += ""<tr><td>"" + myObj[x].name + ""</td></tr>"";\n\xa0\xa0}\n\xa0\xa0text += ""</table>""\n\xa0\xa0document.getElementById(""demo"").innerHTML   = text;\n}\nxmlhttp.open(""POST"", ""json_demo_html_table.php"");\nxmlhttp.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");\nxmlhttp.send(""x="" + dbParam);\n', '\n<select id=""myselect"" onchange=""change_myselect(this.value)"">\xa0\xa0<option value="""">Choose an option:</option>\xa0\xa0<option \nvalue=""customers"">Customers</option>\xa0\xa0<option \nvalue=""products"">Products</option>\xa0\xa0<option \nvalue=""suppliers"">Suppliers</option></select>\n<script>\nfunction change_myselect(sel) {\n\xa0\xa0const dbParam = JSON.stringify({table:sel,limit:20});\n\xa0\xa0const xmlhttp = new XMLHttpRequest();\n\xa0\xa0xmlhttp.onload = function() {\n\xa0\xa0\xa0\xa0const myObj = JSON.parse(this.responseText);\n\xa0\xa0\xa0\xa0let text = ""<table border=\'1\'>""\n\xa0\xa0\xa0\xa0for (let x in myObj) {\n\xa0\xa0\xa0\xa0\xa0\xa0text += ""<tr><td>"" + myObj[x].name + ""</td></tr>"";\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0text += ""</table>""\n\xa0\xa0\xa0\xa0document.getElementById(""demo"").innerHTML = text;\n\xa0\xa0}\n\xa0\xa0xmlhttp.open(""POST"", ""json_demo_html_table.php"");\n\xa0\xa0xmlhttp.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");\n\xa0\xa0xmlhttp.send(""x="" + dbParam);\n}\n</script>\n', '']",[''],[],[]
js||,https://www.w3schools.com/js/js_json_jsonp.asp,JSONP is a method for sending JSON data without worrying about cross-domain issues.,"['JSONP Intro', 'The Server File', 'The JavaScript function', 'Creating a Dynamic Script Tag', 'Dynamic JSONP Result', 'Callback Function']","['JSONP does not use the XMLHttpRequest object.JSONP uses the <script> tag instead.', 'Requesting a file from another domain can cause problems, due to cross-domain policy.Requesting an external script from another domain does not have this problem.JSONP uses this advantage, and request files using the script tag \ninstead of the XMLHttpRequest object.The file on the server wraps the result inside a \nfunction call:The result returns a call to a function named ""myFunc"" with the JSON data as \na parameter.Make sure that the function exists on the client.The function named ""myFunc"" is located on the client, and ready to handle \nJSON data:', 'The example above will execute the ""myFunc"" function when the page is \nloading, based on where you put the script tag, which is not very satisfying.The script tag should only be created when needed:', 'The examples above are still very static.Make the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on \nthe information it gets.', 'When you have no control over the server file, how do you get the server file \nto call the correct function?Sometimes the server file offers a callback function as \na parameter:', '']","['\n  <script src=""demo_jsonp.php""> &&&&&& \n  <?php$myJSON = \'{ ""name"":""John"", ""age"":30, ""city"":""New York"" }\';\necho ""myFunc("".$myJSON."");"";\n  ?> &&&&&& \n  function myFunc(myObj) \n  {\xa0\xa0document.getElementById(""demo"").innerHTML = \n  myObj.name;\n  }', '\n  function clickButton() {\xa0\xa0let s = document.createElement(""script"");\xa0\xa0s.src = ""demo_jsonp.php"";\xa0\xa0document.body.appendChild(s);\n  }', '\n  <?phpheader(""Content-Type: application/json; charset=UTF-8"");$obj = \n  json_decode($_GET[""x""], false);\n$conn = new mysqli(""myServer"", ""myUser"", ""myPassword"", ""Northwind"");\n  $result = $conn->query(""SELECT name FROM \n  "".$obj->$table."" LIMIT "".$obj->$limit);$outp = array();\n  $outp = $result->fetch_all(MYSQLI_ASSOC);echo ""myFunc("".json_encode($outp)."")"";?>', '\nconst obj = { table: ""products"", limit: 10 };\nlet s = document.createElement(""script"");\ns.src = ""jsonp_demo_db.php?x="" + JSON.stringify(obj);\ndocument.body.appendChild(s);\n\nfunction myFunc(myObj) {\n\xa0 let txt = """";\xa0 for (let x in myObj) \n  {\xa0\xa0\xa0 txt += myObj[x].name + ""<br>"";\xa0 \n  }\xa0 document.getElementById(""demo"").innerHTML = txt;}', '', '']","['Dynamic JSONP Result###&&&|||Convert the request into an object, using the PHP function|||  json_decode().|||Access the database, and fill an array with the requested data.|||Add the array to an object.|||Convert the array into JSON using |||the json_encode() function.|||Wrap ""myFunc()"" around the return object.|||']",[],[]
js||,https://www.w3schools.com/js/js_jquery_selectors.asp,,"['jQuery vs JavaScript', 'Finding HTML Element by Id', 'Finding HTML Elements by Tag Name', 'Finding HTML Elements by Class Name', 'Finding HTML Elements by CSS Selectors']","['jQuery was created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:', 'Return the element with id=""id01"":', 'Return all <p> elements:', 'Return all elements with class=""intro"".', 'Return a list of all <p> elements with class=""intro"".']","['\nmyElement = $(""#id01"");\n', '\nmyElement = document.getElementById(""id01"");\n', '\nmyElements = $(""p"");\n', '\nmyElements = document.getElementsByTagName(""p"");\n', '\nmyElements = $("".intro"");', '\nmyElements = document.getElementsByClassName(""intro"");']",[''],[],[]
js||,https://www.w3schools.com/js/js_jquery_elements.asp,,"['jQuery vs JavaScript', 'Set Text Content', 'Get Text Content', 'Set HTML Content', 'Get HTML Content']","['jQuery was created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:', 'Set the inner text of an HTML element:', 'Get the inner text of an HTML element:', 'Set the HTML content of an element:', 'Get the HTML content of an element:']","['\nmyElement.text(""Hello Sweden!"");\n', '\nmyElement.textContent = ""Hello Sweden!"";\n', '\nmyText = $(""#02"").text();\n', '\nmyText = document.getElementById(""02"").textContent;\n', '\nmyElement.html(""<p>Hello World</p>"");\n', '\nmyElement.innerHTML = ""<p>Hello World</p>"";\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_jquery_css.asp,,"['jQuery vs JavaScript', 'Hiding HTML Elements', 'Showing HTML Elements', 'Styling HTML Elements']","['jQuery was created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:', 'Hide an HTML Element:', 'Show an HTML Element:', 'Change the font size of an HTML element:']","['\nmyElement.hide();\n', '\nmyElement.style.display = ""none"";\n', '\nmyElement.show();\n', '\nmyElement.style.display = """";\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_jquery_dom.asp,,"['jQuery vs JavaScript', 'Removing HTML Elements', 'Get Parent Element']","['jQuery was created in 2006 by John Resig. \nIt was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:', 'Remove an HTML element:', 'Return the parent of an HTML element:']","['\n$(""#id02"").remove();\n', '\ndocument.getElementById(""id02"").remove();\n', '']",[''],[],[]
js||,https://www.w3schools.com/js/js_graphics.asp,,['Chart.js'],"['Chart.js comes with many built-in chart types:Learn More ...\n\nGoogle Chart\nFrom simple line charts to complex tree maps,\nGoogle Chart provides a number of built-in chart types:\n\nScatter Chart\nLine Chart \nBar / Column Chart\nArea Chart\nPie Chart\nDonut Chart\nOrg Chart\nMap / Geo Chart\n\n\nLearn More ...\n\n\n❮ Previous\nNext ❯\n\n\n\n', 'From simple line charts to complex tree maps,\nGoogle Chart provides a number of built-in chart types:Learn More ...\n\n\n❮ Previous\nNext ❯\n\n\n\n']",[''],['Graphic Libraries###Chart.js###Google Chart###&&&|||Plotly.js|||Chart.js|||Google Chart|||&&&|||Scatter|||Line|||Bar|||Radar|||Pie and Doughnut|||Polar Area|||Bubble|||&&&|||Scatter Chart|||Line Chart |||Bar / Column Chart|||Area Chart|||Pie Chart|||Donut Chart|||Org Chart|||Map / Geo Chart|||'],[],"['../ai/img_plotly_scatter_chart.jpg', '../ai/img_chartjs_scatter_chart.jpg', '../ai/img_google_scatter_chart.jpg']"
js||,https://www.w3schools.com/js/js_graphics_canvas.asp,,"['Line Graphs', 'Combined']","['', '']","['\nconst xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = ""red"";\nfor (let i = 0; i < xArray.length-1; i++) {\n\xa0\xa0let x = xArray[i]*400/150;\n\xa0\xa0let y = yArray[i]*400/15;\n\xa0\xa0ctx.beginPath();\n\xa0\xa0ctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\n\xa0\xa0ctx.fill();\n}\n', '\nlet xMax = canvas.height;\nlet slope = 1.2;\nlet intercept = 70;\n\n// Plot Scatter\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, f(xMax));\nctx.strokeStyle = ""black"";\nctx.stroke();\n\n// Line Function\nfunction f(x) {\n\xa0\xa0return x * slope + intercept;\n}\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_graphics_plotly.asp,,"['Line Graphs', 'Linear Graphs', 'Multiple Lines', 'Bar Charts', 'Horizontal Bar Charts', 'Pie Charts', 'Donut Charts', 'Plotting Equations']","['To display a pie instead of bars, change x and y to labels and values, and change the type to ""pie"":', 'To display a donut instead of a pie, add a hole:', 'Try it Yourself »Try it Yourself »', '', '', '', '', '']","['\nvar xArray = [50,60,70,80,90,100,110,120,130,140,150];\nvar yArray = [7,8,8,9,9,9,10,11,14,14,15];\n// Define Data\nvar data = [{\n\xa0\xa0x: xArray,\n\xa0\xa0y: yArray,\n\xa0\xa0mode:""markers"",\n\xa0\xa0type:""scatter""\n}];\n// Define Layout\nvar layout = {\n\xa0\xa0xaxis: {range: [40, 160], title: ""Square Meters""},\n\xa0\xa0yaxis: {range: [5, 16], title: ""Price in Millions""},\n\xa0\xa0title: ""House Prices vs. Size""\n};\nPlotly.newPlot(""myPlot"", data, layout);\n', '\nvar xArray = [50,60,70,80,90,100,110,120,130,140,150];\nvar yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nvar data = [{\n\xa0\xa0x: xArray,\n\xa0\xa0y: yArray,\n\xa0\xa0mode: ""lines"",\n\xa0\xa0type: ""scatter""\n}];\n\n// Define Layout\nvar layout = {\n\xa0\xa0xaxis: {range: [40, 160], title: ""Square Meters""},\n\xa0\xa0yaxis: {range: [5, 16], title: ""Price in Millions""},\n\xa0\xa0title: ""House Prices vs Size""\n};\n// Display using Plotly\nPlotly.newPlot(""myPlot"", data, layout);\n', '\nvar exp = ""x + 17"";\n\n// Generate values\nvar xValues = [];\nvar yValues = [];\nfor (var x = 0; x <= 10; x += 1) {\n\xa0\xa0yValues.push(eval(exp));\n\xa0\xa0xValues.push(x);\n}\n\n// Define Data\nvar data = [{\n\xa0\xa0x: xValues,\n\xa0\xa0y: yValues,\n\xa0\xa0mode: ""lines""\n}];\n\n// Define Layout\nvar layout = {title: ""y = "" + exp};\n\n// Display using Plotly\nPlotly.newPlot(""myPlot"", data, layout);\n', '\nvar exp1 = ""x"";\nvar exp2 = ""1.5*x"";\nvar exp3 = ""1.5*x + 7"";\n\n// Generate values\n\nvar x1Values = [];\nvar x2Values = [];\nvar x3Values = [];\nvar y1Values = [];\nvar y2Values = [];\nvar y3Values = [];\n\nfor (var x = 0; x <= 10; x += 1) {\n\xa0\xa0x1Values.push(x);\n\xa0\xa0x2Values.push(x);\n\xa0\xa0x3Values.push(x);\n\xa0\xa0y1Values.push(eval(exp1));\n\xa0\xa0y2Values.push(eval(exp2));\n\xa0\xa0y3Values.push(eval(exp3));\n}\n\n// Define Data\nvar data = [\n\xa0\xa0{x: x1Values, y: y1Values, mode:""lines""},\n\xa0\xa0{x: x2Values, y: y2Values, mode:""lines""},\n\xa0\xa0{x: x3Values, y: y3Values, mode:""lines""}\n];\n\n// Define Layout\nvar layout = {title: ""[y="" + exp1 + ""]  [y="" + exp2 + ""]  [y="" + exp3 + ""]""};\n\n// Display using Plotly\nPlotly.newPlot(""myPlot"", data, layout);\n', '\nvar xArray = [""Italy"",""France"",""Spain"",""USA"",""Argentina""];\nvar yArray = [55, 49, 44, 24, 15];\nvar data = [{\n\xa0\xa0x: xArray,\n\xa0\xa0y: yArray,\n\xa0\xa0type: ""bar""\xa0\n}];\nvar layout = {title:""World Wine Wine Production""};\nPlotly.newPlot(""myPlot"", data, layout);\n', '\nvar xArray = [55, 49, 44, 24, 15];\nvar yArray = [""Italy"",""France"",""Spain"",""USA"",""Argentina""];\n\nvar data = [{\n\xa0\xa0x: xArray,\n\xa0\xa0y: yArray,\n\xa0\xa0type: ""bar"",\n\xa0\xa0orientation: ""h""\n}];\n\nvar layout = {title:""World Wine Wine Production""};\n\nPlotly.newPlot(""myPlot"", data, layout);\n', '\nvar data = [{\n\xa0\xa0labels: xArray,\n\xa0\xa0values: yArray,\n\xa0\xa0type: ""pie""\n}];\n', '\nvar data = [{\n\xa0\xa0labels: xArray,\n\xa0\xa0values: yArray,\n\xa0\xa0hole: .4,\n\xa0\xa0type: ""pie""\n}];\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_graphics_chartjs.asp,,"['Scatter Plots', 'Line Graphs', 'Multiple Lines', 'Linear Graphs', 'Function Graphs', 'Bar Charts', 'Pie Charts', 'Doughnut Charts']","['House Prices vs. Size', 'House Prices vs. SizeIf you set the borderColor to zero, you can scatter plot the line graph:', '', '', '', '', '', '']","['\n<script\nsrc=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"">\n</script>\n', '\n<canvas id=""myChart"" style=""width:100%;max-width:700px""></canvas>\n', '\nvar myChart = new Chart(""myChart"", {\n\xa0\xa0type: ""scatter"",\n\xa0\xa0data: {},\n\xa0\xa0options: {}\n});\n', '\nvar myChart = new Chart(""myChart"", {\n\xa0\xa0type: ""line"",\n\xa0\xa0data: {},\n\xa0\xa0options: {}\n});\n', '\nvar myChart = new Chart(""myChart"", {\n\xa0\xa0type: ""bar"",\n\xa0\xa0data: {},\n\xa0\xa0options: {}\n});\n', '\nvar xyValues = [\n\xa0\xa0{x:50, y:7},\n\xa0\xa0{x:60, y:8},\n\xa0\xa0{x:70, y:8},\n\xa0\xa0{x:80, y:9},\n\xa0\xa0{x:90, y:9},\n\xa0\xa0{x:100, y:9},\n\xa0\xa0{x:110, y:10},\n\xa0\xa0{x:120, y:11},\n\xa0\xa0{x:130, y:14},\n\xa0\xa0{x:140, y:14},\n\xa0\xa0{x:150, y:15}\n];\n\nnew Chart(""myChart"", {\n\xa0\xa0type: ""scatter"",\n\xa0\xa0data: {\n\xa0\xa0\xa0\xa0datasets: [{\n\xa0\xa0\xa0\xa0\xa0\xa0pointRadius: 4,\n\xa0\xa0\xa0\xa0\xa0\xa0pointBackgroundColor: ""rgba(0,0,255,1)"",\n\xa0\xa0\xa0\xa0\xa0\xa0data: xyValues\n\xa0\xa0\xa0\xa0}]\n\xa0\xa0},\n\xa0\xa0options:{...}\n});\n', '\nvar xValues = [50,60,70,80,90,100,110,120,130,140,150];\nvar yValues = [7,8,8,9,9,9,10,11,14,14,15];\n\nnew Chart(""myChart"", {\n\xa0\xa0type: ""line"",\n\xa0\xa0data: {\n\xa0\xa0\xa0\xa0labels: xValues,\n\xa0\xa0\xa0\xa0datasets: [{\n\xa0\xa0\xa0\xa0\xa0\xa0backgroundColor: ""rgba(0,0,0,1.0)"",\n\xa0\xa0\xa0\xa0\xa0\xa0borderColor: ""rgba(0,0,0,0.1)"",\n\xa0\xa0\xa0\xa0\xa0\xa0data: yValues\n\xa0\xa0\xa0\xa0}]\n\xa0\xa0},\n\xa0\xa0options:{...}\n});\n', '\nborderColor: ""rgba(0,0,0,0)"",\n', '\nvar xValues = [100,200,300,400,500,600,700,800,900,1000];\n\nnew Chart(""myChart"", {\n\xa0\xa0type: ""line"",\n\xa0\xa0data: {\n\xa0\xa0\xa0\xa0labels: xValues,\n\xa0\xa0\xa0\xa0datasets: [{\n\xa0\xa0\xa0\xa0\xa0\xa0data: [860,1140,1060,1060,1070,1110,1330,2210,7830,2478],\n\xa0\xa0\xa0\xa0\xa0\xa0borderColor: ""red"",\n\xa0\xa0\xa0\xa0\xa0\xa0fill: false\n\xa0\xa0\xa0\xa0},{\n\xa0\xa0\xa0\xa0\xa0\xa0data: [1600,1700,1700,1900,2000,2700,4000,5000,6000,7000],\n\xa0\xa0\xa0\xa0\xa0\xa0borderColor: ""green"",\n\xa0\xa0\xa0\xa0\xa0\xa0fill: false\n\xa0\xa0\xa0\xa0},{\n\xa0\xa0\xa0\xa0\xa0\xa0data: [300,700,2000,5000,6000,4000,2000,1000,200,100],\n\xa0\xa0\xa0\xa0\xa0\xa0borderColor: ""blue"",\n\xa0\xa0\xa0\xa0\xa0\xa0fill: false\n\xa0\xa0\xa0\xa0}]\n\xa0\xa0},\n\xa0\xa0options: {\n\xa0\xa0\xa0\xa0legend: {display: false}\n\xa0\xa0}\n});\n', '\nvar xValues = [];\nvar yValues = [];\ngenerateData(""x * 2 + 7"", 0, 10, 0.5);\n\nnew Chart(""myChart"", {\n\xa0\xa0type: ""line"",\n\xa0\xa0data: {\n\xa0\xa0\xa0\xa0labels: xValues,\n\xa0\xa0\xa0\xa0datasets: [{\n\xa0\xa0\xa0\xa0\xa0\xa0fill: false,\n\xa0\xa0\xa0\xa0\xa0\xa0pointRadius: 1,\n\xa0\xa0\xa0\xa0\xa0\xa0borderColor: ""rgba(255,0,0,0.5)"",\n\xa0\xa0\xa0\xa0\xa0\xa0data: yValues\n\xa0\xa0\xa0\xa0}]\n\xa0\xa0},\n\xa0\xa0options: {...}\n});\n\nfunction generateData(value, i1, i2, step = 1) {\n\xa0\xa0for (let x = i1; x <= i2; x += step) {\n\xa0\xa0\xa0\xa0yValues.push(eval(value));\n\xa0\xa0\xa0\xa0xValues.push(x);\n\xa0\xa0}\n}\n', '\ngenerateData(""Math.sin(x)"", 0, 10, 0.5);\n', '\nvar xValues = [""Italy"", ""France"", ""Spain"", ""USA"", ""Argentina""];\nvar yValues = [55, 49, 44, 24, 15];\nvar barColors = [""red"", ""green"",""blue"",""orange"",""brown""];\n\nnew Chart(""myChart"", {\n\xa0\xa0type: ""bar"",\n\xa0\xa0data: {\n\xa0\xa0\xa0\xa0labels: xValues,\n\xa0\xa0\xa0\xa0datasets: [{\n\xa0\xa0\xa0\xa0\xa0\xa0backgroundColor: barColors,\n\xa0\xa0\xa0\xa0\xa0\xa0data: yValues\n\xa0\xa0\xa0\xa0}]\n\xa0\xa0},\n\xa0\xa0options: {...}\n});\n', '\nvar barColors = [""blue""];\n', '\nvar barColors =""red"";\n', '\nvar barColors = [\n\xa0\xa0""rgba(0,0,255,1.0)"",\n\xa0\xa0""rgba(0,0,255,0.8)"",\n\xa0\xa0""rgba(0,0,255,0.6)"",\n\xa0\xa0""rgba(0,0,255,0.4)"",\n\xa0\xa0""rgba(0,0,255,0.2)"",\n];\n', '\ntype: ""horizontalBar"",\n', '\nnew Chart(""myChart"", {\n\xa0\xa0type: ""pie"",\n\xa0\xa0data: {\n\xa0\xa0\xa0\xa0labels: xValues,\n\xa0\xa0\xa0\xa0datasets: [{\n\xa0\xa0\xa0\xa0\xa0\xa0backgroundColor: barColors,\n\xa0\xa0\xa0\xa0\xa0\xa0data: yValues\n\xa0\xa0\xa0\xa0}]\n\xa0\xa0},\n\xa0\xa0options: {\n\xa0\xa0\xa0\xa0title: {\n\xa0\xa0\xa0\xa0\xa0\xa0display: true,\n\xa0\xa0\xa0\xa0\xa0\xa0text: ""World Wide Wine Production""\n\xa0\xa0\xa0\xa0}\n\xa0\xa0}\n});\n']",[''],[],[]
js||,https://www.w3schools.com/js/js_graphics_google_chart.asp,,"['Line Graph', 'Scatter Plots', 'Bar Charts', 'Pie Charts', '3D Pie']","['To scatter plot the same data, change google.visualization to ScatterChart:', 'To convert a Bar Chart to a Pie chart, just replace:\ngoogle.visualization.BarChartwith:\ngoogle.visualization.PieChart', 'To display the Pie in 3D, just add is3D: true to the options:', '', '']","['\n<script\nsrc=""https://www.gstatic.com/charts/loader.js"">\n</script>\n', '\n<div id=""myChart"" style=""max-width:700px; height:400px""></div>\n', ""\n1 google.charts.load('current',{packages:['corechart']});\n\n2 google.charts.setOnLoadCallback(drawChart);\n"", ""\nfunction drawChart() {\n// Set Data\nvar data = google.visualization.arrayToDataTable([\n\xa0\xa0['Price', 'Size'],\n\xa0\xa0[50,7],[60,8],[70,8],[80,9],[90,9],[100,9],\n\xa0\xa0[110,10],[120,11],[130,14],[140,14],[150,15]\n\xa0\xa0]);\n// Set Options\nvar options = {\n\xa0\xa0title: 'House Prices vs Size',\n\xa0\xa0hAxis: {title: 'Square Meters'},\n\xa0\xa0vAxis: {title: 'Price in Millions'},\n\xa0\xa0legend: 'none'\n};\n// Draw Chart\nvar chart = new google.visualization.LineChart(document.getElementById('myChart'));\nchart.draw(data, options);\n}\n"", ""\nvar chart = new google.visualization.ScatterChart(document.getElementById('myChart'));\n"", ""\nfunction drawChart() {\nvar data = google.visualization.arrayToDataTable([\n\xa0\xa0['Contry', 'Mhl'],\n\xa0\xa0['Italy', 55],\n\xa0\xa0['France', 49],\n\xa0\xa0['Spain', 44],\n\xa0\xa0['USA', 24],\n\xa0\xa0['Argentina', 15]\n]);\nvar options = {\n\xa0\xa0title: 'World Wide Wine Production'\n};\nvar chart = new google.visualization.BarChart(document.getElementById('myChart'));\nchart.draw(data, options);\n}\n"", ""\nvar chart = new google.visualization.PieChart(document.getElementById('myChart'));\n""]",[''],[],[]
js||,https://www.w3schools.com/js/js_graphics_d3js.asp,,['Scatter Plot'],[''],"['\n<script src=""//d3js.org/d3.v3.min.js""></script>\n', '\nd3.select(""body"").append(""p"").text(""Hello World!"");\n']",[''],[],[]
js||Examples,https://www.w3schools.com/js/js_examples.asp,,"['What can JavaScript do?', 'Where to Insert JavaScript', 'JavaScript Output', 'JavaScript Syntax', 'JavaScript Statements', 'JavaScript Comments', 'JavaScript Variables', 'JavaScript Arithmetic ', 'JavaScript Assignment ', 'JavaScript String Concatenation', 'JavaScript Data Types', 'JavaScript Objects', 'JavaScript Functions', 'JavaScript Events', 'JavaScript Strings', 'JavaScript Numbers', 'JavaScript Number Methods', 'JavaScript Maths', 'JavaScript Random', 'JavaScript Dates', 'JavaScript Arrays', 'JavaScript Array Methods', 'JavaScript Array Sort', 'JavaScript Array Iteration', 'JavaScript Type Conversion', 'JavaScript Booleans', 'JavaScript Comparisons', 'JavaScript Conditionals', 'JavaScript Loops', 'JavaScript Error Handling', 'JavaScript Regular Expressions', 'JavaScript Objects', 'JavaScript Object Properties', 'JSON Objects', 'JSON Arrays', 'JSON Parse', 'JSON Stringify', 'JSON PHP', 'JSON HTML', 'JSON JSONP']","['Examples Explained', 'Where to Explained', 'Output Explained', 'Syntax Explained', 'Statements Explained', 'Comments Explained', 'Variables Explained', 'Arithmetic Explained', 'Assignment Explained', 'Concatenation Explained', '\nData types Explained', '\nObjects Explained', 'Functions Explained', 'Events Explained', 'Strings Explained', 'Numbers Explained', 'Numbers Methods Explained', 'Maths Explained', '\nRandom Explained', 'Dates Explained', 'Arrays Explained', 'Array Methods Explained', 'Array Sort Explained', 'Array Iteration Explained', 'Type Conversion Explained', 'Booleans Explained', 'Comparisons Explained', 'Conditionals Explained', 'Loops Explained', 'Errors Explained', 'Objects Explained', 'Object Properties Explained', 'JSON Object Properties Explained', 'JSON Arrays Explained', 'JSON Parse Explained', 'JSON Stringify Explained', 'JSON PHP Explained', 'JSON HTML Explained', 'JSON JSONP Explained', '']","['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']",[''],[],[]
js||HTML DOM,https://www.w3schools.com/js/js_dom_examples.asp,Examples of using JavaScript to access and manipulate DOM objects.,"['The Document Object', '\nThe Anchors Collection\n', '\nThe Links Collection', '\nThe Forms Collection', '\nThe Images Collection', 'CSS Manipulation']","['Document Object Explained', '', '', '', '', '']","['', '', '', '', '', '']",[''],[],[]
js||HTML Input,https://www.w3schools.com/js/js_input_examples.asp,"Examples of using JavaScript to access and manipulate HTML 
input objects.","['Button Object', 'Form Object', 'Option and Select Objects']","['', '', '']","['', '', '']",[''],[],[]
js||HTML Objects,https://www.w3schools.com/js/js_ex_dom.asp,Examples of using JavaScript to access and manipulate HTML objects.,"['Anchor Object', 'Area Object', 'Base Object', 'IFrame Object', 'Image Object', 'Table Objects']","['', '', '', '', '', '']","['', '', '', '', '', '']",[''],[],[]
js||HTML DOM Events,https://www.w3schools.com/js/js_events_examples.asp,Examples of using JavaScript to react to events,"['Input Events', 'Mouse Events', 'Click Events', 'Load Events', 'Others']","['', '', '', '', '']","['', '', '', '', '']",[''],[],[]
js||Browser Objects,https://www.w3schools.com/js/js_ex_browser.asp,Examples of using JavaScript to access and manipulate the Browser objects.,"['Window Object', 'Screen Object', 'Location Object', 'History Object', 'Navigator Object', 'Popup Boxes', 'Timing', 'Cookies']","['Window explained', 'Screen explained', 'Location explained', 'History explained', 'Navigator explained', 'Popup explained', 'Timing explained', '']","['', '', '', '', '', '', '', '']",[''],[],[]
js||Online Editor,https://www.w3schools.com/js/js_editor.asp,,"['JavaScript Editor', 'JavaScript Editor Explained']","['With our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.Click on the ""Try it Yourself"" button to see how it works.', 'The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.The ""Result Size"" returns the width and the height of the result window in pixels (even when you resize the browser window).You can control the size of a window with the bar in between the windows (draggable gutter).The icons are explained in the table below:']","['', '']",[''],['Icon|||Description|||&&&|||Go to www.w3schools.com|||&&&|||Menu button for more options|||&&&|||Save your code (and share it with others)|||&&&|||Change orientation (horizontally or vertically)|||&&&|||Change color theme (dark or light)|||&&&'],[]
js||Exercises,https://www.w3schools.com/js/js_exercises.asp,You can test your JavaScript skills with W3Schools' Exercises.,[],"[""We have gathered a variety of JavaScript exercises (with answers) for each JavaScript Chapter.Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.You will get 1 point for\neach correct answer. Your score and total score will always be displayed.""]",[],[''],[],[]
js||Quiz Test,https://www.w3schools.com/js/js_quiz.asp,You can test your JavaScript skills with W3Schools' Quiz.,"['The Test', 'Count Your Score']","[""The test contains 25 questions and there is no time limit.The test is not official, it's just a nice way to see how much you know, or don't know, about JavaScript.You will get 1 point for each correct answer. At the end of the Quiz,\nyour total score will be displayed. Maximum score is 25 points."", '']","['', '']",[''],[],[]
js||JavaScript Certificate,https://www.w3schools.com/js/js_exam.asp,,['How Does It Work?'],[''],[''],"['How Does It Work?###&&&|||Study for free at W3Schools.com|||Study at your own speed|||Test your skills with W3Schools online quizzes|||Apply for your certificate by paying an exam fee|||Take your exam online, at any time, and from any location|||']","['.cls-1{fill:#04aa6b;}.cls-2{font-size:23px;}.cls-2,.cls-3,.cls-4{fill:#fff;}.cls-2,.cls-3{font-family:RobotoMono-Medium, Roboto Mono;font-weight:500;}.cls-3{font-size:20.08px;}w3schools CERTIFIED  .  2021\n|||\xa0\xa0|||\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 30 000 certificates already issued!\n|||&&&', '\nDocument Your Skills\nKnowledge is power, especially in the current job market. Documentation of your skills enables you to advance your career, or help you to start a new one.\nGet a Certificate\nGetting a certificate proves your commitment to upgrade your skills,\ngives you the credibility needed for more responsibilities, larger projects, and a higher salary.\n\nGet Your Certificate »\n\n|||\n\n|||&&&']",['/cert/pic_html_cert_small.gif']
js||,https://www.w3schools.com/js//jsref/default.asp,,[''],[''],[''],[''],[''],['']
js||,https://www.w3schools.com/js//jsref/default.asp,,[''],[''],[''],[''],[''],['']
